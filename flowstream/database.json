{
	"variables": {},
	"fktkf001hp41d": {
		"paused": true,
		"id": "fktkf001hp41d",
		"reference": "",
		"author": "Afric Consuting Group",
		"group": "ServiceFoot",
		"icon": "fa fa-volleyball-ball",
		"color": "#3B80F7",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "ServiceFoot",
		"components": {
			"ckwuq8pg8": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq8zek": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuq94cc": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq96qg": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq98l4": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9eu4": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9how": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9mxs": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckwuq9pk8": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuq9rvk": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"ckwuq9u6w": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"ckwuqa354": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component creates a HTTP request. Incoming data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"ckwuqa4rg": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ckwuqaml4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Peter Širka';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqao7g": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqaqzg": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqau2k": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqax8g": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb00g": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb1xw": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb3y4": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"ckwuqbayw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbco0": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbgws": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbj84": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"ckwuqbljg": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqboe8": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckx4tdfco": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\t\tvar id;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\n\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(instance.trigger(), config.interval);\n\t\t};\n\t\tconfig.restart && setTimeout(() => instance.configure(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckx4uquo8": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Louis Bertson';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"ckx6c55dg": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, {id : 'row',name : 'Input data'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t\t$.send('output', res);\n\t\t\t\t\t\t$.send('row', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckxa7ly28": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' }\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>"
		},
		"design": {
			"ikx4uvhnc": {
				"id": "ikx4uvhnc",
				"config": {
					"random": true,
					"type": "number",
					"data": "",
					"restart": true,
					"interval": 60000
				},
				"x": 9,
				"y": 66,
				"component": "ckx4uquo8",
				"connections": {
					"output": [
						{
							"id": "ikx4wiuzs",
							"index": "input"
						},
						{
							"id": "ikx7hk4u4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "AcgDevs",
					"name": "Trigger2",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx4wiuzs": {
				"id": "ikx4wiuzs",
				"config": {},
				"x": 246,
				"y": 353,
				"component": "ckwuqb3y4",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikx7hk4u4": {
				"id": "ikx7hk4u4",
				"config": {
					"outputs": 1,
					"code": "F.datetime = new Date();\nNOSQL('config').one().where('name','power').callback(function(err,res){\n\t if(res.value == 'on'){\n\t $.send('output',data);\n\t}\n});\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\n//console.log(FS);\n//$.destroy();"
				},
				"x": 302,
				"y": 97,
				"note": "Verify power on/off",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx7qii30",
							"index": "input"
						},
						{
							"id": "ikx95jol4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx7jzxy4": {
				"id": "ikx7jzxy4",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1496,
				"y": 66,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikx7ot4lc": {
				"id": "ikx7ot4lc",
				"config": {
					"outputs": 1,
					"code": "var vars = $.main.variables;\nvar opt = {};\nopt.url = vars.fixtures;\nopt.query = {key : vars.api_key, secret : vars.api_secret, competition_id : '227',date: 'today'};\nopt.callback = function(err,res){\n res = res.body.parseJSON(true);\n\t$.send('output',res);\n};\nREQUEST(opt);"
				},
				"x": 814,
				"y": 64,
				"note": "Fixtures request",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky1nz7iw",
							"index": "input"
						},
						{
							"id": "ikx91vjes",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx7qii30": {
				"id": "ikx7qii30",
				"config": {
					"outputs": 1,
					"code": "var vars = $.main.variables;\nvar now  = new Date().format('HH:mm');\nvar ft = vars.fixture_time;\n\t if(now == vars.fixture_time){\n\t $.send('output',data);\n\t}"
				},
				"x": 578,
				"y": 101,
				"note": "Verify time 05:00",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx7ot4lc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx91vjes": {
				"id": "ikx91vjes",
				"config": {
					"outputs": 1,
					"code": "var fixtures = data.data.fixtures;\nfixtures.forEach(function(item) {\nvar match = {\n\tid: UID(),\n\tfixture_id : item.id,\n\thomeid_awayid : item.home_id+'_'+item.away_id,\n\ttime : item.time.parseDate().format('HH:mm'),\n\thome_name : item.home_name,\n\taway_name : item.away_name,\n\taway_id : item.away_id,\n\thome_id : item.home_id,\n\tdate : new Date().format('yyyy-MM-dd')\n};\n\tmatch.dtcreated = new Date();\n\tNOSQL('matchs').insert(match, true).where('fixture_id', match.fixture_id).callback(function(err, res) {\n   \t\tif(res){\n\t\t\tvar donnee = { res : res , match : match};\n\t\t$.send('output', donnee);\n\t\t}\n\t});\n});"
				},
				"x": 1085,
				"y": 47,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx7jzxy4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx95jol4": {
				"id": "ikx95jol4",
				"config": {
					"outputs": 1,
					"code": "// var vars = $.main.variables;\n// var now  = new Date().format('HH:mm');\n// var ft = vars.fixture_time;\n// console.log('Time now is ',now)\n\t//  if(new Date().format('HH:mm') == vars.fixture_time){\n\t//  $.send('output',data);\n\t// }\n$.send('output',data);\n// const { exec } = require('child_process');\n// exec('date', (err, stdout, stderr) => {\n//   if (err) {\n//     console.error(err)\n//   } else {\n//    $.send('output',stdout);\n//   }\n// });"
				},
				"x": 540,
				"y": 287,
				"note": "Verify time : 08:00",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx98fejc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx96otww": {
				"id": "ikx96otww",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2183,
				"y": 392,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikx98fejc": {
				"id": "ikx98fejc",
				"config": {
					"outputs": 1,
					"code": "// verification de nombre de matchs avant de laisser\nNOSQL('matchs').find().where('date', NOW.format('yyyy-MM-dd')).callback(function(err, res) {\n\tif (err)\n\t\treturn;\n\tif(res.length > 0)\n\t\t$.send('output',res);\n});"
				},
				"x": 831,
				"y": 293,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx98had0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx98had0": {
				"id": "ikx98had0",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\nBonjour, les matchs du jour \n@{foreach m in model}\n    @{m.home_name} vs @{m.away_name}__@{m.time}\n@{end}"
				},
				"x": 1056,
				"y": 347,
				"component": "ckx6c55dg",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikx98sjzs": {
				"id": "ikx98sjzs",
				"config": {},
				"x": 1736,
				"y": 449,
				"component": "ckwuqa4rg",
				"connections": {
					"output": [
						{
							"id": "ikx98tlyg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fas fa-list",
					"group": "Common",
					"name": "Queue",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx98tlyg": {
				"id": "ikx98tlyg",
				"config": {
					"delay": 3000
				},
				"x": 1866,
				"y": 240,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "ikx96otww",
							"index": "input"
						},
						{
							"id": "iky1p43lc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky1nz7iw": {
				"id": "iky1nz7iw",
				"config": {
					"outputs": 1,
					"code": "NOSQL('teams').find().callback(function(err,res){\n\t$.send('output',res);\n});"
				},
				"x": 1090,
				"y": 169,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx7jzxy4",
							"index": "input"
						},
						{
							"id": "iky1sk4ps",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky1opakg": {
				"id": "iky1opakg",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2700,
				"y": 180,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"iky1p43lc": {
				"id": "iky1p43lc",
				"config": {
					"outputs": 1,
					"code": "var date = data;\n\ndate.dtcreated = NOW;\n$.send('output',date);"
				},
				"x": 2136,
				"y": 207,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky1pzhas",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky1pzhas": {
				"id": "iky1pzhas",
				"config": {
					"outputs": 1,
					"code": "NOSQL('dates').insert(data,true).where('unique',data.unique).callback(function(err,res ) {\n\tif(err){\n\t\treturn ;\n\t}else{\n\t\tif(res){\n\t\t\t$.send('output',data);\n\t\t}\n\t}\n\n})"
				},
				"x": 2388,
				"y": 149,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky1opakg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky1sk4ps": {
				"id": "iky1sk4ps",
				"config": {
					"outputs": 1,
					"code": "var teams = data;\nteams.forEach(function(team) {\nfindMatchs(team);\n});\n\n\n\nfunction findMatchs(team) {\nvar vars = $.main.variables;\nvar opt = {};\nopt.url = vars.fixtures;\nopt.query = {key : vars.api_key, secret : vars.api_secret, competition_id : vars.competition_id,team : team.unique};\n\nopt.callback = function(err,res){\n res = res.body.parseJSON(true);\n\tres.equipe = team.unique;\n\t$.send('output',res);\n};\nREQUEST(opt);\n}"
				},
				"x": 1324,
				"y": 287,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky1srm5s",
							"index": "input"
						},
						{
							"id": "ikx98sjzs",
							"index": "input"
						},
						{
							"id": "iky1syq98",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky1srm5s": {
				"id": "iky1srm5s",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1475,
				"y": 517,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"iky1syq98": {
				"id": "iky1syq98",
				"config": {
					"outputs": 1,
					"code": "var fixtures = data.data.fixtures;\nfixtures.forEach(function(item) {\n\titem.equipe = data.equipe;\n\t$.send('output',item);\n});"
				},
				"x": 1552,
				"y": 362,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"groups": [],
			"paused": {
				"input__ikx98sjzs__input": 1,
				"input__iky1sk4ps__input": 1,
				"input__iky1nz7iw__input": 1,
				"input__ikx98fejc__input": 1,
				"output__ikx95jol4__output": 1,
				"input__ikx95jol4__input": 1
			}
		},
		"variables": {
			"api_key": "eXOv8YQzPrtdesCF",
			"api_secret": "9dCd3fFKo22cGq9VnYrwXh6MJz0X2CCb",
			"competition_id": "227",
			"fixtures": "https://livescore-api.com/api-client/fixtures/matches.json",
			"fixture_time": "05:34",
			"page": "1",
			"date": "today"
		},
		"sources": {},
		"origin": "http://louisbertson:8454",
		"dtcreated": "2021-12-06T13:39:28.409Z",
		"size": 97119,
		"variables2": {}
	},
	"fl51v001uh41d": {
		"paused": true,
		"id": "fl51v001uh41d",
		"reference": "",
		"author": "Afric Consuting Group",
		"group": "ServiceFoot",
		"icon": "fa fa-volleyball-ball",
		"color": "#5599F8",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "ServiceFoot Events",
		"components": {
			"ckwuq8pg8": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq8zek": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuq94cc": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq96qg": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq98l4": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9eu4": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9how": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<div>\n\n\t\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</div>\n\n\t</header>\n</body>",
			"ckwuq9mxs": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckwuq9pk8": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuq9rvk": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"ckwuq9u6w": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"ckwuqa354": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component creates a HTTP request. Incoming data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"ckwuqa4rg": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ckwuqaml4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Peter Širka';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<style>\n\n\t.code_header{ color : #fff; background-color :#041EF5;}\n\theader > .fa{color : #fff!important;}\n</style>\n\n<body>\n\t<header class=\"code_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqao7g": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqaqzg": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqau2k": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqax8g": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb00g": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb1xw": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb3y4": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"ckwuqbayw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbco0": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbgws": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbj84": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"ckwuqbljg": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqboe8": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckx4tdfco": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\t\tvar id;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\n\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(instance.trigger(), config.interval);\n\t\t};\n\t\tconfig.restart && setTimeout(() => instance.configure(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckx4uquo8": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Louis Bertson';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.trigger_header{ color : #fff; background-color :#E8357E;}\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header class=\"trigger_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"ckx6c55dg": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, {id : 'row',name : 'Input data'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', res);\n\t\t\t\t\t\t$.send('row', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckxa3c034": "<script total>\n\n\texports.name = 'FootballSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id : 'output', name: 'Output' },\n\t\t\t\t\t   { id : 'notstarted', name : 'NOT STARTED'},\n\t\t\t\t\t   { id : 'inplay', name : 'IN PLAY'},\n\t\t\t\t\t   { id : 'halftimebreak', name : 'HALF TIME BREAK' },\n\t\t\t\t\t   { id : 'addedtime', name : 'ADDED TIME'},\n\t\t\t\t\t   { id : 'finished' , name : 'FINISHED'},\n\t\t\t\t\t   { id : 'unsufficientdata' , name : 'UNSUFFICIENT'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"ckxa9ds4s": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tif(matchs.length === 0 ){\n\t\t\t\t$.send('default', 'Config last update. '+ NOW.format('HH:mm'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.switch_header{ color : #fff; background-color :#8C42F6;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"switch_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxcuhcds": "<script total>\n\n\texports.name = 'MatchEventSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'goal', name: 'GOAL' },\n\t\t\t\t\t\t{ id: 'goalpenalty', name: 'GOAL_PENALTY' },\n\t\t\t\t\t\t{ id: 'owngoal', name: 'OWN_GOAL' },\n\t\t\t\t\t\t{ id: 'yellowcard', name: 'YELLOW_CARD' },\n\t\t\t\t\t\t{ id: 'redcard', name: 'RED_CARD' },\n\t\t\t\t\t\t{ id: 'missedpenalty', name: 'MISSED_PENALTY' },\n\t\t\t\t\t\t{ id: 'substitution', name: 'SUBSTITUTION' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'yellowredcard', name: 'YELLOW_RED_CARD' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar event = $.data;\n\n\t\t\t\tswitch(event.event){\n\t\t\t\t\tcase 'GOAL'\t :\n\t\t\t\t\t\t$.send('goal', event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'GOAL_PENALTY' :\n\t\t\t\t\t\t$.send('goalpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'OWN_GOAL' :\n\t\t\t\t\t\t$.send('owngoal',event);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YELLOW_CARD' :\n\t\t\t\t\t\t$.send('yellowcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RED_CARD':\n\t\t\t\t\t\t$.send('redcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ' YELLOW_RED_CARD' :\n\t\t\t\t\t\t$.send('yellowredcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'MISSED_PENALTY' :\n\t\t\t\t\t\t$.send('missedpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SUBSTITUTION' :\n\t\t\t\t\t\t$.send('substitution',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',event);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n```\t\t[\n\t\t\t{\n                \"id\": \"10509914\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"5\",\n                \"event\": \"GOAL\",\n                \"sort\": \"0\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509915\",\n                \"match_id\": \"129180\",\n                \"player\": \"MARIAPPA ADRIAN\",\n                \"time\": \"13\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"1\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509916\",\n                \"match_id\": \"129180\",\n                \"player\": \"CAPOUE ETIENNE\",\n                \"time\": \"60\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"2\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509917\",\n                \"match_id\": \"129180\",\n                \"player\": \"DOUCOURE ABDOULAYE\",\n                \"time\": \"61\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"3\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509918\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"62\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"4\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10510529\",\n                \"match_id\": \"129180\",\n                \"player\": \"VARDY JAMIE\",\n                \"time\": \"75\",\n                \"event\": \"GOAL\",\n                \"sort\": \"5\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10510974\",\n                \"match_id\": \"129180\",\n                \"player\": \"PEREIRA RICARDO\",\n                \"time\": \"84\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"6\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10511398\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"GOAL\",\n                \"sort\": \"7\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10511625\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"8\",\n                \"home_away\": \"h\"\n            }\n        ],\n        \"match\": {\n            \"id\": \"129180\",\n            \"date\": \"2019-03-03\",\n            \"home_name\": \"Watford\",\n            \"away_name\": \"Leicester City\",\n            \"score\": \"2 - 1\",\n            \"ht_score\": \"1 - 0\",\n            \"ft_score\": \"2 - 1\",\n            \"et_score\": \"\",\n            \"time\": \"FT\",\n            \"league_id\": \"25\",\n            \"status\": \"FINISHED\",\n            \"added\": \"2019-03-03 11:55:12\",\n            \"last_changed\": \"2019-03-03 13:58:04\",\n            \"home_id\": \"11\",\n            \"away_id\": \"6\",\n            \"competition_id\": \"2\",\n            \"location\": null,\n            \"fixture_id\": null,\n            \"scheduled\": null,\n            \"home\": {\n                \"id\": \"11\",\n                \"name\": \"Watford\",\n                \"stadium\": \"Vicarage Road Stadium\",\n                \"location\": \"Vicarage Road Stadium\"\n            },\n            \"away\": {\n                \"id\": \"6\",\n                \"name\": \"Leicester City\",\n                \"stadium\": \"King Power Stadium\",\n                \"location\": \"King Power Stadium\"\n            },\n            \"competition\": {\n                \"id\": \"2\",\n                \"name\": \"Premier League\"\n            }\n        }\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.event_header{ color : #fff; background-color :#171717;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxfxgv70": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ckxfxgza8": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>"
		},
		"design": {
			"ikx4uvhnc": {
				"id": "ikx4uvhnc",
				"config": {
					"random": true,
					"type": "number",
					"data": "",
					"restart": true,
					"interval": 30000
				},
				"x": 25,
				"y": 527.9861450195312,
				"component": "ckx4uquo8",
				"connections": {
					"output": [
						{
							"id": "ikx4wiuzs",
							"index": "input"
						},
						{
							"id": "ikx7hk4u4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "AcgDevs",
					"name": "Trigger2",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx4wiuzs": {
				"id": "ikx4wiuzs",
				"config": {},
				"x": 266.9444885253906,
				"y": 777.9862060546875,
				"component": "ckwuqb3y4",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikx7hk4u4": {
				"id": "ikx7hk4u4",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,res){\n\t if(res.value == 'on'){\n\t $.send('output',data);\n\t}\n});"
				},
				"x": 266.97918701171875,
				"y": 553.9931030273438,
				"note": "Verify power on/off",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikya8qyxt",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx96otww": {
				"id": "ikx96otww",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 5869,
				"y": 204,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikx98had0": {
				"id": "ikx98had0",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\nLe match : @{model.home_name} vs @{model.away_name}\nCommence dans 5 minutes.\n"
				},
				"x": 1863,
				"y": 61,
				"note": "MOINS 5 MNS",
				"component": "ckx6c55dg",
				"connections": {
					"row": [
						{
							"id": "ikxanytwo",
							"index": "data"
						}
					],
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikx98sjzs": {
				"id": "ikx98sjzs",
				"config": {},
				"x": 4212,
				"y": 139,
				"component": "ckwuqa4rg",
				"connections": {
					"output": [
						{
							"id": "iky4d0uig",
							"index": "input"
						},
						{
							"id": "ikxao3w5s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fas fa-list",
					"group": "Common",
					"name": "Queue",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikx9zjve4": {
				"id": "ikx9zjve4",
				"config": {
					"outputs": 1,
					"code": "var vars = $.main.variables;\nvar opt =  {};\nopt.url = vars.live_score;\nopt.query = { key : vars.api_key, secret : vars.api_secret, competition_id : data.value};\nopt.callback = function(err,res) {\n\n\t//res = res.body.parseJSON(true);\n\n\t\t//$.send('output',res.data.match);\n\t\t$.send('output',res);\n\n};\n\n\n\n/**\nopt.callback = function(err,res) {\n\tres = res.body.parseJSON(true);\n\tif(res.data.match){\n\t\t$.send('output',res.data.match);\n\t}else{\n\t\tNOSQL('config').modify({ 'value' : '228' })\n\t\t\t.where('name','competition_id').callback(function(err,res) {\n\t\t\t\tconsole.log(res);\n\t\t\t});\n\t}\n};\n**/\nREQUEST(opt);"
				},
				"x": 692,
				"y": 510,
				"note": "REQUEST FOR MATCHS",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxa9dyds",
							"index": "input"
						},
						{
							"id": "ikxfvrl6c",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxa9dyds": {
				"id": "ikxa9dyds",
				"config": {},
				"x": 946,
				"y": 492,
				"component": "ckxa9ds4s",
				"connections": {
					"addedtime": [
						{
							"id": "ikxaoi474",
							"index": "input"
						}
					],
					"notstarted": [
						{
							"id": "ikxaqavg4",
							"index": "input"
						}
					],
					"halftimebreak": [
						{
							"id": "ikxar9yn4",
							"index": "input"
						}
					],
					"finished": [
						{
							"id": "ikxarllgw",
							"index": "input"
						}
					],
					"insufficientdata": [
						{
							"id": "ikxbg6b30",
							"index": "input"
						}
					],
					"default": [
						{
							"id": "ikxbhhr6o",
							"index": "input"
						},
						{
							"id": "ikyaadm5j",
							"index": "input"
						}
					],
					"inplay": [
						{
							"id": "ikxbj9fjo",
							"index": "input"
						},
						{
							"id": "iky1m0648",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code-branch",
					"group": "AcgDevs",
					"name": "MatchStatusSwitch",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "notstarted",
							"name": "NOT STARTED"
						},
						{
							"id": "addedtime",
							"name": "ADDED TIME"
						},
						{
							"id": "halftimebreak",
							"name": "HALF TIME BREAK"
						},
						{
							"id": "finished",
							"name": "FINISHED"
						},
						{
							"id": "insufficientdata",
							"name": "INSUFFICIENT DATA"
						},
						{
							"id": "default",
							"name": "DEFAULT"
						},
						{
							"id": "inplay",
							"name": "IN PLAY"
						}
					]
				}
			},
			"ikxagjctg": {
				"id": "ikxagjctg",
				"config": {
					"outputs": 1,
					"code": "var data = $.data;\nvar match = {};\nmatch.id = UID();\nmatch.unique = data.id+'_'+data.fixture_id;\nmatch.event_name = 'notstarted';\nmatch.match_id = data.id;\nmatch.date = new Date().format('yyyy-MM-dd');\nmatch.home_name = data.home_name;\nmatch.away_name = data.away_name;\nmatch.homeid_awayid = data.home_id+'_'+data.away_id;\n\nmatch.score = data.score;\nNOSQL('notstarted').insert(match,true).where('unique',match.unique).callback(function(err,res){\n\tif(res){\n\t\t$.send('output',match);\n\t}\n});"
				},
				"x": 1510,
				"y": 34,
				"note": "INSERT unique in database",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx98had0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxanytwo": {
				"id": "ikxanytwo",
				"config": {
					"name": "notstarted",
					"readme": ""
				},
				"x": 2225,
				"y": 169,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxao3w5s": {
				"id": "ikxao3w5s",
				"config": {
					"outputs": 1,
					"code": "var url = 'http://213.246.36.116/smsbillingtelecelbf/euro_sub_broadcast.php';\nvar opt = {};\nopt.url = url;\nopt.query = { content : data, from : '821' , cible : 'can' };\nopt.callback = function(err,res){\n\t$.send('output',res);\n};\n\nREQUEST(opt);"
				},
				"x": 5493,
				"y": 260,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx96otww",
							"index": "input"
						},
						{
							"id": "ikyaawik7",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxaoi474": {
				"id": "ikxaoi474",
				"config": {
					"outputs": 1,
					"code": "var data = $.data;\nvar match = {};\nmatch.id = UID();\nmatch.unique = data.id+'_'+data.fixture_id;\nmatch.event_name = 'addedtime';\nmatch.match_id = data.id;\nmatch.date = new Date().format('yyyy-MM-dd');\nmatch.home_name = data.home_name;\nmatch.away_name = data.away_name;\nmatch.homeid_awayid = data.home_id+'_'+data.away_id;\n\nmatch.score = data.score;\n\nNOSQL('addedtime1').insert(match,true).where('unique',match.unique).callback(function(err,res){\n\tif(res){\n\t\t$.send('output',match);\n\t}\n});"
				},
				"x": 1592,
				"y": 250,
				"note": "INSERT Unique in database",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxapcj3s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxapcj3s": {
				"id": "ikxapcj3s",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.home_name} vs @{model.away_name}\nTEMPS ADDITIONNEL\nscore : @{model.score}\n\n"
				},
				"x": 1723.96875,
				"y": -21.734375,
				"note": "TEMPS ADDITIONNEL",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxapcnys",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxapcnys": {
				"id": "ikxapcnys",
				"config": {
					"name": "addedtime",
					"readme": ""
				},
				"x": 2149,
				"y": 411,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxaqavg4": {
				"id": "ikxaqavg4",
				"config": {
					"outputs": 1,
					"code": "var time1 = new Date().format('HH:mm');\nvar time2 = data.scheduled.parseDate().add('-5 minutes').format('HH:mm');\n\tif (time1 == time2){\n\t$.send('output', data);\n\t}"
				},
				"x": 1173.6666259765625,
				"y": 241.6666259765625,
				"note": "Check time",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxagjctg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxar9yn4": {
				"id": "ikxar9yn4",
				"config": {
					"outputs": 1,
					"code": "var data = $.data;\nvar match = {};\nmatch.id = UID();\nmatch.unique = data.id+'_'+data.fixture_id;\nmatch.event_name = 'halftime';\nmatch.match_id = data.id;\nmatch.date = new Date().format('yyyy-MM-dd');\nmatch.home_name = data.home_name;\nmatch.away_name = data.away_name;\nmatch.homeid_awayid = data.home_id+'_'+data.away_id;\n\nmatch.score = data.score;\nNOSQL('halftime').insert(match,true).where('unique',match.unique).callback(function(err,res){\n\tif(res){\n\t\t$.send('output',match);\n\t}\n});"
				},
				"x": 1542,
				"y": 404,
				"note": "INSERT Unique in database",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxarexyo",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxarexyo": {
				"id": "ikxarexyo",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.home_name} vs @{model.away_name}\nMI-TEMPS\nscore : @{model.score}\n\n"
				},
				"x": 1867,
				"y": 405,
				"note": "MI-TEMPS",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxarf654",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxarf654": {
				"id": "ikxarf654",
				"config": {
					"name": "halftime",
					"readme": ""
				},
				"x": 2163,
				"y": 539,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxarllgw": {
				"id": "ikxarllgw",
				"config": {
					"outputs": 1,
					"code": "var data = $.data;\nvar match = {};\nmatch.id = UID();\nmatch.unique = data.id+'_'+data.fixture_id;\nmatch.event_name = 'finished';\nmatch.match_id = data.id;\nmatch.date = new Date().format('yyyy-MM-dd');\nmatch.home_name = data.home_name;\nmatch.away_name = data.away_name;\nmatch.homeid_awayid = data.home_id+'_'+data.away_id;\nmatch.score = data.score;\nNOSQL('finished').insert(match,true).where('unique',match.unique).callback(function(err,res){\n\tif(res){\n\t\t$.send('output',match);\n\t}\n});"
				},
				"x": 1586,
				"y": 551,
				"note": "INSERT Unique in database",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxarlpsg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxarlpsg": {
				"id": "ikxarlpsg",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.home_name} vs @{model.away_name}\nMATCH TERMINE\nscore final : @{model.score}\n\n"
				},
				"x": 1871,
				"y": 577,
				"note": "TERMINE",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxartmz4",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxartmz4": {
				"id": "ikxartmz4",
				"config": {
					"name": "finished",
					"readme": ""
				},
				"x": 2153,
				"y": 709,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxbg6b30": {
				"id": "ikxbg6b30",
				"config": {
					"outputs": 1,
					"code": "var data = $.data;\nvar match = {};\nmatch.id = UID();\nmatch.unique = data.id+'_'+data.fixture_id;\nmatch.event_name = 'insufficientdata';\nmatch.match_id = data.id;\nmatch.date = new Date().format('yyyy-MM-dd');\nmatch.home_name = data.home_name;\nmatch.away_name = data.away_name;\nmatch.homeid_awayid = data.home_id+'_'+data.away_id;\nmatch.score = data.score;\nNOSQL('insufficientdata').insert(match,true).where('unique',match.unique).callback(function(err,res){\n\tif(res){\n\t\t$.send('output',match);\n\t}\n});"
				},
				"x": 1586,
				"y": 696,
				"note": "INSERT Unique in database",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxbg8bro",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxbg8bro": {
				"id": "ikxbg8bro",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.home_name} vs @{model.away_name}\nDonnées indisponibles/server problem but match is ongoing\nscore final : @{model.score}\n\n"
				},
				"x": 1875,
				"y": 747,
				"note": "INSUFFICIENT DATA",
				"component": "ckx6c55dg",
				"connections": {
					"row": [
						{
							"id": "ikxbgawto",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxbgawto": {
				"id": "ikxbgawto",
				"config": {
					"name": "insufficientdata",
					"readme": ""
				},
				"x": 2145,
				"y": 840,
				"note": "",
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxbgnzys": {
				"id": "ikxbgnzys",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 5135,
				"y": 963,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikxbh6x7s": {
				"id": "ikxbh6x7s",
				"config": {
					"template": "LIVE SCORE API\n----CAN 2022------\nDonnées indisponibles pour l'instant.\nRevenir à @{model.time_left}, le temps que notre équipe de donnée s'installe\nhttps://live-score-api.com/\n\n"
				},
				"x": 1802,
				"y": 870,
				"component": "ckx6c55dg",
				"connections": {
					"row": [
						{
							"id": "ikxbh71jc",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxbh71jc": {
				"id": "ikxbh71jc",
				"config": {
					"name": "default",
					"readme": ""
				},
				"x": 2133,
				"y": 949,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxbhhr6o": {
				"id": "ikxbhhr6o",
				"config": {
					"outputs": 1,
					"code": "NOSQL('matchs').find().where('date',new Date().format('yyyy-MM-dd')).sort('time_asc').take(1).callback(function(err,res){\n\tvar match = res[0];\n\tif(!match){\n\t\treturn ;\n\t}\n\n\tmatch.time_left = match.time.parseDate().add('-15 minutes').format('HH:mm');\n\n\t$.send('output',match);\n})"
				},
				"x": 1302,
				"y": 844,
				"note": "Check for the next match",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxbh6x7s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxbj9fjo": {
				"id": "ikxbj9fjo",
				"config": {
					"outputs": 1,
					"code": "var payload = {};\npayload.match = {};\npayload.events = data.events;\npayload.match.id = data.id;\npayload.match.match_id = data.match_id;\npayload.match.score = data.score;\npayload.match.scheduled = data.scheduled;\npayload.match.status = data.status;\npayload.match.time = data.time;\npayload.match.ht_score = data.ht_score;\npayload.match.extra_time = data.extra\npayload.match.home_name = data.home_name;\npayload.match.home_id = data.home_id;\npayload.match.away_name = data.away_name;\npayload.match.away_id = data.away_id;\npayload.match.competition_id = data.competition_id;\npayload.match.now = new Date();\n$.send('output',payload);"
				},
				"x": 1299,
				"y": 1030,
				"note": "GET Events Link",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxbm2ef8",
							"index": "input"
						},
						{
							"id": "ikya91ng6",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxbm2ef8": {
				"id": "ikxbm2ef8",
				"config": {
					"outputs": 1,
					"code": "if(data.events.isURL()){\n\tvar vars = $.main.variables;\n\tvar opt = {};\n\topt.url = vars.events;\n\topt.query = { key : vars.api_key, secret : vars.api_secret, id : data.match.id }\n\topt.callback = function(err,res){\n\t\tif (res){\n\n\t\t\tvar payload = { match : data.match};\n\t\t\tres = res.body.parseJSON(true);\n\n\t\t\tpayload.event = res.data.event;\n\t\t\t$.send('output',payload);\n\t\t}\n\t}\n\tREQUEST(opt);\n}"
				},
				"x": 1565,
				"y": 1105,
				"note": "REQUEST Events",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxbq03fc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxbp8fwg": {
				"id": "ikxbp8fwg",
				"config": {
					"outputs": 1,
					"code": "var events = data.event;\nconsole.log(data);\nevents.forEach(function(event) {\n\tevent.match = data.match;\n\tevent.match_id = data.match.id;\n \t$.send('output',event);\n});"
				},
				"x": 2244,
				"y": 1194,
				"note": "SPLIT messages",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikyefzchs",
							"index": "input"
						},
						{
							"id": "ikxcujgb4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxbq03fc": {
				"id": "ikxbq03fc",
				"config": {
					"outputs": 1,
					"code": "var tab1 = data.event;\nvar tab2 = [];\nNOSQL('events').find().where('match_id',data.match.id).where('date',NOW.format('yyyy-MM-dd')).callback(function(err,res){\n\ttab2 = res;\n\tvar diff = DIFFARR('sort',tab2,tab1);\n\tvar news = { match : data.match, event : diff.add};\n\t$.send('output',news);\n});"
				},
				"x": 1814,
				"y": 1212,
				"note": "Check Differences",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxbp8fwg",
							"index": "input"
						},
						{
							"id": "ikyeerbdw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxcuhqck": {
				"id": "ikxcuhqck",
				"config": {},
				"x": 2947,
				"y": 1098,
				"component": "ckxcuhcds",
				"connections": {
					"goal": [
						{
							"id": "ikxcvpwxo",
							"index": "input"
						}
					],
					"goalpenalty": [
						{
							"id": "ikxcvqixc",
							"index": "input"
						}
					],
					"owngoal": [
						{
							"id": "ikxcvqwfg",
							"index": "input"
						}
					],
					"yellowcard": [
						{
							"id": "ikxcvrsrc",
							"index": "input"
						}
					],
					"redcard": [
						{
							"id": "ikxcvsomk",
							"index": "input"
						}
					],
					"default": [
						{
							"id": "ikxcvt0tg",
							"index": "input"
						}
					],
					"yellowredcard": [
						{
							"id": "ikxcvt62c",
							"index": "input"
						}
					],
					"missedpenalty": [
						{
							"id": "ikxerxagc",
							"index": "input"
						}
					],
					"substitution": [
						{
							"id": "ikxet9w2g",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code-branch",
					"group": "AcgDevs",
					"name": "MatchEventSwitch",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "goal",
							"name": "GOAL"
						},
						{
							"id": "goalpenalty",
							"name": "GOAL_PENALTY"
						},
						{
							"id": "owngoal",
							"name": "OWN_GOAL"
						},
						{
							"id": "yellowcard",
							"name": "YELLOW_CARD"
						},
						{
							"id": "redcard",
							"name": "RED_CARD"
						},
						{
							"id": "missedpenalty",
							"name": "MISSED_PENALTY"
						},
						{
							"id": "substitution",
							"name": "SUBSTITUTION"
						},
						{
							"id": "default",
							"name": "DEFAULT"
						},
						{
							"id": "yellowredcard",
							"name": "YELLOW_RED_CARD"
						}
					]
				}
			},
			"ikxcujgb4": {
				"id": "ikxcujgb4",
				"config": {
					"outputs": 1,
					"code": "var id = data.id;\nvar event = data;\nevent.id = UID();\nevent.date = NOW.format('yyyy-MM-dd');\nevent.unique = id +'_'+ data.match_id;\nevent.homeid_awayid = data.match.home_id+'_'+data.match.away_id;\nNOSQL('events').insert(event,true).where('unique',event.unique).callback(function(err,res){\n\tif(res){\n\t\t$.send('output',event);\n\t}\n});"
				},
				"x": 2708,
				"y": 1147,
				"note": "SAVE ONCE",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxcuhqck",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikxcvpwxo": {
				"id": "ikxcvpwxo",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.match.home_name} VS @{model.match.away_name}\n*@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* :\nNOUVEAU BUT\nPar : @{model.player}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3222,
				"y": 440,
				"note": "GOAL",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxcwb6lk",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxcvqixc": {
				"id": "ikxcvqixc",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.match.home_name} VS @{model.match.away_name}\n*@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* : \nNOUVEAU BUT DE PENALTY\nPar : @{model.player}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3218,
				"y": 632,
				"note": "GOAL PENALTY",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxcwaubw",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxcvqwfg": {
				"id": "ikxcvqwfg",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.match.home_name} VS @{model.match.away_name}\n*@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* :\nAUTO GOAL\nPar : @{model.player || ''}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3215,
				"y": 835,
				"note": "OWN GOAL",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxcwandw",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxcvrsrc": {
				"id": "ikxcvrsrc",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.match.home_name} VS @{model.match.away_name}\n*@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* :\nCARTON JAUNE\nPour : @{model.player}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3217,
				"y": 1005,
				"note": "YELLOW CARD",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxcwaat4",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxcvsomk": {
				"id": "ikxcvsomk",
				"config": {
					"template": "*** Service Foot ***\n@{model.match.home_name} VS @{model.match.away_name}\n@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* :\nCARTON ROUGE\nPour : @{model.player}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3224,
				"y": 1492,
				"note": "RED CARD",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxcwa05s",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxcvt0tg": {
				"id": "ikxcvt0tg",
				"config": {
					"template": "IMPREVU"
				},
				"x": 3208,
				"y": 1678,
				"note": "FAULT",
				"component": "ckx6c55dg",
				"connections": {
					"row": [
						{
							"id": "ikxcw98ds",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxcvt62c": {
				"id": "ikxcvt62c",
				"config": {
					"template": "*** Service Foot ***\n@{model.match.home_name} VS @{model.match.away_name}\n*@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* :\nDEUX CARTON JAUNE\nPar : @{model.player || ''}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3193,
				"y": 1885,
				"note": "YELLOW RED CARD",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxcw8410",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxcw8410": {
				"id": "ikxcw8410",
				"config": {
					"name": "yellowredcard",
					"readme": ""
				},
				"x": 3781,
				"y": 1589,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxcw98ds": {
				"id": "ikxcw98ds",
				"config": {
					"name": "fault",
					"readme": ""
				},
				"x": 3987,
				"y": 1815,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxcwa05s": {
				"id": "ikxcwa05s",
				"config": {
					"name": "redcard",
					"readme": ""
				},
				"x": 3751,
				"y": 1249,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxcwaat4": {
				"id": "ikxcwaat4",
				"config": {
					"name": "yellowcard",
					"readme": ""
				},
				"x": 3747,
				"y": 1083,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxcwandw": {
				"id": "ikxcwandw",
				"config": {
					"name": "owngoal",
					"readme": ""
				},
				"x": 3713,
				"y": 985,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxcwaubw": {
				"id": "ikxcwaubw",
				"config": {
					"name": "goalpenalty",
					"readme": ""
				},
				"x": 3861,
				"y": 855,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxcwb6lk": {
				"id": "ikxcwb6lk",
				"config": {
					"name": "goal",
					"readme": ""
				},
				"x": 3910,
				"y": 377,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerkabk": {
				"id": "ikxerkabk",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxcwb6lk"
				},
				"x": 4216,
				"y": 450,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerlrk8": {
				"id": "ikxerlrk8",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxcwaubw"
				},
				"x": 4205,
				"y": 659,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerm07c": {
				"id": "ikxerm07c",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxcwandw"
				},
				"x": 4213,
				"y": 762,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerm4lo": {
				"id": "ikxerm4lo",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxcwaat4"
				},
				"x": 4213,
				"y": 962,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerm8jc": {
				"id": "ikxerm8jc",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxcwa05s"
				},
				"x": 4280,
				"y": 1167,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxermdpg": {
				"id": "ikxermdpg",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxcw98ds"
				},
				"x": 4301,
				"y": 1427,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxermlnk": {
				"id": "ikxermlnk",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxcw8410"
				},
				"x": 4285,
				"y": 1603,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerpdyo": {
				"id": "ikxerpdyo",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxanytwo"
				},
				"x": 2826.76416015625,
				"y": 41.67279052734375,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerpjwk": {
				"id": "ikxerpjwk",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxapcnys"
				},
				"x": 2589,
				"y": 303,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerpr8g": {
				"id": "ikxerpr8g",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxarf654"
				},
				"x": 2605,
				"y": 489,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerpv8w": {
				"id": "ikxerpv8w",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxartmz4"
				},
				"x": 2621,
				"y": 667,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerpz9c": {
				"id": "ikxerpz9c",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxbgawto"
				},
				"x": 2347.0033569335938,
				"y": 779.9999694824219,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerq31g": {
				"id": "ikxerq31g",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxbh71jc"
				},
				"x": 2571,
				"y": 896,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxerxagc": {
				"id": "ikxerxagc",
				"config": {
					"template": "\n*** Service Foot ***\nCAN 2022\n@{model.match.home_name} VS @{model.match.away_name}\n*@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* :\nPENALTY MANQUE\nPar : @{model.player}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3211,
				"y": 1179,
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxerz29k",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxerz29k": {
				"id": "ikxerz29k",
				"config": {
					"name": "missedpenalty",
					"readme": ""
				},
				"x": 3747,
				"y": 1159,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxes0ooc": {
				"id": "ikxes0ooc",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxerz29k"
				},
				"x": 4213,
				"y": 1077,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxet9w2g": {
				"id": "ikxet9w2g",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\n@{model.match.home_name} VS @{model.match.away_name}\n*@{if model.home_away === \"h\"} @{model.match.home_name} @{else} @{model.match.away_name} @{fi}* :\nREMPLACEMENT\nEntrant : @{model.player}\nSortant : @{model.info}\nTemps : @{model.time} eme minute\nNouveau Score : @{model.match.score}\n"
				},
				"x": 3201,
				"y": 1319,
				"note": "SUBSTITUTION",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "ikxetc4s0",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"ikxetc4s0": {
				"id": "ikxetc4s0",
				"config": {
					"name": "substitution",
					"readme": ""
				},
				"x": 3769,
				"y": 1337,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxetd81w": {
				"id": "ikxetd81w",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_ikxetc4s0"
				},
				"x": 4327,
				"y": 1329,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ikxfvrl6c": {
				"id": "ikxfvrl6c",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 740.9723358154297,
				"y": 865.0001220703125,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"iky1m0648": {
				"id": "iky1m0648",
				"config": {
					"outputs": 1,
					"code": "$.send('output', data);"
				},
				"x": 1532,
				"y": 886,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky1m0ej0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky1m0ej0": {
				"id": "iky1m0ej0",
				"config": {
					"outputs": 1,
					"code": "var data = $.data;\nvar match = {};\nmatch.id = UID();\nmatch.unique = data.id+'_'+data.fixture_id;\nmatch.event_name = 'started';\nmatch.match_id = data.id;\nmatch.date = NOW.format('yyyy-MM-dd');\nmatch.home_name = data.home_name;\nmatch.away_name = data.away_name;\nmatch.homeid_awayid = data.home_id+'_'+data.away_id;\nmatch.score = data.score;\nNOSQL('started').insert(match,true).where('unique',match.unique).callback(function(err,res){\n\tif(res){\n\t\t$.send('output',match);\n\t}\n});"
				},
				"x": 1742,
				"y": 984,
				"note": "INSERT ONCE IN DATABASE",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky1m0rkg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky1m0rkg": {
				"id": "iky1m0rkg",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\nLe match : @{model.home_name} vs @{model.away_name} a commence.\nScore : @{model.score}\n\n"
				},
				"x": 1966,
				"y": 1023,
				"note": "Commencé",
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "iky1m1p20",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"iky1m1p20": {
				"id": "iky1m1p20",
				"config": {
					"name": "started",
					"readme": ""
				},
				"x": 2250,
				"y": 1044,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"iky1maif0": {
				"id": "iky1maif0",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_iky1m1p20"
				},
				"x": 2567,
				"y": 1035,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "ikxbgnzys",
							"index": "input"
						},
						{
							"id": "iky6wt0z4",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"iky4d0uig": {
				"id": "iky4d0uig",
				"config": {
					"outputs": 1,
					"code": "var event = { date : new Date().format('yyyy-MM-dd'),content : data , id  : UID(), dtcreated : new Date()};\nNOSQL('evenements').insert(event,true).where('content',data).callback(function(err,res){\n\t$.send('output',data);\n});"
				},
				"x": 4530,
				"y": 10,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky9syszp",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky6wt0z4": {
				"id": "iky6wt0z4",
				"config": {
					"outputs": 1,
					"code": "data.dtcreated = new Date();\ndata.date = new Date().format('yyyy-MM-dd');\ndata.sent = false;\n\nNOSQL('evenements2').insert(data).callback(function(err,res){\n\t$.send('output',data.template);\n\tconsole.log(data.template);\n\n});"
				},
				"x": 4813,
				"y": 434,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky9649fw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky6xavyc": {
				"id": "iky6xavyc",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022 \nBurkina Faso vs Gabon \nMATCH TERMINE \nVictoire des Etalons apres des tirs au buts.\nFelicitation aux Etalons"
				},
				"x": 5108,
				"y": 131,
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikxao3w5s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"iky6xbhmw": {
				"id": "iky6xbhmw",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 4817,
				"y": 111,
				"component": "ckwuq9mxs",
				"connections": {
					"output": [
						{
							"id": "iky6xavyc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky9649fw": {
				"id": "iky9649fw",
				"config": {
					"delay": 3000
				},
				"x": 5090,
				"y": 446,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "iky96er4t",
							"index": "input"
						},
						{
							"id": "ikxao3w5s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky96er4t": {
				"id": "iky96er4t",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 5740,
				"y": 744,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"iky9rr8z4": {
				"id": "iky9rr8z4",
				"config": {
					"outputs": 1,
					"code": "var vars = $.main.variables;\nif(new Date().format('HH:mm') == vars.morningprogram){\n\t$.send('output',data);\n}"
				},
				"x": 609.6666870117188,
				"y": 204.66668701171875,
				"note": "CHECK TIME",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky9rrc8q",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky9rrc8q": {
				"id": "iky9rrc8q",
				"config": {
					"outputs": 1,
					"code": "NOSQL('matchs').find().where('date', new Date().format('yyyy-MM-dd')).callback(function(err, res) {\n\tif (err)\n\t\treturn;\n\tif(res.length > 0){\n\t\tvar donnee = { id : UID(), matchs : res, homeid_awayid : res[0].homeid_awayid , time : res[0].time, date : new Date().format('yyyy-MM-dd') };\n\t\t$.send('output',donnee);\n\t}\n\n});"
				},
				"x": 922,
				"y": 184,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky9rrljn",
							"index": "input"
						},
						{
							"id": "ikye5bmu4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky9rrljn": {
				"id": "iky9rrljn",
				"config": {
					"template": "*** Service Foot ***\nCAN 2022\nBonjour, les matchs du jour \n@{foreach m in model.matchs}\n    @{m.home_name} vs @{m.away_name} a @{m.time}\n@{end}"
				},
				"x": 1200,
				"y": 59,
				"component": "ckx6c55dg",
				"connections": {
					"output": [
						{
							"id": "ikx98sjzs",
							"index": "input"
						}
					],
					"row": [
						{
							"id": "iky9rt4nw",
							"index": "data"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "row",
							"name": "Input data"
						}
					]
				}
			},
			"iky9rt4nw": {
				"id": "iky9rt4nw",
				"config": {
					"name": "morningprogram",
					"readme": ""
				},
				"x": 2130,
				"y": 51,
				"component": "ckwuq9how",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"iky9saxc7": {
				"id": "iky9saxc7",
				"config": {
					"name": "",
					"id": "fl51v001uh41d_iky9rt4nw"
				},
				"x": 2547,
				"y": 203,
				"component": "ckwuq96qg",
				"connections": {
					"data": [
						{
							"id": "iky9ssupl",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"iky9sei4d": {
				"id": "iky9sei4d",
				"config": {
					"random": true,
					"type": "number",
					"data": "",
					"restart": true,
					"interval": 60000
				},
				"x": -143.21875,
				"y": 237.5,
				"component": "ckx4uquo8",
				"connections": {
					"output": [
						{
							"id": "iky9seowl",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "AcgDevs",
					"name": "Trigger2",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky9seowl": {
				"id": "iky9seowl",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,res){\n\t if(res.value == 'on'){\n\t $.send('output',data);\n\t}\n});"
				},
				"x": 256.3333435058594,
				"y": 211.33334350585938,
				"note": "POWER ON / OFF",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "iky9rr8z4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky9ssupl": {
				"id": "iky9ssupl",
				"config": {
					"outputs": 1,
					"code": "NOSQL('evenements2').insert(data,true).where('homeid_awayid',data.homeid_awayid).callback(function(err,res){\n\t$.send('output',data.template);\n\tconsole.log(data.template);\n});"
				},
				"x": 4712,
				"y": 303,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikxao3w5s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iky9syszp": {
				"id": "iky9syszp",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 5017,
				"y": -4,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikya8qyxt": {
				"id": "ikya8qyxt",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','competition_id').callback(function(err,res){\n\t $.send('output',res);\n});"
				},
				"x": 490.97230529785156,
				"y": 735.9722900390625,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikx9zjve4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikya91ng6": {
				"id": "ikya91ng6",
				"config": {
					"outputs": 1,
					"code": "var link= data.match.id+'';\nvar donnee = { value : link};\nNOSQL('config').modify(donnee).where('name', 'current_link').callback(function(err,res){\n\t$.send('output',res);\n});"
				},
				"x": 1565,
				"y": 1364,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikya9rlk6",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikya9rlk6": {
				"id": "ikya9rlk6",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1637,
				"y": 1782,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikyaadm5j": {
				"id": "ikyaadm5j",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','competition_id').callback(function(err,res){\n\t $.send('output',res);\n});"
				},
				"x": 1250,
				"y": 1203,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikyabx9sn",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikyaawik7": {
				"id": "ikyaawik7",
				"config": {},
				"x": 5690,
				"y": 426,
				"component": "ckwuqb3y4",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikyabx9sn": {
				"id": "ikyabx9sn",
				"config": {
					"outputs": 1,
					"code": "var id = '227';\nif(data.value == id){\n\t\tid = '228';\n}\n\nNOSQL('config').modify({ value : id}).where('name', 'competition_id').callback(function(err,res){\n \t$.send('output',data);\n});"
				},
				"x": 1580,
				"y": 1556,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "ikyabxcwx",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ikyabxcwx": {
				"id": "ikyabxcwx",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1761,
				"y": 1714,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikye5bmu4": {
				"id": "ikye5bmu4",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1005.0625,
				"y": 365.015625,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikyeerbdw": {
				"id": "ikyeerbdw",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2084,
				"y": 1395,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ikyefzchs": {
				"id": "ikyefzchs",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2335,
				"y": 1625,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [],
			"paused": {
				"output__iky6xavyc__row": 1,
				"input__ikyaadm5j__input": 1,
				"input__ikyabx9sn__input": 1,
				"output__ikxcuhqck__default": 1,
				"output__ikxermdpg__data": 1,
				"output__iky9649fw__output": 1,
				"output__iky6wt0z4__output": 1,
				"output__iky6xavyc__output": 1,
				"input__ikxa9dyds__input": 1
			}
		},
		"variables": {
			"api_key": "eXOv8YQzPrtdesCF",
			"api_secret": "9dCd3fFKo22cGq9VnYrwXh6MJz0X2CCb",
			"competition_id": "370",
			"fixtures": "https://livescore-api.com/api-client/fixtures/matches.json",
			"fixture_time": "05:30",
			"live_score": "https://livescore-api.com/api-client/scores/live.json",
			"events": "https://livescore-api.com/api-client/scores/events.json",
			"morningprogram": "07:45"
		},
		"sources": {},
		"origin": "http://louisbertson:8000",
		"dtcreated": "2021-12-16T21:43:23.188Z",
		"size": 152005,
		"variables2": {}
	},
	"fnhb5001de41d": {
		"paused": true,
		"id": "fnhb5001de41d",
		"reference": "",
		"author": "Afric Consuting Group",
		"group": "ServiceFoot",
		"icon": "fa fa-volleyball-ball",
		"color": "#5599F8",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Test",
		"components": {
			"ckwuq8pg8": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq8zek": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuq94cc": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq96qg": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq98l4": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9eu4": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9how": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<div>\n\n\t\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</div>\n\n\t</header>\n</body>",
			"ckwuq9mxs": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckwuq9pk8": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuq9rvk": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"ckwuq9u6w": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"ckwuqa354": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"ckwuqa4rg": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ckwuqaml4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Peter Širka';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<style>\n\n\t.code_header{ color : #fff; background-color :#041EF5;}\n\theader > .fa{color : #fff!important;}\n</style>\n\n<body>\n\t<header class=\"code_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqao7g": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqaqzg": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqau2k": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqax8g": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb00g": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb1xw": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb3y4": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"ckwuqbayw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbco0": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbgws": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbj84": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"ckwuqbljg": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqboe8": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckx4tdfco": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\t\tvar id;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\n\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(instance.trigger(), config.interval);\n\t\t};\n\t\tconfig.restart && setTimeout(() => instance.configure(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckx4uquo8": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Louis Bertson';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.trigger_header{ color : #fff; background-color :#E8357E;}\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header class=\"trigger_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"ckx6c55dg": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, {id : 'row',name : 'Input data'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', res);\n\t\t\t\t\t\t$.send('row', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckxa3c034": "<script total>\n\n\texports.name = 'FootballSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id : 'output', name: 'Output' },\n\t\t\t\t\t   { id : 'notstarted', name : 'NOT STARTED'},\n\t\t\t\t\t   { id : 'inplay', name : 'IN PLAY'},\n\t\t\t\t\t   { id : 'halftimebreak', name : 'HALF TIME BREAK' },\n\t\t\t\t\t   { id : 'addedtime', name : 'ADDED TIME'},\n\t\t\t\t\t   { id : 'finished' , name : 'FINISHED'},\n\t\t\t\t\t   { id : 'unsufficientdata' , name : 'UNSUFFICIENT'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"ckxa9ds4s": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tif(matchs.length === 0 ){\n\t\t\t\t$.send('default', 'Config last update. '+ NOW.format('HH:mm'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.switch_header{ color : #fff; background-color :#8C42F6;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"switch_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxcuhcds": "<script total>\n\n\texports.name = 'MatchEventSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'goal', name: 'GOAL' },\n\t\t\t\t\t\t{ id: 'goalpenalty', name: 'GOAL_PENALTY' },\n\t\t\t\t\t\t{ id: 'owngoal', name: 'OWN_GOAL' },\n\t\t\t\t\t\t{ id: 'yellowcard', name: 'YELLOW_CARD' },\n\t\t\t\t\t\t{ id: 'redcard', name: 'RED_CARD' },\n\t\t\t\t\t\t{ id: 'missedpenalty', name: 'MISSED_PENALTY' },\n\t\t\t\t\t\t{ id: 'substitution', name: 'SUBSTITUTION' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'yellowredcard', name: 'YELLOW_RED_CARD' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar event = $.data;\n\n\t\t\t\tswitch(event.event){\n\t\t\t\t\tcase 'GOAL'\t :\n\t\t\t\t\t\t$.send('goal', event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'GOAL_PENALTY' :\n\t\t\t\t\t\t$.send('goalpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'OWN_GOAL' :\n\t\t\t\t\t\t$.send('owngoal',event);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YELLOW_CARD' :\n\t\t\t\t\t\t$.send('yellowcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RED_CARD':\n\t\t\t\t\t\t$.send('redcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ' YELLOW_RED_CARD' :\n\t\t\t\t\t\t$.send('yellowredcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'MISSED_PENALTY' :\n\t\t\t\t\t\t$.send('missedpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SUBSTITUTION' :\n\t\t\t\t\t\t$.send('substitution',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',event);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n```\t\t[\n\t\t\t{\n                \"id\": \"10509914\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"5\",\n                \"event\": \"GOAL\",\n                \"sort\": \"0\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509915\",\n                \"match_id\": \"129180\",\n                \"player\": \"MARIAPPA ADRIAN\",\n                \"time\": \"13\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"1\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509916\",\n                \"match_id\": \"129180\",\n                \"player\": \"CAPOUE ETIENNE\",\n                \"time\": \"60\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"2\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509917\",\n                \"match_id\": \"129180\",\n                \"player\": \"DOUCOURE ABDOULAYE\",\n                \"time\": \"61\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"3\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509918\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"62\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"4\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10510529\",\n                \"match_id\": \"129180\",\n                \"player\": \"VARDY JAMIE\",\n                \"time\": \"75\",\n                \"event\": \"GOAL\",\n                \"sort\": \"5\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10510974\",\n                \"match_id\": \"129180\",\n                \"player\": \"PEREIRA RICARDO\",\n                \"time\": \"84\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"6\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10511398\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"GOAL\",\n                \"sort\": \"7\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10511625\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"8\",\n                \"home_away\": \"h\"\n            }\n        ],\n        \"match\": {\n            \"id\": \"129180\",\n            \"date\": \"2019-03-03\",\n            \"home_name\": \"Watford\",\n            \"away_name\": \"Leicester City\",\n            \"score\": \"2 - 1\",\n            \"ht_score\": \"1 - 0\",\n            \"ft_score\": \"2 - 1\",\n            \"et_score\": \"\",\n            \"time\": \"FT\",\n            \"league_id\": \"25\",\n            \"status\": \"FINISHED\",\n            \"added\": \"2019-03-03 11:55:12\",\n            \"last_changed\": \"2019-03-03 13:58:04\",\n            \"home_id\": \"11\",\n            \"away_id\": \"6\",\n            \"competition_id\": \"2\",\n            \"location\": null,\n            \"fixture_id\": null,\n            \"scheduled\": null,\n            \"home\": {\n                \"id\": \"11\",\n                \"name\": \"Watford\",\n                \"stadium\": \"Vicarage Road Stadium\",\n                \"location\": \"Vicarage Road Stadium\"\n            },\n            \"away\": {\n                \"id\": \"6\",\n                \"name\": \"Leicester City\",\n                \"stadium\": \"King Power Stadium\",\n                \"location\": \"King Power Stadium\"\n            },\n            \"competition\": {\n                \"id\": \"2\",\n                \"name\": \"Premier League\"\n            }\n        }\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.event_header{ color : #fff; background-color :#171717;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxfxgv70": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ckxfxgza8": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl09vtgcu": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\tnosql.insert(data.data,true).where('id',data.id).callback(function(err) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tif (!data.filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl09vtmi7": "<script total>\n\n\texports.name = 'MongoDB Insert';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\n\t\tvar MONGO;\n        var COLS = {};\n\n\t\tinstance.message = async function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar result = {\n\t\t\t\tdata: data.data\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (data.data instanceof Array)\n\t\t\t\t\tresult.response = await COLS[id].insertMany(data.data, data.options);\n\t\t\t\telse\n\t\t\t\t\tresult.response = await COLS[id].insertOne(data.data, data.options);\n\n\t\t\t\tconsole.log('insertedId', typeof(result.response.insertedId))\n\t\t\t} catch(e) {\n\t\t\t\tresult = { error: e };\n\t\t\t}\n\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (config.string)\n\t\t\t\tconfig.connection = config.string;\n\n\t\t\tif (!config.connection)\n\t\t\t\treturn instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === config.connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[config.connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[config.connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tMONGO = REPO.mongodb[config.connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\n\t\t\tconsole.log(instance.main.instances());\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: { ... },  // data to insert, object for `insertOne` and an array of objects for `insertMany`\n\toptions: { ... }// insert options as passed to `insertOne(data, options)` or `insertMany(data, options)`\n}\n```\n\n</readme>\n<script>\n\tON('configure_mongodbinsert', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<div data---=\"input__?.string__dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t<div data---=\"input__?.name\" class=\"m b\">Connection name</div>\n\t\t\t\t<div data---=\"input__?.connection\" class=\"b\">Connection string (without the database name)</div>\n\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"STATUS.state__text\"></span>\n\t</footer>\n</body>",
			"cl09vtoi1": "<script total>\n\n\texports.name = 'MongoDB Insert';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\n\t\tvar MONGO;\n        var COLS = {};\n\n\t\tinstance.message = async function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar result = {\n\t\t\t\tdata: data.data\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (data.data instanceof Array)\n\t\t\t\t\tresult.response = await COLS[id].insertMany(data.data, data.options);\n\t\t\t\telse\n\t\t\t\t\tresult.response = await COLS[id].insertOne(data.data, data.options);\n\n\t\t\t\tconsole.log('insertedId', typeof(result.response.insertedId))\n\t\t\t} catch(e) {\n\t\t\t\tresult = { error: e };\n\t\t\t}\n\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (config.string)\n\t\t\t\tconfig.connection = config.string;\n\n\t\t\tif (!config.connection)\n\t\t\t\treturn instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === config.connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[config.connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[config.connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tMONGO = REPO.mongodb[config.connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\n\t\t\tconsole.log(instance.main.instances());\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: { ... },  // data to insert, object for `insertOne` and an array of objects for `insertMany`\n\toptions: { ... }// insert options as passed to `insertOne(data, options)` or `insertMany(data, options)`\n}\n```\n\n</readme>\n<script>\n\tON('configure_mongodbinsert', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<div data---=\"input__?.string__dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t<div data---=\"input__?.name\" class=\"m b\">Connection name</div>\n\t\t\t\t<div data---=\"input__?.connection\" class=\"b\">Connection string (without the database name)</div>\n\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"STATUS.state__text\"></span>\n\t</footer>\n</body>"
		},
		"design": {
			"il09uo4sb": {
				"id": "il09uo4sb",
				"config": {
					"outputs": 1,
					"code": "var keywords = [\n  {\n    \"id\": 89,\n    \"nom\": \"PRONOSTIQUES HYPPIQUES\",\n    \"keyword\": \"prono\"\n  },\n  {\n    \"id\": 98,\n    \"nom\": \"PRONOSTIQUEURS\",\n    \"keyword\": \"prono\"\n  },\n  {\n    \"id\": 142,\n    \"nom\": \"Resultat PMU\",\n    \"keyword\": \"rpmub\"\n  },\n  {\n    \"id\": 143,\n    \"nom\": \"Tocard du jour\",\n    \"keyword\": \"toc\"\n  },\n  {\n    \"id\": 144,\n    \"nom\": \"Arrivees 5 Dernieres annees\",\n    \"keyword\": 5\n  },\n  {\n    \"id\": 145,\n    \"nom\": \"Rapport/Gain du jour\",\n    \"keyword\": \"rapp\"\n  },\n  {\n    \"id\": 146,\n    \"nom\": \"Non-partant officiel\",\n    \"keyword\": \"non_par\"\n  },\n  {\n    \"id\": 147,\n    \"nom\": \"Derniere minute\",\n    \"keyword\": \"der_min\"\n  },\n  {\n    \"id\": 148,\n    \"nom\": \"Cheval du jour\",\n    \"keyword\": \"che_jou\"\n  },\n  {\n    \"id\": 149,\n    \"nom\": \"Coup de coeur\",\n    \"keyword\": \"cou_coe\"\n  },\n  {\n    \"id\": 150,\n    \"nom\": \"Pronostiqueur 1\",\n    \"keyword\": \"pmu_pro1\"\n  },\n  {\n    \"id\": 151,\n    \"nom\": \"Pronostiqueur 2\",\n    \"keyword\": \"pmu_pro2\"\n  },\n  {\n    \"id\": 152,\n    \"nom\": \"Pronostiqueur 3\",\n    \"keyword\": \"pmu_pro3\"\n  },\n  {\n    \"id\": 153,\n    \"nom\": \"Pronostiqueur 4\",\n    \"keyword\": \"pmu_pro4\"\n  },\n  {\n    \"id\": 157,\n    \"nom\": \"SAMU\",\n    \"keyword\": \"samu\"\n  },\n  {\n    \"id\": 158,\n    \"nom\": \"Presidence de la Republique\",\n    \"keyword\": \"presidence\"\n  },\n  {\n    \"id\": 159,\n    \"nom\": \"Gendarmerie\",\n    \"keyword\": \"gendarmerie\"\n  },\n  {\n    \"id\": 160,\n    \"nom\": \"Police\",\n    \"keyword\": \"police\"\n  },\n  {\n    \"id\": 161,\n    \"nom\": \"Sapeur pompier\",\n    \"keyword\": \"sapeurpompier\"\n  },\n  {\n    \"id\": 162,\n    \"nom\": \"Ministere du Numerique\",\n    \"keyword\": \"ministnudigitalisation\"\n  },\n  {\n    \"id\": 163,\n    \"nom\": \"Arcep Benin\",\n    \"keyword\": \"arcepbenin\"\n  },\n  {\n    \"id\": 164,\n    \"nom\": \"Onu Benin\",\n    \"keyword\": \"onubenin\"\n  },\n  {\n    \"id\": 165,\n    \"nom\": \"Ministere de la sante\",\n    \"keyword\": \"misante\"\n  },\n  {\n    \"id\": 166,\n    \"nom\": \"Ministere des affaires etrangeres\",\n    \"keyword\": \"minitsetrangeres\"\n  },\n  {\n    \"id\": 167,\n    \"nom\": \"Brigade des mineurs\",\n    \"keyword\": \"brigademineurs\"\n  },\n  {\n    \"id\": 168,\n    \"nom\": \"Ministere de l Interieur\",\n    \"keyword\": \"ministinterieur\"\n  },\n  {\n    \"id\": 221,\n    \"nom\": \"Benin Littoral Airways\",\n    \"keyword\": \"beninlittoralairways\"\n  }\n];\nkeywords.forEach(function(item) {\n\n\t$.send('output',item);\n});"
				},
				"x": 460.3472900390625,
				"y": 213.95836639404297,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aw91un",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqumnz": {
				"id": "il0aqumnz",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'http://213.246.36.116/kiosquesmsmoovbn/kiosque_ussd_recu.php';\nopt.query = { msisdn : '22652133010', ussd : 702 , keyword : data.keyword };\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.table = 'sousmenu2s';\n\tp.id = data.id;\n\tp.nom = data.nom;\n\tp.keyword = data.keyword;\n\tp.result = res.body;\n\t$.send('output', {data : p});\n\n}\nREQUEST(opt);"
				},
				"x": 1130.8333892822266,
				"y": 161.77083587646484,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqv4tl": {
				"id": "il0aqv4tl",
				"config": {
					"outputs": 1,
					"code": "var keywords = [\n  {\n    \"id\": 635,\n    \"nom\": \"belier\",\n    \"keyword\": \"0821\"\n  },\n  {\n    \"id\": 636,\n    \"nom\": \"taureau\",\n    \"keyword\": \"0822\"\n  },\n  {\n    \"id\": 637,\n    \"nom\": \"gemaux\",\n    \"keyword\": \"0823\"\n  },\n  {\n    \"id\": 638,\n    \"nom\": \"cancer\",\n    \"keyword\": \"0824\"\n  },\n  {\n    \"id\": 639,\n    \"nom\": \"lion\",\n    \"keyword\": \"0825\"\n  },\n  {\n    \"id\": 640,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"0826\"\n  },\n  {\n    \"id\": 641,\n    \"nom\": \"Balance\",\n    \"keyword\": \"0827\"\n  },\n  {\n    \"id\": 642,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"0828\"\n  },\n  {\n    \"id\": 643,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"0829\"\n  },\n  {\n    \"id\": 644,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"08210\"\n  },\n  {\n    \"id\": 645,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"08211\"\n  },\n  {\n    \"id\": 646,\n    \"nom\": \"Poisson\",\n    \"keyword\": \"08212\"\n  },\n  {\n    \"id\": 647,\n    \"nom\": \"Belier\",\n    \"keyword\": \"amo_bel\"\n  },\n  {\n    \"id\": 648,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"amo_tau\"\n  },\n  {\n    \"id\": 649,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"amo_gem\"\n  },\n  {\n    \"id\": 650,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"amo_can\"\n  },\n  {\n    \"id\": 651,\n    \"nom\": \"Lion\",\n    \"keyword\": \"amo_lio\"\n  },\n  {\n    \"id\": 652,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"amo_vie\"\n  },\n  {\n    \"id\": 653,\n    \"nom\": \"Balance\",\n    \"keyword\": \"amo_bal\"\n  },\n  {\n    \"id\": 654,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"amo_sco\"\n  },\n  {\n    \"id\": 655,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"amo_sag\"\n  },\n  {\n    \"id\": 656,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"amo_cap\"\n  },\n  {\n    \"id\": 657,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"amo_ver\"\n  },\n  {\n    \"id\": 658,\n    \"nom\": \"Poissons\",\n    \"keyword\": \"amo_poi\"\n  },\n  {\n    \"id\": 659,\n    \"nom\": \"Belier\",\n    \"keyword\": \"arg_bel\"\n  },\n  {\n    \"id\": 660,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"arg_tau\"\n  },\n  {\n    \"id\": 661,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"arg_gem\"\n  },\n  {\n    \"id\": 662,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"arg_can\"\n  },\n  {\n    \"id\": 663,\n    \"nom\": \"Lion\",\n    \"keyword\": \"arg_lio\"\n  },\n  {\n    \"id\": 664,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"arg_vie\"\n  },\n  {\n    \"id\": 665,\n    \"nom\": \"Balance\",\n    \"keyword\": \"arg_bal\"\n  },\n  {\n    \"id\": 666,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"arg_sco\"\n  },\n  {\n    \"id\": 667,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"arg_sag\"\n  },\n  {\n    \"id\": 668,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"arg_cap\"\n  },\n  {\n    \"id\": 669,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"arg_ver\"\n  },\n  {\n    \"id\": 670,\n    \"nom\": \"Poissons\",\n    \"keyword\": \"arg_poi\"\n  },\n  {\n    \"id\": 671,\n    \"nom\": \"Belier\",\n    \"keyword\": \"san_bel\"\n  },\n  {\n    \"id\": 672,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"san_tau\"\n  },\n  {\n    \"id\": 673,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"san_gem\"\n  },\n  {\n    \"id\": 674,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"san_can\"\n  },\n  {\n    \"id\": 675,\n    \"nom\": \"Lion\",\n    \"keyword\": \"san_lio\"\n  },\n  {\n    \"id\": 676,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"san_vie\"\n  },\n  {\n    \"id\": 677,\n    \"nom\": \"Balance\",\n    \"keyword\": \"san_bal\"\n  },\n  {\n    \"id\": 678,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"san_sco\"\n  },\n  {\n    \"id\": 679,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"san_sag\"\n  },\n  {\n    \"id\": 680,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"san_cap\"\n  },\n  {\n    \"id\": 681,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"san_ver\"\n  },\n  {\n    \"id\": 682,\n    \"nom\": \"Poissons\",\n    \"keyword\": \"san_poi\"\n  },\n  {\n    \"id\": 683,\n    \"nom\": \"Belier\",\n    \"keyword\": \"tra_bel\"\n  },\n  {\n    \"id\": 684,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"tra_tau\"\n  },\n  {\n    \"id\": 685,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"tra_gem\"\n  },\n  {\n    \"id\": 686,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"tra_can\"\n  },\n  {\n    \"id\": 687,\n    \"nom\": \"Lion\",\n    \"keyword\": \"tra_lio\"\n  },\n  {\n    \"id\": 688,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"tra_vie\"\n  },\n  {\n    \"id\": 689,\n    \"nom\": \"Balance\",\n    \"keyword\": \"tra_bal\"\n  },\n  {\n    \"id\": 690,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"tra_sco\"\n  },\n  {\n    \"id\": 691,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"tra_sag\"\n  },\n  {\n    \"id\": 692,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"tra_cap\"\n  },\n  {\n    \"id\": 693,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"tra_ver\"\n  },\n  {\n    \"id\": 694,\n    \"nom\": \"Poissons\",\n    \"keyword\": \"tra_poi\"\n  },\n  {\n    \"id\": 695,\n    \"nom\": \"Belier\",\n    \"keyword\": \"fam_bel\"\n  },\n  {\n    \"id\": 696,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"fam_tau\"\n  },\n  {\n    \"id\": 697,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"fam_gem\"\n  },\n  {\n    \"id\": 698,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"fam_can\"\n  },\n  {\n    \"id\": 699,\n    \"nom\": \"Lion\",\n    \"keyword\": \"fam_lio\"\n  },\n  {\n    \"id\": 700,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"fam_vie\"\n  },\n  {\n    \"id\": 701,\n    \"nom\": \"Balance\",\n    \"keyword\": \"fam_bal\"\n  },\n  {\n    \"id\": 702,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"fam_sco\"\n  },\n  {\n    \"id\": 703,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"fam_sag\"\n  },\n  {\n    \"id\": 704,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"fam_cap\"\n  },\n  {\n    \"id\": 705,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"fam_ver\"\n  },\n  {\n    \"id\": 706,\n    \"nom\": \"Belier\",\n    \"keyword\": \"sociale_bel\"\n  },\n  {\n    \"id\": 707,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"sociale_tau\"\n  },\n  {\n    \"id\": 708,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"sociale_gem\"\n  },\n  {\n    \"id\": 709,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"sociale_can\"\n  },\n  {\n    \"id\": 710,\n    \"nom\": \"Lion\",\n    \"keyword\": \"sociale_lio\"\n  },\n  {\n    \"id\": 711,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"sociale_vie\"\n  },\n  {\n    \"id\": 712,\n    \"nom\": \"Balance\",\n    \"keyword\": \"sociale_bal\"\n  },\n  {\n    \"id\": 713,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"sociale_sco\"\n  },\n  {\n    \"id\": 714,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"sociale_sag\"\n  },\n  {\n    \"id\": 715,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"sociale_cap\"\n  },\n  {\n    \"id\": 716,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"sociale_ver\"\n  },\n  {\n    \"id\": 717,\n    \"nom\": \"Poissons\",\n    \"keyword\": \"sociale_poi\"\n  },\n  {\n    \"id\": 718,\n    \"nom\": \"Belier\",\n    \"keyword\": \"chance_bel\"\n  },\n  {\n    \"id\": 719,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"chance_tau\"\n  },\n  {\n    \"id\": 720,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"chance_gem\"\n  },\n  {\n    \"id\": 721,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"chance_can\"\n  },\n  {\n    \"id\": 722,\n    \"nom\": \"Lion\",\n    \"keyword\": \"chance_lio\"\n  },\n  {\n    \"id\": 723,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"chance_vie\"\n  },\n  {\n    \"id\": 724,\n    \"nom\": \"Balance\",\n    \"keyword\": \"chance_bal\"\n  },\n  {\n    \"id\": 725,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"chance_sco\"\n  },\n  {\n    \"id\": 726,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"chance_sag\"\n  },\n  {\n    \"id\": 727,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"chance_cap\"\n  },\n  {\n    \"id\": 728,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"chance_ver\"\n  },\n  {\n    \"id\": 729,\n    \"nom\": \"Poissons\",\n    \"keyword\": \"chance_poi\"\n  },\n  {\n    \"id\": 730,\n    \"nom\": \"Belier\",\n    \"keyword\": \"signe_bel\"\n  },\n  {\n    \"id\": 731,\n    \"nom\": \"Taureau\",\n    \"keyword\": \"signe_tau\"\n  },\n  {\n    \"id\": 732,\n    \"nom\": \"Gemeau\",\n    \"keyword\": \"signe_gem\"\n  },\n  {\n    \"id\": 733,\n    \"nom\": \"Cancer\",\n    \"keyword\": \"signe_can\"\n  },\n  {\n    \"id\": 734,\n    \"nom\": \"Lion\",\n    \"keyword\": \"signe_lio\"\n  },\n  {\n    \"id\": 735,\n    \"nom\": \"Vierge\",\n    \"keyword\": \"signe_vie\"\n  },\n  {\n    \"id\": 736,\n    \"nom\": \"Balance\",\n    \"keyword\": \"signe_bal\"\n  },\n  {\n    \"id\": 737,\n    \"nom\": \"Scorpion\",\n    \"keyword\": \"signe_sco\"\n  },\n  {\n    \"id\": 738,\n    \"nom\": \"Sagittaire\",\n    \"keyword\": \"signe_sag\"\n  },\n  {\n    \"id\": 739,\n    \"nom\": \"Capricorne\",\n    \"keyword\": \"signe_cap\"\n  },\n  {\n    \"id\": 740,\n    \"nom\": \"Verseau\",\n    \"keyword\": \"signe_ver\"\n  },\n  {\n    \"id\": 741,\n    \"nom\": \"Poissons\",\n    \"keyword\": \"signe_poi\"\n  },\n  {\n    \"id\": 742,\n    \"nom\": \"arte\",\n    \"keyword\": \"0858\"\n  },\n  {\n    \"id\": 743,\n    \"nom\": \"canal+\",\n    \"keyword\": \"0852\"\n  },\n  {\n    \"id\": 744,\n    \"nom\": \"france3\",\n    \"keyword\": \"0859\"\n  },\n  {\n    \"id\": 745,\n    \"nom\": \"france5\",\n    \"keyword\": \"0856\"\n  },\n  {\n    \"id\": 746,\n    \"nom\": \"france2\",\n    \"keyword\": \"0855\"\n  },\n  {\n    \"id\": 747,\n    \"nom\": \"i tele\",\n    \"keyword\": \"0857\"\n  },\n  {\n    \"id\": 748,\n    \"nom\": \"tf1\",\n    \"keyword\": \"0854\"\n  },\n  {\n    \"id\": 749,\n    \"nom\": \"tnb\",\n    \"keyword\": \"0851\"\n  },\n  {\n    \"id\": 750,\n    \"nom\": \"tv5\",\n    \"keyword\": \"0853\"\n  },\n  {\n    \"id\": 751,\n    \"nom\": \"football national\",\n    \"keyword\": \"0611\"\n  },\n  {\n    \"id\": 752,\n    \"nom\": \"football internationales\",\n    \"keyword\": \"0612\"\n  },\n  {\n    \"id\": 753,\n    \"nom\": \"autres\",\n    \"keyword\": \"062\"\n  },\n  {\n    \"id\": 761,\n    \"nom\": \"verset coranique du jour\",\n    \"keyword\": \"coran\"\n  },\n  {\n    \"id\": 762,\n    \"nom\": \"hadith du jour\",\n    \"keyword\": \"had\"\n  },\n  {\n    \"id\": 763,\n    \"nom\": \"Psaume du jour\",\n    \"keyword\": \"psau\"\n  },\n  {\n    \"id\": 764,\n    \"nom\": \"Evangile du jour\",\n    \"keyword\": \"evan\"\n  },\n  {\n    \"id\": 789,\n    \"nom\": \"Allianz Benin\",\n    \"keyword\": \"allianz\"\n  },\n  {\n    \"id\": 790,\n    \"nom\": \"L africaine Des Assurances\",\n    \"keyword\": \"lafricaineass\"\n  },\n  {\n    \"id\": 791,\n    \"nom\": \"Gab Assurance\",\n    \"keyword\": \"gabass\"\n  },\n  {\n    \"id\": 792,\n    \"nom\": \"Saar Assurances\",\n    \"keyword\": \"saarass\"\n  },\n  {\n    \"id\": 793,\n    \"nom\": \"Saham Assurances\",\n    \"keyword\": \"sahamass\"\n  },\n  {\n    \"id\": 794,\n    \"nom\": \"Sunu Assurances\",\n    \"keyword\": \"sunuass\"\n  },\n  {\n    \"id\": 795,\n    \"nom\": \"Union Beninoise D’assurance-Vie (Uba-Vie)\",\n    \"keyword\": \"ubavie\"\n  },\n  {\n    \"id\": 796,\n    \"nom\": \"Partenaires Assurances\",\n    \"keyword\": \"partenairesass\"\n  },\n  {\n    \"id\": 797,\n    \"nom\": \"Victoria Assurances\",\n    \"keyword\": \"victoriaass\"\n  },\n  {\n    \"id\": 798,\n    \"nom\": \"Benin Invest Assurances\",\n    \"keyword\": \"benininvestass\"\n  },\n  {\n    \"id\": 799,\n    \"nom\": \"Autres\",\n    \"keyword\": \"autres_assurance\"\n  },\n  {\n    \"id\": 800,\n    \"nom\": \"Bank Of Africa (Boa)\",\n    \"keyword\": \"boa\"\n  },\n  {\n    \"id\": 801,\n    \"nom\": \"Orabank Benin (Obb)\",\n    \"keyword\": \"obb\"\n  },\n  {\n    \"id\": 802,\n    \"nom\": \"United Bank For Africa (Uba)\",\n    \"keyword\": \"uba\"\n  },\n  {\n    \"id\": 803,\n    \"nom\": \"Bsic-Benin\",\n    \"keyword\": \"bsic\"\n  },\n  {\n    \"id\": 804,\n    \"nom\": \"Coris Bank International (Cbi)\",\n    \"keyword\": \"cbi\"\n  },\n  {\n    \"id\": 805,\n    \"nom\": \"Ecobank Benin (Ebb)\",\n    \"keyword\": \"ebb\"\n  },\n  {\n    \"id\": 806,\n    \"nom\": \"Societe Generale Du Benin (Sgb)\",\n    \"keyword\": \"sgb\"\n  },\n  {\n    \"id\": 807,\n    \"nom\": \"Banque Atlantique Au Benin(Bab)\",\n    \"keyword\": \"bab\"\n  },\n  {\n    \"id\": 808,\n    \"nom\": \"Nsia Banque\",\n    \"keyword\": \"nsia\"\n  },\n  {\n    \"id\": 809,\n    \"nom\": \"Bceao (Banque Centrale Des Etats De L’afrique De L’ouest)\",\n    \"keyword\": \"bceao\"\n  },\n  {\n    \"id\": 810,\n    \"nom\": \"International Commercial Bank\",\n    \"keyword\": \"icb\"\n  },\n  {\n    \"id\": 811,\n    \"nom\": \"Autres\",\n    \"keyword\": \"autres_banque\"\n  },\n  {\n    \"id\": 812,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"routier_cotonou\"\n  },\n  {\n    \"id\": 813,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"routier_porto_Novo\"\n  },\n  {\n    \"id\": 814,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"routier_djougou\"\n  },\n  {\n    \"id\": 815,\n    \"nom\": \"Dassa\",\n    \"keyword\": \"routier_dassa\"\n  },\n  {\n    \"id\": 816,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"routier_parakou\"\n  },\n  {\n    \"id\": 817,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"routier_bohicon\"\n  },\n  {\n    \"id\": 818,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"routier_malanville\"\n  },\n  {\n    \"id\": 819,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"routier_ouidah\"\n  },\n  {\n    \"id\": 820,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"routier_natitingou\"\n  },\n  {\n    \"id\": 821,\n    \"nom\": \"Dogbo\",\n    \"keyword\": \"routier_dogbo\"\n  },\n  {\n    \"id\": 822,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"routier_lokossa\"\n  },\n  {\n    \"id\": 823,\n    \"nom\": \"Pobe\",\n    \"keyword\": \"routier_pobe\"\n  },\n  {\n    \"id\": 824,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"routier_kandi\"\n  },\n  {\n    \"id\": 825,\n    \"nom\": \"Abomey-Calavi\",\n    \"keyword\": \"routier_abomey_Calavi\"\n  },\n  {\n    \"id\": 826,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"routier_grand_Popo\"\n  },\n  {\n    \"id\": 827,\n    \"nom\": \"Brussels Airlines\",\n    \"keyword\": \"airbrussels\"\n  },\n  {\n    \"id\": 828,\n    \"nom\": \"Air Cote D'ivoire\",\n    \"keyword\": \"aircotedivoire\"\n  },\n  {\n    \"id\": 829,\n    \"nom\": \"Africawest Cargo\",\n    \"keyword\": \"africawestcargo\"\n  },\n  {\n    \"id\": 830,\n    \"nom\": \"Afriqiyah Airways\",\n    \"keyword\": \"afriqiyahairways\"\n  },\n  {\n    \"id\": 831,\n    \"nom\": \"Afrique Airlines\",\n    \"keyword\": \"afriqueairlines\"\n  },\n  {\n    \"id\": 832,\n    \"nom\": \"Air Burkina\",\n    \"keyword\": \"airburkina\"\n  },\n  {\n    \"id\": 833,\n    \"nom\": \"Air France\",\n    \"keyword\": \"airfrance\"\n  },\n  {\n    \"id\": 834,\n    \"nom\": \"Air Mali\",\n    \"keyword\": \"airmali\"\n  },\n  {\n    \"id\": 835,\n    \"nom\": \"Air Mauritanie\",\n    \"keyword\": \"airmauritanie\"\n  },\n  {\n    \"id\": 836,\n    \"nom\": \"Air Tahiti Nui\",\n    \"keyword\": \"airtahitinui\"\n  },\n  {\n    \"id\": 837,\n    \"nom\": \"Air Taxi Benin\",\n    \"keyword\": \"airtaxibenin\"\n  },\n  {\n    \"id\": 838,\n    \"nom\": \"Anac Benin\",\n    \"keyword\": \"anacbenin\"\n  },\n  {\n    \"id\": 839,\n    \"nom\": \"Asky Airlines\",\n    \"keyword\": \"askyairlines\"\n  },\n  {\n    \"id\": 840,\n    \"nom\": \"Benin Littoral Airways\",\n    \"keyword\": \"beninlittoralairways\"\n  },\n  {\n    \"id\": 841,\n    \"nom\": \"Camair-Co\",\n    \"keyword\": \"camair_co\"\n  },\n  {\n    \"id\": 842,\n    \"nom\": \"Cathay Pacific\",\n    \"keyword\": \"cathaypacific\"\n  },\n  {\n    \"id\": 843,\n    \"nom\": \"Ceiba Intercontinental\",\n    \"keyword\": \"ceibaintercontinental\"\n  },\n  {\n    \"id\": 845,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"veh_Cotonou\"\n  },\n  {\n    \"id\": 846,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"veh_Porto_Novo\"\n  },\n  {\n    \"id\": 847,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"veh_Bohicon\"\n  },\n  {\n    \"id\": 848,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"veh_Parakou\"\n  },\n  {\n    \"id\": 849,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"Hotels_cotonou\"\n  },\n  {\n    \"id\": 850,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"Hotels_porto_Novo\"\n  },\n  {\n    \"id\": 851,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"Hotels_djougou\"\n  },\n  {\n    \"id\": 852,\n    \"nom\": \"Dassa\",\n    \"keyword\": \"Hotels_dassa\"\n  },\n  {\n    \"id\": 853,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"Hotels_parakou\"\n  },\n  {\n    \"id\": 854,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"Hotels_bohicon\"\n  },\n  {\n    \"id\": 855,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"Hotels_malanville\"\n  },\n  {\n    \"id\": 856,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"Hotels_ouidah\"\n  },\n  {\n    \"id\": 857,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"Hotels_natitingou\"\n  },\n  {\n    \"id\": 858,\n    \"nom\": \"Dogbo\",\n    \"keyword\": \"Hotels_dogbo\"\n  },\n  {\n    \"id\": 859,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"Hotels_lokossa\"\n  },\n  {\n    \"id\": 860,\n    \"nom\": \"Pobe\",\n    \"keyword\": \"Hotels_pobe\"\n  },\n  {\n    \"id\": 861,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"Hotels_kandi\"\n  },\n  {\n    \"id\": 862,\n    \"nom\": \"Abomey-Calavi\",\n    \"keyword\": \"Hotels_abomey_Calavi\"\n  },\n  {\n    \"id\": 863,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"Hotels_grand\"\n  },\n  {\n    \"id\": 864,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"superm_Cotonou\"\n  },\n  {\n    \"id\": 865,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"superm_Porto_Novo\"\n  },\n  {\n    \"id\": 866,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"superm_Bohicon\"\n  },\n  {\n    \"id\": 867,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"superm_Parakou\"\n  },\n  {\n    \"id\": 868,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"Boites_Cotonou\"\n  },\n  {\n    \"id\": 869,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"Boites_Porto_Novo\"\n  },\n  {\n    \"id\": 870,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"Boites_Bohicon\"\n  },\n  {\n    \"id\": 871,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"Boites_Parakou\"\n  },\n  {\n    \"id\": 872,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"Boites_Lokossa\"\n  },\n  {\n    \"id\": 873,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"Boites_Natitingou\"\n  },\n  {\n    \"id\": 874,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"Boites_Ouidah\"\n  },\n  {\n    \"id\": 875,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"Boites_Grand_Popo\"\n  },\n  {\n    \"id\": 876,\n    \"nom\": \"Abomey Calavi\",\n    \"keyword\": \"Boites_Abomey_Calavi\"\n  },\n  {\n    \"id\": 877,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"Restau_cotonou\"\n  },\n  {\n    \"id\": 878,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"Restau_porto_Novo\"\n  },\n  {\n    \"id\": 879,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"Restau_djougou\"\n  },\n  {\n    \"id\": 880,\n    \"nom\": \"Dassa\",\n    \"keyword\": \"Restau_dassa\"\n  },\n  {\n    \"id\": 881,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"Restau_parakou\"\n  },\n  {\n    \"id\": 882,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"Restau_bohicon\"\n  },\n  {\n    \"id\": 883,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"Restau_malanville\"\n  },\n  {\n    \"id\": 884,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"Restau_ouidah\"\n  },\n  {\n    \"id\": 885,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"Restau_natitingou\"\n  },\n  {\n    \"id\": 886,\n    \"nom\": \"Dogbo\",\n    \"keyword\": \"Restau_dogbo\"\n  },\n  {\n    \"id\": 887,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"Restau_lokossa\"\n  },\n  {\n    \"id\": 888,\n    \"nom\": \"Pobe\",\n    \"keyword\": \"Restau_pobe\"\n  },\n  {\n    \"id\": 889,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"Restau_kandi\"\n  },\n  {\n    \"id\": 890,\n    \"nom\": \"Abomey-Calavi\",\n    \"keyword\": \"Restau_abomey_Calavi\"\n  },\n  {\n    \"id\": 891,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"Restau_grand_Popo\"\n  },\n  {\n    \"id\": 892,\n    \"nom\": \"Canal Olympia Wologuèdè\",\n    \"keyword\": \"olympia\"\n  },\n  {\n    \"id\": 893,\n    \"nom\": \"lotto\",\n    \"keyword\": \"021\"\n  },\n  {\n    \"id\": 894,\n    \"nom\": \"Sante\",\n    \"keyword\": \"newsan\"\n  },\n  {\n    \"id\": 895,\n    \"nom\": \"Beaute\",\n    \"keyword\": \"newbea\"\n  },\n  {\n    \"id\": 896,\n    \"nom\": \"Cuisine\",\n    \"keyword\": \"newcui\"\n  },\n  {\n    \"id\": 897,\n    \"nom\": \"Grand Mere\",\n    \"keyword\": \"newgra\"\n  },\n  {\n    \"id\": 898,\n    \"nom\": \"Vie de Couple\",\n    \"keyword\": \"newvie\"\n  },\n  {\n    \"id\": 899,\n    \"nom\": \"Carierre Professionnelle\",\n    \"keyword\": \"newcar\"\n  },\n  {\n    \"id\": 900,\n    \"nom\": \"Universite\",\n    \"keyword\": \"F1\"\n  }\n];\nkeywords.forEach(function(item) {\n\n\t$.send('output',item);\n});"
				},
				"x": 460,
				"y": 353.2986373901367,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aw91un",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqvaf9": {
				"id": "il0aqvaf9",
				"config": {
					"outputs": 1,
					"code": "var keywords =[\n  {\n    \"id\": 1,\n    \"nom\": \"dernieres nouvelles\",\n    \"keyword\": \"actuno\"\n  },\n  {\n    \"id\": 2,\n    \"nom\": \"nouveaux titres\",\n    \"keyword\": \"actuti\"\n  },\n  {\n    \"id\": 3,\n    \"nom\": \"nouvelles a propos du showbiz\",\n    \"keyword\": \"actush\"\n  },\n  {\n    \"id\": 4,\n    \"nom\": \"nouvelles financieres\",\n    \"keyword\": \"actufi\"\n  },\n  {\n    \"id\": 5,\n    \"nom\": \"dernieres nouvelles\",\n    \"keyword\": \"interno\"\n  },\n  {\n    \"id\": 6,\n    \"nom\": \"nouveaux titres\",\n    \"keyword\": \"interti\"\n  },\n  {\n    \"id\": 7,\n    \"nom\": \"nouvelles africaines\",\n    \"keyword\": \"afri\"\n  },\n  {\n    \"id\": 8,\n    \"nom\": \"nouvelles d asie\",\n    \"keyword\": \"asie\"\n  },\n  {\n    \"id\": 9,\n    \"nom\": \"nouvelles du moyen orient\",\n    \"keyword\": \"orie\"\n  },\n  {\n    \"id\": 10,\n    \"nom\": \"nouvelles du showbiz\",\n    \"keyword\": \"intersh\"\n  },\n  {\n    \"id\": 11,\n    \"nom\": \"nouvelles dans le monde\",\n    \"keyword\": \"mond\"\n  },\n  {\n    \"id\": 12,\n    \"nom\": \"nouvelles financieres\",\n    \"keyword\": \"interfi\"\n  },\n  {\n    \"id\": 13,\n    \"nom\": \"telephonie mobile\",\n    \"keyword\": \"mobil\"\n  },\n  {\n    \"id\": 14,\n    \"nom\": \"Banikoara\",\n    \"keyword\": \"phaaliban\"\n  },\n  {\n    \"id\": 15,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"phaalikan\"\n  },\n  {\n    \"id\": 16,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"phaalimal\"\n  },\n  {\n    \"id\": 17,\n    \"nom\": \"Segbana\",\n    \"keyword\": \"phaaliseg\"\n  },\n  {\n    \"id\": 18,\n    \"nom\": \"Kérou\",\n    \"keyword\": \"phaataker\"\n  },\n  {\n    \"id\": 19,\n    \"nom\": \"Kouandé\",\n    \"keyword\": \"phaatakou\"\n  },\n  {\n    \"id\": 20,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"phaatakou\"\n  },\n  {\n    \"id\": 21,\n    \"nom\": \"Tanguiéta\",\n    \"keyword\": \"phaatatan\"\n  },\n  {\n    \"id\": 22,\n    \"nom\": \"Abomey-Calavi\",\n    \"keyword\": \"phaatlabo\"\n  },\n  {\n    \"id\": 23,\n    \"nom\": \"Allada\",\n    \"keyword\": \"phaatlall\"\n  },\n  {\n    \"id\": 24,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"phaatloui\"\n  },\n  {\n    \"id\": 25,\n    \"nom\": \"Bembéréké\",\n    \"keyword\": \"phaborgou\"\n  },\n  {\n    \"id\": 26,\n    \"nom\": \"N'Dali\",\n    \"keyword\": \"phabornda\"\n  },\n  {\n    \"id\": 27,\n    \"nom\": \"Nikki\",\n    \"keyword\": \"phabornik\"\n  },\n  {\n    \"id\": 28,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"phaborpar\"\n  },\n  {\n    \"id\": 29,\n    \"nom\": \"Tchaourou\",\n    \"keyword\": \"phabortch\"\n  },\n  {\n    \"id\": 30,\n    \"nom\": \"Dassa-Zoumè\",\n    \"keyword\": \"phacoldas\"\n  },\n  {\n    \"id\": 31,\n    \"nom\": \"Savalou\",\n    \"keyword\": \"phacolsav\"\n  },\n  {\n    \"id\": 32,\n    \"nom\": \"Savé\",\n    \"keyword\": \"phacolsave\"\n  },\n  {\n    \"id\": 33,\n    \"nom\": \"Aplahoué\",\n    \"keyword\": \"phacouapl\"\n  },\n  {\n    \"id\": 34,\n    \"nom\": \"Dogbo-Tota\",\n    \"keyword\": \"phacoudog\"\n  },\n  {\n    \"id\": 35,\n    \"nom\": \"Bassila\",\n    \"keyword\": \"phadonbas\"\n  },\n  {\n    \"id\": 36,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"phadondjo\"\n  },\n  {\n    \"id\": 37,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"phalitcot\"\n  },\n  {\n    \"id\": 38,\n    \"nom\": \"Athiémé\",\n    \"keyword\": \"phamomath\"\n  },\n  {\n    \"id\": 40,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"phamomgra\"\n  },\n  {\n    \"id\": 41,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"phamomlok\"\n  },\n  {\n    \"id\": 42,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"phaouepor\"\n  },\n  {\n    \"id\": 43,\n    \"nom\": \"Kétou\",\n    \"keyword\": \"phaplaket\"\n  },\n  {\n    \"id\": 44,\n    \"nom\": \"Pobé\",\n    \"keyword\": \"phaplapob\"\n  },\n  {\n    \"id\": 45,\n    \"nom\": \"Sakété\",\n    \"keyword\": \"phaplasak\"\n  },\n  {\n    \"id\": 46,\n    \"nom\": \"Abomey\",\n    \"keyword\": \"phazouabo\"\n  },\n  {\n    \"id\": 47,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"phazouboh\"\n  },\n  {\n    \"id\": 48,\n    \"nom\": \"Cové\",\n    \"keyword\": \"phazoucov\"\n  },\n  {\n    \"id\": 49,\n    \"nom\": \"Comè\",\n    \"keyword\": \"phamomcom\"\n  },\n  {\n    \"id\": 50,\n    \"nom\": \"Banikoara\",\n    \"keyword\": \"Hopaliban\"\n  },\n  {\n    \"id\": 51,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"Hopalikan\"\n  },\n  {\n    \"id\": 52,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"Hopalimal\"\n  },\n  {\n    \"id\": 53,\n    \"nom\": \"Segbana\",\n    \"keyword\": \"Hopaliseg\"\n  },\n  {\n    \"id\": 54,\n    \"nom\": \"Kérou\",\n    \"keyword\": \"Hopataker\"\n  },\n  {\n    \"id\": 55,\n    \"nom\": \"Kouandé\",\n    \"keyword\": \"Hopatakou\"\n  },\n  {\n    \"id\": 56,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"Hopatakou\"\n  },\n  {\n    \"id\": 57,\n    \"nom\": \"Tanguiéta\",\n    \"keyword\": \"Hopatatan\"\n  },\n  {\n    \"id\": 58,\n    \"nom\": \"Abomey-Calavi\",\n    \"keyword\": \"Hopatlabo\"\n  },\n  {\n    \"id\": 59,\n    \"nom\": \"Allada\",\n    \"keyword\": \"Hopatlall\"\n  },\n  {\n    \"id\": 60,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"Hopatloui\"\n  },\n  {\n    \"id\": 61,\n    \"nom\": \"Bembéréké\",\n    \"keyword\": \"Hopborgou\"\n  },\n  {\n    \"id\": 62,\n    \"nom\": \"N'Dali\",\n    \"keyword\": \"Hopbornda\"\n  },\n  {\n    \"id\": 63,\n    \"nom\": \"Nikki\",\n    \"keyword\": \"Hopbornik\"\n  },\n  {\n    \"id\": 64,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"Hopborpar\"\n  },\n  {\n    \"id\": 65,\n    \"nom\": \"Tchaourou\",\n    \"keyword\": \"Hopbortch\"\n  },\n  {\n    \"id\": 66,\n    \"nom\": \"Dassa-Zoumè\",\n    \"keyword\": \"Hopcoldas\"\n  },\n  {\n    \"id\": 67,\n    \"nom\": \"Savalou\",\n    \"keyword\": \"Hopcolsav\"\n  },\n  {\n    \"id\": 68,\n    \"nom\": \"Savé\",\n    \"keyword\": \"Hopcolsave\"\n  },\n  {\n    \"id\": 69,\n    \"nom\": \"Aplahoué\",\n    \"keyword\": \"Hopcouapl\"\n  },\n  {\n    \"id\": 70,\n    \"nom\": \"Dogbo-Tota\",\n    \"keyword\": \"Hopcoudog\"\n  },\n  {\n    \"id\": 71,\n    \"nom\": \"Bassila\",\n    \"keyword\": \"Hopdonbas\"\n  },\n  {\n    \"id\": 72,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"Hopdondjo\"\n  },\n  {\n    \"id\": 73,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"Hoplitcot\"\n  },\n  {\n    \"id\": 74,\n    \"nom\": \"Athiémé\",\n    \"keyword\": \"Hopmomath\"\n  },\n  {\n    \"id\": 75,\n    \"nom\": \"Comè\",\n    \"keyword\": \"Hopmomcom\"\n  },\n  {\n    \"id\": 76,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"Hopmomgra\"\n  },\n  {\n    \"id\": 77,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"Hopmomlok\"\n  },\n  {\n    \"id\": 78,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"Hopouepor\"\n  },\n  {\n    \"id\": 79,\n    \"nom\": \"Kétou\",\n    \"keyword\": \"Hopplaket\"\n  },\n  {\n    \"id\": 80,\n    \"nom\": \"Pobé\",\n    \"keyword\": \"Hopplapob\"\n  },\n  {\n    \"id\": 81,\n    \"nom\": \"Sakété\",\n    \"keyword\": \"Hopplasak\"\n  },\n  {\n    \"id\": 82,\n    \"nom\": \"Abomey\",\n    \"keyword\": \"Hopzouabo\"\n  },\n  {\n    \"id\": 83,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"Hopzouboh\"\n  },\n  {\n    \"id\": 84,\n    \"nom\": \"Cové\",\n    \"keyword\": \"Hopzoucov\"\n  },\n  {\n    \"id\": 85,\n    \"nom\": \"Cotair\",\n    \"keyword\": \"cotair\"\n  },\n  {\n    \"id\": 86,\n    \"nom\": \"Direction Commerciale De Westair Benin\",\n    \"keyword\": \"westairbenin\"\n  },\n  {\n    \"id\": 87,\n    \"nom\": \"Ethiopian Airlines\",\n    \"keyword\": \"ethiopianairlines\"\n  },\n  {\n    \"id\": 88,\n    \"nom\": \"Gabon Airlines\",\n    \"keyword\": \"gabonairlines\"\n  },\n  {\n    \"id\": 89,\n    \"nom\": \"Karinou Airlines\",\n    \"keyword\": \"karinouairlines\"\n  },\n  {\n    \"id\": 90,\n    \"nom\": \"Kenya Airways\",\n    \"keyword\": \"kenya_airways\"\n  },\n  {\n    \"id\": 91,\n    \"nom\": \"Mauritania Airlines\",\n    \"keyword\": \"mauritaniaairlines\"\n  },\n  {\n    \"id\": 92,\n    \"nom\": \"Nil Voyages   Egyptair\",\n    \"keyword\": \"egyptair\"\n  },\n  {\n    \"id\": 93,\n    \"nom\": \"Olizair\",\n    \"keyword\": \"olizair\"\n  },\n  {\n    \"id\": 94,\n    \"nom\": \"Royal Air Maroc\",\n    \"keyword\": \"royalairmaroc\"\n  },\n  {\n    \"id\": 95,\n    \"nom\": \"Rwand Air\",\n    \"keyword\": \"rwandair\"\n  },\n  {\n    \"id\": 96,\n    \"nom\": \"South African Airways\",\n    \"keyword\": \"southafricanairways\"\n  },\n  {\n    \"id\": 97,\n    \"nom\": \"Tac\",\n    \"keyword\": \"tac\"\n  },\n  {\n    \"id\": 98,\n    \"nom\": \"Toumai Air Tchad\",\n    \"keyword\": \"toumaiairtchad\"\n  },\n  {\n    \"id\": 99,\n    \"nom\": \"Trans Air Benin\",\n    \"keyword\": \"transairbenin\"\n  },\n  {\n    \"id\": 100,\n    \"nom\": \"Turkish Airlines\",\n    \"keyword\": \"turkishairlines\"\n  },\n  {\n    \"id\": 101,\n    \"nom\": \"Westair Benin\",\n    \"keyword\": \"westairbenin\"\n  },\n  {\n    \"id\": 102,\n    \"nom\": \"Abomey\",\n    \"keyword\": \"previsionzouabo\"\n  },\n  {\n    \"id\": 103,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"previsionzouboh\"\n  },\n  {\n    \"id\": 104,\n    \"nom\": \"Cové\",\n    \"keyword\": \"previsionzoucov\"\n  },\n  {\n    \"id\": 105,\n    \"nom\": \"Kétou\",\n    \"keyword\": \"previsionplaket\"\n  },\n  {\n    \"id\": 106,\n    \"nom\": \"Pobé\",\n    \"keyword\": \"previsionplapob\"\n  },\n  {\n    \"id\": 107,\n    \"nom\": \"Sakété\",\n    \"keyword\": \"previsionplasak\"\n  },\n  {\n    \"id\": 108,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"previsionouepor\"\n  },\n  {\n    \"id\": 109,\n    \"nom\": \"Comè\",\n    \"keyword\": \"previsionmomcom\"\n  },\n  {\n    \"id\": 110,\n    \"nom\": \"Athiémé\",\n    \"keyword\": \"previsionmomath\"\n  },\n  {\n    \"id\": 111,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"previsionmomgra\"\n  },\n  {\n    \"id\": 112,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"previsionmomlok\"\n  },\n  {\n    \"id\": 113,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"previsionlitcot\"\n  },\n  {\n    \"id\": 114,\n    \"nom\": \"previsionlitcot\",\n    \"keyword\": \"previsiondonbas\"\n  },\n  {\n    \"id\": 115,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"previsiondondjo\"\n  },\n  {\n    \"id\": 116,\n    \"nom\": \"Aplahoué\",\n    \"keyword\": \"previsioncouapl\"\n  },\n  {\n    \"id\": 117,\n    \"nom\": \"Dogbo-Tota\",\n    \"keyword\": \"previsioncoudog\"\n  },\n  {\n    \"id\": 118,\n    \"nom\": \"Dassa-Zoumè\",\n    \"keyword\": \"previsioncoldas\"\n  },\n  {\n    \"id\": 119,\n    \"nom\": \"Savalou\",\n    \"keyword\": \"previsioncolsav\"\n  },\n  {\n    \"id\": 120,\n    \"nom\": \"Savé\",\n    \"keyword\": \"previsioncolsave\"\n  },\n  {\n    \"id\": 121,\n    \"nom\": \"Bembéréké\",\n    \"keyword\": \"previsionborgou\"\n  },\n  {\n    \"id\": 122,\n    \"nom\": \"N'Dali\",\n    \"keyword\": \"previsionbornda\"\n  },\n  {\n    \"id\": 123,\n    \"nom\": \"Nikki\",\n    \"keyword\": \"previsionbornik\"\n  },\n  {\n    \"id\": 124,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"previsionborpar\"\n  },\n  {\n    \"id\": 125,\n    \"nom\": \"Tchaourou\",\n    \"keyword\": \"previsionbortch\"\n  },\n  {\n    \"id\": 126,\n    \"nom\": \"Tanguiéta\",\n    \"keyword\": \"previsionatatan\"\n  },\n  {\n    \"id\": 127,\n    \"nom\": \"Abomey-Calavi\",\n    \"keyword\": \"previsionatlabo\"\n  },\n  {\n    \"id\": 128,\n    \"nom\": \"Allada\",\n    \"keyword\": \"previsionatlall\"\n  },\n  {\n    \"id\": 129,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"previsionatloui\"\n  },\n  {\n    \"id\": 130,\n    \"nom\": \"Kérou\",\n    \"keyword\": \"previsionataker\"\n  },\n  {\n    \"id\": 131,\n    \"nom\": \"Kouandé\",\n    \"keyword\": \"previsionatakou\"\n  },\n  {\n    \"id\": 132,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"previsionatakou\"\n  },\n  {\n    \"id\": 133,\n    \"nom\": \"Banikoara\",\n    \"keyword\": \"previsionaliban\"\n  },\n  {\n    \"id\": 134,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"previsionalikan\"\n  },\n  {\n    \"id\": 135,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"previsionalimal\"\n  },\n  {\n    \"id\": 136,\n    \"nom\": \"Segbana\",\n    \"keyword\": \"previsionaliseg\"\n  },\n  {\n    \"id\": 137,\n    \"nom\": \"Abomey\",\n    \"keyword\": \"Meteozouabo\"\n  },\n  {\n    \"id\": 138,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"Meteozouboh\"\n  },\n  {\n    \"id\": 139,\n    \"nom\": \"Cové\",\n    \"keyword\": \"Meteozoucov\"\n  },\n  {\n    \"id\": 140,\n    \"nom\": \"Kétou\",\n    \"keyword\": \"Meteoplaket\"\n  },\n  {\n    \"id\": 141,\n    \"nom\": \"Pobé\",\n    \"keyword\": \"Meteoplapob\"\n  },\n  {\n    \"id\": 142,\n    \"nom\": \"Sakété\",\n    \"keyword\": \"Meteoplasak\"\n  },\n  {\n    \"id\": 143,\n    \"nom\": \"Porto-Novo\",\n    \"keyword\": \"Meteoouepor\"\n  },\n  {\n    \"id\": 144,\n    \"nom\": \"Athiémé\",\n    \"keyword\": \"Meteomomath\"\n  },\n  {\n    \"id\": 145,\n    \"nom\": \"Comè\",\n    \"keyword\": \"Meteomomcom\"\n  },\n  {\n    \"id\": 146,\n    \"nom\": \"Grand Popo\",\n    \"keyword\": \"Meteomomgra\"\n  },\n  {\n    \"id\": 147,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"Meteomomlok\"\n  },\n  {\n    \"id\": 148,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"Meteolitcot\"\n  },\n  {\n    \"id\": 149,\n    \"nom\": \"Bassila\",\n    \"keyword\": \"Meteodonbas\"\n  },\n  {\n    \"id\": 150,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"Meteodondjo\"\n  },\n  {\n    \"id\": 151,\n    \"nom\": \"Aplahoué\",\n    \"keyword\": \"Meteocouapl\"\n  },\n  {\n    \"id\": 152,\n    \"nom\": \"Dogbo-Tota\",\n    \"keyword\": \"Meteocoudog\"\n  },\n  {\n    \"id\": 153,\n    \"nom\": \"Dassa-Zoumè\",\n    \"keyword\": \"Meteocoldas\"\n  },\n  {\n    \"id\": 154,\n    \"nom\": \"Savalou\",\n    \"keyword\": \"Meteocolsav\"\n  },\n  {\n    \"id\": 155,\n    \"nom\": \"Savé\",\n    \"keyword\": \"Meteocolsave\"\n  },\n  {\n    \"id\": 156,\n    \"nom\": \"Bembéréké\",\n    \"keyword\": \"Meteoborgou\"\n  },\n  {\n    \"id\": 157,\n    \"nom\": \"N'Dali\",\n    \"keyword\": \"Meteobornda\"\n  },\n  {\n    \"id\": 158,\n    \"nom\": \"Nikki\",\n    \"keyword\": \"Meteobornik\"\n  },\n  {\n    \"id\": 159,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"Meteoborpar\"\n  },\n  {\n    \"id\": 160,\n    \"nom\": \"Tchaourou\",\n    \"keyword\": \"Meteobortch\"\n  },\n  {\n    \"id\": 161,\n    \"nom\": \"Abomey-Calavi\",\n    \"keyword\": \"Meteoatlabo\"\n  },\n  {\n    \"id\": 162,\n    \"nom\": \"Allada\",\n    \"keyword\": \"Meteoatlall\"\n  },\n  {\n    \"id\": 163,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"Meteoatloui\"\n  },\n  {\n    \"id\": 164,\n    \"nom\": \"Kérou\",\n    \"keyword\": \"Meteoataker\"\n  },\n  {\n    \"id\": 165,\n    \"nom\": \"Kouandé\",\n    \"keyword\": \"Meteoatakou\"\n  },\n  {\n    \"id\": 166,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"Meteoatakou\"\n  },\n  {\n    \"id\": 167,\n    \"nom\": \"Tanguiéta\",\n    \"keyword\": \"Meteoatatan\"\n  },\n  {\n    \"id\": 168,\n    \"nom\": \"Banikoara\",\n    \"keyword\": \"Meteoaliban\"\n  },\n  {\n    \"id\": 169,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"Meteoalikan\"\n  },\n  {\n    \"id\": 170,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"Meteoalimal\"\n  },\n  {\n    \"id\": 171,\n    \"nom\": \"Segbana\",\n    \"keyword\": \"Meteoaliseg\"\n  },\n  {\n    \"id\": 172,\n    \"nom\": \"Banikoara\",\n    \"keyword\": \"Clialiban\"\n  },\n  {\n    \"id\": 173,\n    \"nom\": \"Kandi\",\n    \"keyword\": \"Clialikan\"\n  },\n  {\n    \"id\": 174,\n    \"nom\": \"Malanville\",\n    \"keyword\": \"Clialimal\"\n  },\n  {\n    \"id\": 175,\n    \"nom\": \"Segbana\",\n    \"keyword\": \"Clialiseg\"\n  },\n  {\n    \"id\": 176,\n    \"nom\": \"Kerou\",\n    \"keyword\": \"Cliataker\"\n  },\n  {\n    \"id\": 177,\n    \"nom\": \"Kouande\",\n    \"keyword\": \"Cliatakou\"\n  },\n  {\n    \"id\": 178,\n    \"nom\": \"Natitingou\",\n    \"keyword\": \"Cliatanat\"\n  },\n  {\n    \"id\": 179,\n    \"nom\": \"Tanguieta\",\n    \"keyword\": \"Cliatatan\"\n  },\n  {\n    \"id\": 180,\n    \"nom\": \"Abomey Calavi\",\n    \"keyword\": \"Cliatlabo\"\n  },\n  {\n    \"id\": 181,\n    \"nom\": \"Allada\",\n    \"keyword\": \"Cliatlall\"\n  },\n  {\n    \"id\": 182,\n    \"nom\": \"Ouidah\",\n    \"keyword\": \"Cliatloui\"\n  },\n  {\n    \"id\": 183,\n    \"nom\": \"Bemereke\",\n    \"keyword\": \"Cliborgou\"\n  },\n  {\n    \"id\": 184,\n    \"nom\": \"Ndali\",\n    \"keyword\": \"Clibornda\"\n  },\n  {\n    \"id\": 185,\n    \"nom\": \"Nikki\",\n    \"keyword\": \"Clibornik\"\n  },\n  {\n    \"id\": 186,\n    \"nom\": \"Parakou\",\n    \"keyword\": \"Cliborpar\"\n  },\n  {\n    \"id\": 187,\n    \"nom\": \"Tchaourou\",\n    \"keyword\": \"Clibortch\"\n  },\n  {\n    \"id\": 188,\n    \"nom\": \"Dassa Zoume\",\n    \"keyword\": \"Clicoldas\"\n  },\n  {\n    \"id\": 189,\n    \"nom\": \"Savalou\",\n    \"keyword\": \"Clicolsav\"\n  },\n  {\n    \"id\": 190,\n    \"nom\": \"Save\",\n    \"keyword\": \"Clicolsave\"\n  },\n  {\n    \"id\": 191,\n    \"nom\": \"Aplahoue\",\n    \"keyword\": \"Clicouapl\"\n  },\n  {\n    \"id\": 192,\n    \"nom\": \"Dogbo Tota\",\n    \"keyword\": \"clicoudog\"\n  },\n  {\n    \"id\": 193,\n    \"nom\": \"Bassila\",\n    \"keyword\": \"Clidonbas\"\n  },\n  {\n    \"id\": 194,\n    \"nom\": \"Djougou\",\n    \"keyword\": \"Clidondjo\"\n  },\n  {\n    \"id\": 195,\n    \"nom\": \"Cotonou\",\n    \"keyword\": \"Clilitcot\"\n  },\n  {\n    \"id\": 196,\n    \"nom\": \"Athieme\",\n    \"keyword\": \"Climomath\"\n  },\n  {\n    \"id\": 197,\n    \"nom\": \"Comes\",\n    \"keyword\": \"Climomcom\"\n  },\n  {\n    \"id\": 198,\n    \"nom\": \"Grand popo\",\n    \"keyword\": \"Climomgra\"\n  },\n  {\n    \"id\": 199,\n    \"nom\": \"Lokossa\",\n    \"keyword\": \"Climomlok\"\n  },\n  {\n    \"id\": 200,\n    \"nom\": \"Porto Novo\",\n    \"keyword\": \"Cliouepor\"\n  },\n  {\n    \"id\": 201,\n    \"nom\": \"Ketou\",\n    \"keyword\": \"Cliplaket\"\n  },\n  {\n    \"id\": 202,\n    \"nom\": \"Pobe\",\n    \"keyword\": \"Cliplapob\"\n  },\n  {\n    \"id\": 203,\n    \"nom\": \"Sakete\",\n    \"keyword\": \"Cliplasak\"\n  },\n  {\n    \"id\": 204,\n    \"nom\": \"Abomey\",\n    \"keyword\": \"Clizouabo\"\n  },\n  {\n    \"id\": 205,\n    \"nom\": \"Bohicon\",\n    \"keyword\": \"Clizouboh\"\n  },\n  {\n    \"id\": 206,\n    \"nom\": \"Cove\",\n    \"keyword\": \"Clizoucov\"\n  }\n];\nkeywords.forEach(function(item) {\n\n\t$.send('output',item);\n});"
				},
				"x": 467.2222900390625,
				"y": 498.4028549194336,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aw91un",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqvxzo": {
				"id": "il0aqvxzo",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'http://213.246.36.116/kiosquesmsmoovbn/kiosque_ussd_recu.php';\nopt.query = { msisdn : '22652133010', ussd : 702 , keyword : data.keyword };\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.table = 'sousmenu3s';\n\tp.id = data.id;\n\tp.nom = data.nom;\n\tp.keyword = data.keyword;\n\tp.result = res.body;\n\t$.send('output', {data : p});\n\n}\nREQUEST(opt);"
				},
				"x": 1140.2084350585938,
				"y": 316.52782440185547,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqw09z": {
				"id": "il0aqw09z",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'http://213.246.36.116/kiosquesmsmoovbn/kiosque_ussd_recu.php';\nopt.query = { msisdn : '22652133010', ussd : 702 , keyword : data.keyword };\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.table = 'sousmenu4s';\n\tp.id = data.id;\n\tp.nom = data.nom;\n\tp.keyword = data.keyword;\n\tp.result = res.body;\n\t$.send('output', {data : p});\n\n}\nREQUEST(opt);"
				},
				"x": 1196.5625610351562,
				"y": 510.45140838623047,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqxciw": {
				"id": "il0aqxciw",
				"config": {
					"collection": "kiosque_test",
					"method": "insert",
					"addid": false
				},
				"x": 1448.507080078125,
				"y": 378.4722557067871,
				"component": "cl09vtgcu",
				"connections": {
					"output": [
						{
							"id": "il0aqz8ai",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqz8ai": {
				"id": "il0aqz8ai",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1729.58349609375,
				"y": 296.7361373901367,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il0avjos4": {
				"id": "il0avjos4",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 49.9305419921875,
				"y": 384.9305953979492,
				"component": "ckwuq9mxs",
				"connections": {
					"output": [
						{
							"id": "il09uo4sb",
							"index": "input"
						},
						{
							"id": "il0aqv4tl",
							"index": "input"
						},
						{
							"id": "il0aqvaf9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aw91un": {
				"id": "il0aw91un",
				"config": {
					"delay": 500
				},
				"x": 729.1667633056641,
				"y": 294.1666793823242,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "il0aqumnz",
							"index": "input"
						},
						{
							"id": "il0aqvxzo",
							"index": "input"
						},
						{
							"id": "il0aqw09z",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il158dqlm": {
				"id": "il158dqlm",
				"config": {
					"outputs": 1,
					"code": "F.Child.exec('pm2 -h',function(err,stdout,stderr){\n\n\t\t\terr && $.send('output',err);\n\t\t\tstdout && $.send('output',stdout);\n\t\t\tstderr && $.send('output',stderr);\n\n\t\t\t });"
				},
				"x": 725.8681030273438,
				"y": 687.9861450195312,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il158ehc9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il158e6q1": {
				"id": "il158e6q1",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": true,
					"interval": 4000
				},
				"x": 294,
				"y": 725,
				"component": "ckx4uquo8",
				"connections": {
					"output": [
						{
							"id": "il158dqlm",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "AcgDevs",
					"name": "Trigger2",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"paused": {
				"input__il09uo4sb__input": 1,
				"input__il0aqumnz__input": 1,
				"input__il0aqw09z__input": 1,
				"input__il0aqvaf9__input": 1
			},
			"il158ehc9": {
				"id": "il158ehc9",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1029.9652709960938,
				"y": 761.979248046875,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			}
		},
		"variables": {
			"api_key": "eXOv8YQzPrtdesCF",
			"api_secret": "9dCd3fFKo22cGq9VnYrwXh6MJz0X2CCb",
			"competition_id": "370",
			"fixtures": "https://livescore-api.com/api-client/fixtures/matches.json",
			"fixture_time": "05:30",
			"live_score": "https://livescore-api.com/api-client/scores/live.json",
			"events": "https://livescore-api.com/api-client/scores/events.json",
			"morningprogram": "07:45"
		},
		"sources": {},
		"origin": "http://178.170.47.215:8000",
		"dtcreated": "2022-03-02T17:40:56.603Z",
		"size": 170744,
		"variables2": {}
	},
	"fnwr0001de41d": {
		"paused": true,
		"id": "fnwr0001de41d",
		"reference": "",
		"author": "Afric Consuting Group",
		"group": "ServiceFoot",
		"icon": "fa fa-horse-head",
		"color": "#EB73F8",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Horoscope",
		"components": {
			"ckwuq8pg8": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq8zek": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuq94cc": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq96qg": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq98l4": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9eu4": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9how": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<div>\n\n\t\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</div>\n\n\t</header>\n</body>",
			"ckwuq9mxs": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckwuq9pk8": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuq9rvk": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"ckwuq9u6w": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"ckwuqa354": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"ckwuqa4rg": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ckwuqaml4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Peter Širka';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['cheerio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<style>\n\n\t.code_header{ color : #fff; background-color :#041EF5;}\n\theader > .fa{color : #fff!important;}\n</style>\n\n<body>\n\t<header class=\"code_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqao7g": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqaqzg": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqau2k": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqax8g": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb00g": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb1xw": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb3y4": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"ckwuqbayw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbco0": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbgws": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbj84": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"ckwuqbljg": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqboe8": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckx4tdfco": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\t\tvar id;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\n\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(instance.trigger(), config.interval);\n\t\t};\n\t\tconfig.restart && setTimeout(() => instance.configure(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckx4uquo8": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Louis Bertson';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.trigger_header{ color : #fff; background-color :#E8357E;}\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header class=\"trigger_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"ckx6c55dg": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, {id : 'row',name : 'Input data'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', res);\n\t\t\t\t\t\t$.send('row', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckxa3c034": "<script total>\n\n\texports.name = 'FootballSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id : 'output', name: 'Output' },\n\t\t\t\t\t   { id : 'notstarted', name : 'NOT STARTED'},\n\t\t\t\t\t   { id : 'inplay', name : 'IN PLAY'},\n\t\t\t\t\t   { id : 'halftimebreak', name : 'HALF TIME BREAK' },\n\t\t\t\t\t   { id : 'addedtime', name : 'ADDED TIME'},\n\t\t\t\t\t   { id : 'finished' , name : 'FINISHED'},\n\t\t\t\t\t   { id : 'unsufficientdata' , name : 'UNSUFFICIENT'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"ckxa9ds4s": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tif(matchs.length === 0 ){\n\t\t\t\t$.send('default', 'Config last update. '+ NOW.format('HH:mm'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.switch_header{ color : #fff; background-color :#8C42F6;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"switch_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxcuhcds": "<script total>\n\n\texports.name = 'MatchEventSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'goal', name: 'GOAL' },\n\t\t\t\t\t\t{ id: 'goalpenalty', name: 'GOAL_PENALTY' },\n\t\t\t\t\t\t{ id: 'owngoal', name: 'OWN_GOAL' },\n\t\t\t\t\t\t{ id: 'yellowcard', name: 'YELLOW_CARD' },\n\t\t\t\t\t\t{ id: 'redcard', name: 'RED_CARD' },\n\t\t\t\t\t\t{ id: 'missedpenalty', name: 'MISSED_PENALTY' },\n\t\t\t\t\t\t{ id: 'substitution', name: 'SUBSTITUTION' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'yellowredcard', name: 'YELLOW_RED_CARD' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar event = $.data;\n\n\t\t\t\tswitch(event.event){\n\t\t\t\t\tcase 'GOAL'\t :\n\t\t\t\t\t\t$.send('goal', event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'GOAL_PENALTY' :\n\t\t\t\t\t\t$.send('goalpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'OWN_GOAL' :\n\t\t\t\t\t\t$.send('owngoal',event);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YELLOW_CARD' :\n\t\t\t\t\t\t$.send('yellowcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RED_CARD':\n\t\t\t\t\t\t$.send('redcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ' YELLOW_RED_CARD' :\n\t\t\t\t\t\t$.send('yellowredcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'MISSED_PENALTY' :\n\t\t\t\t\t\t$.send('missedpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SUBSTITUTION' :\n\t\t\t\t\t\t$.send('substitution',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',event);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n```\t\t[\n\t\t\t{\n                \"id\": \"10509914\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"5\",\n                \"event\": \"GOAL\",\n                \"sort\": \"0\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509915\",\n                \"match_id\": \"129180\",\n                \"player\": \"MARIAPPA ADRIAN\",\n                \"time\": \"13\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"1\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509916\",\n                \"match_id\": \"129180\",\n                \"player\": \"CAPOUE ETIENNE\",\n                \"time\": \"60\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"2\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509917\",\n                \"match_id\": \"129180\",\n                \"player\": \"DOUCOURE ABDOULAYE\",\n                \"time\": \"61\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"3\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509918\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"62\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"4\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10510529\",\n                \"match_id\": \"129180\",\n                \"player\": \"VARDY JAMIE\",\n                \"time\": \"75\",\n                \"event\": \"GOAL\",\n                \"sort\": \"5\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10510974\",\n                \"match_id\": \"129180\",\n                \"player\": \"PEREIRA RICARDO\",\n                \"time\": \"84\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"6\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10511398\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"GOAL\",\n                \"sort\": \"7\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10511625\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"8\",\n                \"home_away\": \"h\"\n            }\n        ],\n        \"match\": {\n            \"id\": \"129180\",\n            \"date\": \"2019-03-03\",\n            \"home_name\": \"Watford\",\n            \"away_name\": \"Leicester City\",\n            \"score\": \"2 - 1\",\n            \"ht_score\": \"1 - 0\",\n            \"ft_score\": \"2 - 1\",\n            \"et_score\": \"\",\n            \"time\": \"FT\",\n            \"league_id\": \"25\",\n            \"status\": \"FINISHED\",\n            \"added\": \"2019-03-03 11:55:12\",\n            \"last_changed\": \"2019-03-03 13:58:04\",\n            \"home_id\": \"11\",\n            \"away_id\": \"6\",\n            \"competition_id\": \"2\",\n            \"location\": null,\n            \"fixture_id\": null,\n            \"scheduled\": null,\n            \"home\": {\n                \"id\": \"11\",\n                \"name\": \"Watford\",\n                \"stadium\": \"Vicarage Road Stadium\",\n                \"location\": \"Vicarage Road Stadium\"\n            },\n            \"away\": {\n                \"id\": \"6\",\n                \"name\": \"Leicester City\",\n                \"stadium\": \"King Power Stadium\",\n                \"location\": \"King Power Stadium\"\n            },\n            \"competition\": {\n                \"id\": \"2\",\n                \"name\": \"Premier League\"\n            }\n        }\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.event_header{ color : #fff; background-color :#171717;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxfxgv70": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ckxfxgza8": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl09vtgcu": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\tnosql.insert(data.data,true).where('id',data.id).callback(function(err) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tif (!data.filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl09vtmi7": "<script total>\n\n\texports.name = 'MongoDB Insert';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\n\t\tvar MONGO;\n        var COLS = {};\n\n\t\tinstance.message = async function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar result = {\n\t\t\t\tdata: data.data\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (data.data instanceof Array)\n\t\t\t\t\tresult.response = await COLS[id].insertMany(data.data, data.options);\n\t\t\t\telse\n\t\t\t\t\tresult.response = await COLS[id].insertOne(data.data, data.options);\n\n\t\t\t\tconsole.log('insertedId', typeof(result.response.insertedId))\n\t\t\t} catch(e) {\n\t\t\t\tresult = { error: e };\n\t\t\t}\n\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (config.string)\n\t\t\t\tconfig.connection = config.string;\n\n\t\t\tif (!config.connection)\n\t\t\t\treturn instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === config.connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[config.connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[config.connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tMONGO = REPO.mongodb[config.connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\n\t\t\tconsole.log(instance.main.instances());\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: { ... },  // data to insert, object for `insertOne` and an array of objects for `insertMany`\n\toptions: { ... }// insert options as passed to `insertOne(data, options)` or `insertMany(data, options)`\n}\n```\n\n</readme>\n<script>\n\tON('configure_mongodbinsert', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<div data---=\"input__?.string__dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t<div data---=\"input__?.name\" class=\"m b\">Connection name</div>\n\t\t\t\t<div data---=\"input__?.connection\" class=\"b\">Connection string (without the database name)</div>\n\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"STATUS.state__text\"></span>\n\t</footer>\n</body>",
			"cl09vtoi1": "<script total>\n\n\texports.name = 'MongoDB Insert';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\n\t\tvar MONGO;\n        var COLS = {};\n\n\t\tinstance.message = async function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar result = {\n\t\t\t\tdata: data.data\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (data.data instanceof Array)\n\t\t\t\t\tresult.response = await COLS[id].insertMany(data.data, data.options);\n\t\t\t\telse\n\t\t\t\t\tresult.response = await COLS[id].insertOne(data.data, data.options);\n\n\t\t\t\tconsole.log('insertedId', typeof(result.response.insertedId))\n\t\t\t} catch(e) {\n\t\t\t\tresult = { error: e };\n\t\t\t}\n\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (config.string)\n\t\t\t\tconfig.connection = config.string;\n\n\t\t\tif (!config.connection)\n\t\t\t\treturn instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === config.connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[config.connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[config.connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tMONGO = REPO.mongodb[config.connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\n\t\t\tconsole.log(instance.main.instances());\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: { ... },  // data to insert, object for `insertOne` and an array of objects for `insertMany`\n\toptions: { ... }// insert options as passed to `insertOne(data, options)` or `insertMany(data, options)`\n}\n```\n\n</readme>\n<script>\n\tON('configure_mongodbinsert', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<div data---=\"input__?.string__dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t<div data---=\"input__?.name\" class=\"m b\">Connection name</div>\n\t\t\t\t<div data---=\"input__?.connection\" class=\"b\">Connection string (without the database name)</div>\n\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"STATUS.state__text\"></span>\n\t</footer>\n</body>"
		},
		"design": {
			"il09uo4sb": {
				"id": "il09uo4sb",
				"config": {
					"outputs": 1,
					"code": "// set the daylly time when to start the process;\nvar time = '15:30';\nvar time_now = new Date().format('HH:mm');\nif (  time == time_now ){\n}\n\t$.send('output',data);"
				},
				"x": 380.3472709655762,
				"y": 424.826416015625,
				"note": "START TIME",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0tpto6n",
							"index": "input"
						},
						{
							"id": "il0tyssxl",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqumnz": {
				"id": "il0aqumnz",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'http://213.246.36.116/kiosquesmsmoovbn/kiosque_ussd_recu.php';\nopt.query = { msisdn : '22652133010', ussd : 702 , keyword : data.keyword };\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.table = 'sousmenu2s';\n\tp.id = data.id;\n\tp.nom = data.nom;\n\tp.keyword = data.keyword;\n\tp.result = res.body;\n\t$.send('output', {data : p});\n\n}\nREQUEST(opt);"
				},
				"x": 1357.6389770507812,
				"y": 347.5347595214844,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqvxzo": {
				"id": "il0aqvxzo",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'http://213.246.36.116/kiosquesmsmoovbn/kiosque_ussd_recu.php';\nopt.query = { msisdn : '22652133010', ussd : 702 , keyword : data.keyword };\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.table = 'sousmenu3s';\n\tp.id = data.id;\n\tp.nom = data.nom;\n\tp.keyword = data.keyword;\n\tp.result = res.body;\n\t$.send('output', {data : p});\n\n}\nREQUEST(opt);"
				},
				"x": 1351.666748046875,
				"y": 473.12506103515625,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqw09z": {
				"id": "il0aqw09z",
				"config": {
					"outputs": 1,
					"code": "data.forEach(function(item) {\n\tvar form = {};\n\tform.an = item[0];\n\tform.mois = item[1];\n\tform.jour = item[2];\n\t$.send('output',{ date : item.join('-'),form : form});\n});"
				},
				"x": 1346.1111450195312,
				"y": 617.8820495605469,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						},
						{
							"id": "il0twzwyp",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqxciw": {
				"id": "il0aqxciw",
				"config": {
					"addid": false,
					"method": "insert",
					"collection": "kiosque_test"
				},
				"x": 1662.9862060546875,
				"y": 403.71533203125,
				"component": "cl09vtgcu",
				"connections": {
					"output": [
						{
							"id": "il0aqz8ai",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqz8ai": {
				"id": "il0aqz8ai",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1729.58349609375,
				"y": 296.7361373901367,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il0avjos4": {
				"id": "il0avjos4",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 142.81250762939453,
				"y": 412.8472900390625,
				"component": "ckwuq9mxs",
				"connections": {
					"output": [
						{
							"id": "il09uo4sb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tpto6n": {
				"id": "il0tpto6n",
				"config": {
					"outputs": 1,
					"code": "Date.prototype.addDays = function(days) {\n    var date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\nfunction getDates(startDate, stopDate) {\n    var dateArray = new Array();\n    var currentDate = startDate;\n    while (currentDate <= stopDate) {\n        dateArray.push(new Date (currentDate).format('yyyy-M-d').split('-'));\n        currentDate = currentDate.addDays(1);\n    }\n    return dateArray;\n}\n\nvar dateArray = getDates(new Date(), (new Date()).add('21 months').add('15 days'));\n//var dateArray = getDates(new Date(), (new Date()).add('2 days'));\n\n$.send('output',dateArray);"
				},
				"x": 650.9376220703125,
				"y": 509.93060302734375,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0u1ez7i",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tw7msf": {
				"id": "il0tw7msf",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3601.5,
				"y": 424.125,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il0twzwyp": {
				"id": "il0twzwyp",
				"config": {
					"delay": 500
				},
				"x": 1780.173828125,
				"y": 637.6389465332031,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "il0txazt9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0txazt9": {
				"id": "il0txazt9",
				"config": {
					"outputs": 1,
					"code": "for (var i = 0; i < 12; i++){\n\tprocess(data,i, function(output) {\n\t$.send('output',output);\n\n\t})\n}\nfunction process(data,i, callback) {\n\ti += 1;\n\tvar form = U.clone(data.form);\n\tform.sign = i ;\n\n\tvar output = { data : { id : data.date + ' '+ i , date : data.date,form : form }};\n\tcallback(output)\n}"
				},
				"x": 2049.89599609375,
				"y": 597.638916015625,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0ty1fyq",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0ty1fyq": {
				"id": "il0ty1fyq",
				"config": {
					"delay": 1000
				},
				"x": 2485.347412109375,
				"y": 492.5347595214844,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "il0tzfxg2",
							"index": "input"
						},
						{
							"id": "il0u1hnth",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tyssxl": {
				"id": "il0tyssxl",
				"config": {
					"outputs": 1,
					"code": "F.restart();"
				},
				"x": 620.9722900390625,
				"y": 644.9653244018555,
				"component": "ckwuqaml4",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tzfxg2": {
				"id": "il0tzfxg2",
				"config": {
					"addid": true,
					"method": "insert",
					"collection": "horoscopes"
				},
				"x": 2834.9654541015625,
				"y": 708.9931335449219,
				"component": "cl09vtgcu",
				"connections": {},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0u1ez7i": {
				"id": "il0u1ez7i",
				"config": {
					"delay": 1000
				},
				"x": 954.9306030273438,
				"y": 539.9306030273438,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "il0aqw09z",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0u1hnth": {
				"id": "il0u1hnth",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'https://www.asiaflash.com/horoscope/parjour_365_jours.php';\nopt.method = 'POST';\nopt.data = data.data;\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.id = data.data.id;\n\tp.result = res.body;\n\t$.send('output', p);\n\n}\nREQUEST(opt);"
				},
				"x": 2972.882080078125,
				"y": 431.9792022705078,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0utt39d",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0utt39d": {
				"id": "il0utt39d",
				"config": {
					"outputs": 1,
					"code": "var cheerio = require('cheerio');\nvar JQuery = cheerio.load(data.result);\nvar titre = JQuery('.af_rubrique .af_align_center .af_titre2').text();\n$.send('output','cool');"
				},
				"x": 3240,
				"y": 416,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0tw7msf",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"paused": {
				"input__il0aqumnz__input": 1,
				"input__il0aqvxzo__input": 1,
				"input__il0aqxciw__input": 1,
				"input__il0tyssxl__input": 1,
				"input__il0tzfxg2__input": 1
			}
		},
		"variables": {
			"api_key": "eXOv8YQzPrtdesCF",
			"api_secret": "9dCd3fFKo22cGq9VnYrwXh6MJz0X2CCb",
			"competition_id": "370",
			"fixtures": "https://livescore-api.com/api-client/fixtures/matches.json",
			"fixture_time": "05:30",
			"live_score": "https://livescore-api.com/api-client/scores/live.json",
			"events": "https://livescore-api.com/api-client/scores/events.json",
			"morningprogram": "07:45"
		},
		"sources": {},
		"origin": "http://192.168.0.171:8000",
		"dtcreated": "2022-03-16T15:12:05.066Z",
		"size": 130395,
		"variables2": {}
	},
	"fp0fe001aj41d": {
		"paused": true,
		"id": "fp0fe001aj41d",
		"reference": "",
		"author": "",
		"group": "API Mise a jour",
		"icon": "fa fa-cloud-rain",
		"color": "#61C83B",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Météo",
		"components": {
			"cl155eca6": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Alain Guigma';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.trigger_header{ color : #fff; background-color :#E8357E;}\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header class=\"trigger_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"cl155f3k4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl155fspr": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"cl155fv1e": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155fx4p": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl155fzkh": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g242": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g48l": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g6f2": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g8bk": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gb4z": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gcq2": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"cl155geu5": "<script total>\n\n\texports.name = 'Telemetry';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-rss-square';\n\texports.author = 'Martin Smola';\n\texports.config = { paths: {}, interval: null }; // { name, path }\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tvar last = { items: [] };\n\t\tvar interval;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tconst data = { items: [] };\n\t\t\tconst paths = config.paths;\n\n\t\t\tfor (const path in paths)\n\t\t\t\tdata.items.push({ key: path, value: get($.data, paths[path]) || '' });\n\n\t\t\tif (!interval)\n\t\t\t\tinstance.status(data);\n\t\t\telse\n\t\t\t\tlast = data;\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status({ items: [] });\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tclearInterval(interval);\n\t\t\tif (config.interval) {\n\t\t\t\tinterval = setInterval(() => instance.status(last), config.interval);\n\t\t\t} else\n\t\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.close = () => clearInterval(interval);\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .telemetry-item > span { float: right; font-size: 14px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component shows data in a template.\nAssuming this incomming data:\n```javascript\n{\n\tspeed: 1,\n\tnested: { value: 2 },\n\tarray: [{ value: 3 }]\n}\n```\nThe paths bust be defined as:\n```\nspeed         // -> 1\nnested.value  // -> 2\narray.0.value // -> 3\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.interval__type:number__500\">Update interval (in ms)</div>\n\t\t<div class=\"help m\">Leave empty to update immediately when new data comes in.</div>\n\t\t<div data---=\"keyvalue__?.paths__placeholderkey:Type a property name;placeholdervalue:Type a path and press enter\">Properties to show in the template</div>\n\t\t<div class=\"help\">Path supports js dot notation like `data.arr.0.value`, following is not supported `data.arr[0].value`</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\" class=\"\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{foreach item in value.items}}\n\t\t\t\t\t<div class=\"telemetry-item\"><b class=\"mr5\">{{item.key}}:</b><span>{{item.value}}</span></div>\n\t\t\t\t{{end}}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155ghmg": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"cl155gk2e": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gpeu": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155grjw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155wjan": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl156bs2c": "<script total>\n\n\texports.name = 'DBMS';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Alain Guigma';\n\texports.config = { url: '',collection: '', method: 'query' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\texports.make = function(instance, config) {\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\t\tinstance.message = function($) {\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!config.collection) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\tvar data = $.data;\n\t\t\t\trequire('dbms').init(config.url,ERROR('DBMS'));\n\t\t\t\tDBMS.measure && DBMS.measure(true);\n\t\t\t\tvar dbms = DBMS();\n\t\t\t\tvar builder\n\t\t\t\tvar method = config.method.toLowerCase();\n\t\t\t\tswitch (method) {\n\t\t\t\t\tcase 'read':\n\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t\tif (data.params.id)\n\t\t\t\t\t\t\t\tdata.id = data.params.id;\n\t\t\t\t\t\t\tif (!data.id) {\n\t\t\t\t\t\t\t\tdata = { err: '[DB] Cannot get record by id: `undefined`' };\n\t\t\t\t\t\t\t\t$.send('error', data);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuilder = dbms.read(config.collection);\n\t\t\t\t\t\t\tbuilder.where('id', data.id);\n\t\t\t\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdata = { response: response };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'query':\n\t\t\t\t\tbuilder = dbms.list(config.collection);\n\t\t\t\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdata = { response: response };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'insert':\n\t\t\t\t\t\tdbms.add(config.collection,data).callback(function(err) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { success: err ? false : true, id: $.data.id };\n\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'remove':\n\t\t\t\t\t\tdbms.remove(config.collection).where('id',data.id).callback(function(err,count) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { response: count || 0 };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'update':\n\t\t\t\t\t\tdbms.remove(config.collection,data).where('id',data.id).callback(function(err,count) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { response: count || 0 };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\tconsole.log(method);\n\t\t\t\t}\n\t\t};\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component creates a HTTP request. Incoming data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:QUERY|query,READ|read,INSERT|insert,UPDATE|update,DELETE|remove\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-5 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>Url de connection</b></div>\n\n\t\t\t</div>\n\t\t\t<div class=\"col-md-5 m\">\n\t\t\t\t<div data---=\"input__?.collection__required:1\"><b>Collection</b></div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<hr class=\"nmt nmb\" />\n\n</settings>",
			"cl156cxle": "<script total>\n\texports.name = 'GoogleSearch';\n\texports.icon = 'fab fa-google';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['google-it'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\t// retrieve search keyword\n\t\t\tvar keyword = $.data;\n\t\t\t// import google-it library\n\t\t\tvar google = require('google-it');\n\t\t\t// Set number of result per page\n\t\t\tgoogle.resultPerPage = 5;\n\t\t\t// Set language to french\n\t\t\tgoogle.lang = 'fr';\n\t\t\t// if keyword exist\n\t\t\tif (keyword){\n\t\t\t\t// Make Google Search\n\t\t\t\tgoogle({query : keyword}).then(function(response){\n\t\t\t\t\t// retrieve  links from search result and send to next component\n\t\t\t\t\t$.send('output',response.links);\n\t\t\t\t\t// $.destroy();\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"cl156e2xi": "<script total>\n\n\texports.name = 'MatchEventSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'goal', name: 'GOAL' },\n\t\t\t\t\t\t{ id: 'goalpenalty', name: 'GOAL_PENALTY' },\n\t\t\t\t\t\t{ id: 'owngoal', name: 'OWN_GOAL' },\n\t\t\t\t\t\t{ id: 'yellowcard', name: 'YELLOW_CARD' },\n\t\t\t\t\t\t{ id: 'redcard', name: 'RED_CARD' },\n\t\t\t\t\t\t{ id: 'missedpenalty', name: 'MISSED_PENALTY' },\n\t\t\t\t\t\t{ id: 'substitution', name: 'SUBSTITUTION' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'yellowredcard', name: 'YELLOW_RED_CARD' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar event = $.data;\n\n\t\t\t\tswitch(event.event){\n\t\t\t\t\tcase 'GOAL'\t :\n\t\t\t\t\t\t$.send('goal', event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'GOAL_PENALTY' :\n\t\t\t\t\t\t$.send('goalpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'OWN_GOAL' :\n\t\t\t\t\t\t$.send('owngoal',event);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YELLOW_CARD' :\n\t\t\t\t\t\t$.send('yellowcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RED_CARD':\n\t\t\t\t\t\t$.send('redcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ' YELLOW_RED_CARD' :\n\t\t\t\t\t\t$.send('yellowredcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'MISSED_PENALTY' :\n\t\t\t\t\t\t$.send('missedpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SUBSTITUTION' :\n\t\t\t\t\t\t$.send('substitution',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',event);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n```\t\t[\n\t\t\t{\n                \"id\": \"10509914\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"5\",\n                \"event\": \"GOAL\",\n                \"sort\": \"0\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509915\",\n                \"match_id\": \"129180\",\n                \"player\": \"MARIAPPA ADRIAN\",\n                \"time\": \"13\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"1\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509916\",\n                \"match_id\": \"129180\",\n                \"player\": \"CAPOUE ETIENNE\",\n                \"time\": \"60\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"2\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509917\",\n                \"match_id\": \"129180\",\n                \"player\": \"DOUCOURE ABDOULAYE\",\n                \"time\": \"61\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"3\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509918\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"62\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"4\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10510529\",\n                \"match_id\": \"129180\",\n                \"player\": \"VARDY JAMIE\",\n                \"time\": \"75\",\n                \"event\": \"GOAL\",\n                \"sort\": \"5\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10510974\",\n                \"match_id\": \"129180\",\n                \"player\": \"PEREIRA RICARDO\",\n                \"time\": \"84\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"6\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10511398\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"GOAL\",\n                \"sort\": \"7\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10511625\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"8\",\n                \"home_away\": \"h\"\n            }\n        ],\n        \"match\": {\n            \"id\": \"129180\",\n            \"date\": \"2019-03-03\",\n            \"home_name\": \"Watford\",\n            \"away_name\": \"Leicester City\",\n            \"score\": \"2 - 1\",\n            \"ht_score\": \"1 - 0\",\n            \"ft_score\": \"2 - 1\",\n            \"et_score\": \"\",\n            \"time\": \"FT\",\n            \"league_id\": \"25\",\n            \"status\": \"FINISHED\",\n            \"added\": \"2019-03-03 11:55:12\",\n            \"last_changed\": \"2019-03-03 13:58:04\",\n            \"home_id\": \"11\",\n            \"away_id\": \"6\",\n            \"competition_id\": \"2\",\n            \"location\": null,\n            \"fixture_id\": null,\n            \"scheduled\": null,\n            \"home\": {\n                \"id\": \"11\",\n                \"name\": \"Watford\",\n                \"stadium\": \"Vicarage Road Stadium\",\n                \"location\": \"Vicarage Road Stadium\"\n            },\n            \"away\": {\n                \"id\": \"6\",\n                \"name\": \"Leicester City\",\n                \"stadium\": \"King Power Stadium\",\n                \"location\": \"King Power Stadium\"\n            },\n            \"competition\": {\n                \"id\": \"2\",\n                \"name\": \"Premier League\"\n            }\n        }\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.event_header{ color : #fff; background-color :#171717;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"cl156fik0": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tif(matchs.length === 0 ){\n\t\t\t\t$.send('default', 'Config last update. '+ NOW.format('HH:mm'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.switch_header{ color : #fff; background-color :#8C42F6;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"switch_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"cl156h8wk": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156ie4d": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl156j8px": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl156k5gy": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>\n",
			"cl156kztn": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156lyyy": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156nhyy": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156ovuq": "<script total>\n\n\texports.name = 'MQTT Broker';\n\texports.icon = 'fa fa-exchange-alt';\n\texports.group = 'MQTT';\n\texports.config = { hostname: 'localhost', port: 1883, secure: false };\n\texports.outputs = [{ id: 'output', name: 'Messages' }, { id: 'error', name: 'Errors' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.npm = ['mqtt'];\n\n\texports.make = function(instance, config) {\n\n\t\tconst mqtt = require('mqtt');\n\t\tvar client;\n\n\t\tconst state = () => {\n\t\t\tvar obj;\n\t\t\tif (!client) {\n\t\t\t\tobj = { connected: false, connecting: false, disconnected: true, disconnnecting: false, status: 'disconnected' };\n\t\t\t} else {\n\t\t\t\tconst { connected, disconnecting, reconnecting } = client;\n\t\t\t\tobj = { connecting: client.stream ? client.stream.connecting : false, connected, disconnecting, reconnecting };\n\t\t\t\tconst current = Object.keys(obj).filter(s => obj[s]);\n\t\t\t\tobj.status = current.length ? current[0] : 'disconnected';\n\t\t\t}\n\n\t\t\tinstance.state = { status: obj.status, name: config.hostname + ':' + config.port };\n\t\t\tinstance.status(instance.state);\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tdisconnect(connect);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tdisconnect(NOOP);\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction disconnect(callback) {\n\t\t\tif (!client)\n\t\t\t\treturn callback && callback();\n\n\t\t\tif (client.end)\n\t\t\t\tclient.end(true, cb);\n\t\t\telse\n\t\t\t\tcb();\n\n\t\t\tfunction cb() {\n\t\t\t\tclient.removeAllListeners();\n\t\t\t\tclient = null;\n\t\t\t\tcallback && callback();\n\t\t\t};\n\t\t};\n\n\t\tfunction connect() {\n\n\t\t\tstate();\n\n\t\t\tvar broker = config.secure ? 'mqtts://' : 'mqtt://' + config.hostname + ':' + config.port;\n\n\t\t\tclient = mqtt.connect(broker, config);\n\n\t\t\tclient.on('connect', function() {\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('reconnect', function() {\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('message', function(topic, message) {\n\t\t\t\tmessage = message.toString();\n\t\t\t\tif (message[0] === '{')\n\t\t\t\t\tmessage = message.parseJSON(true);\n\n\t\t\t\tonmessage(topic, message);\n\t\t\t});\n\n\t\t\tclient.on('close', function(err) {\n\t\t\t\tif (err && err.toString().indexOf('Error')) {\n\t\t\t\t}\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('error', function(err) {\n\t\t\t\tstate();\n\t\t\t});\n\t\t};\n\n\t\tfunction onmessage(topic, message) {\n\t\t\tconsole.log('Broker.onmessage', topic, message);\n\t\t\tfor (let sub in subscribtions) {\n\t\t\t\tvar match = mqttWildcard(topic, sub);\n\t\t\t\tif (match) {\n\t\t\t\t\tfor (const comid of sub) {\n\t\t\t\t\t\tconst com = instance.main.find(comid);\n\t\t\t\t\t\tcom && com.onmessage(topic, message, match);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinstance.publish = function(topic, message, options) {\n\t\t\tconsole.log('Broker.publish', topic, message, options);\n\t\t\tclient && client.publish(topic, message, options, function(err){\n\t\t\t\tif (err)\n\t\t\t\t\tconsole.log('error', err);\n\t\t\t});\n\t\t};\n\n\t\tconst subscribtions = {};\n\n\t\tinstance.subscribe = function(componentid, topic) {\n\t\t\tvar self = this;\n\t\t\tsubscribtions[topic] = subscribtions[topic] || [];\n\t\t\tif (subscribtions[topic].indexOf(componentid) > -1)\n\t\t\t\treturn;\n\n\t\t\tconsole.log('Broker.subscribe', topic);\n\t\t\tclient.subscribe(topic);\n\t\t\tsubscribtions[topic].push(componentid);\n\t\t};\n\n\t\tinstance.unsubscribe = function(componentid, topic) {\n\t\t\tvar self = this;\n\t\t\tvar sub = subscribtions[topic];\n\t\t\tif (sub) {\n\t\t\t\tsubscribtions[topic] = sub.remove(componentid);\n\t\t\t\tclient.connected && !subscribtions[topic].length && client.unsubscribe(topic);\n\t\t\t}\n\t\t};\n\n\t\t// https://github.com/hobbyquaker/mqtt-wildcard\n\t\tfunction mqttWildcard(topic, wildcard) {\n\t\t\tif (topic === wildcard) {\n\t\t\t\treturn [];\n\t\t\t} else if (wildcard === '#') {\n\t\t\t\treturn [topic];\n\t\t\t}\n\n\t\t\tvar res = [];\n\n\t\t\tvar t = String(topic).split('/');\n\t\t\tvar w = String(wildcard).split('/');\n\n\t\t\tvar i = 0;\n\t\t\tfor (var lt = t.length; i < lt; i++) {\n\t\t\t\tif (w[i] === '+') {\n\t\t\t\t\tres.push(t[i]);\n\t\t\t\t} else if (w[i] === '#') {\n\t\t\t\t\tres.push(t.slice(i).join('/'));\n\t\t\t\t\treturn res;\n\t\t\t\t} else if (w[i] !== t[i]) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (w[i] === '#') {\n\t\t\t\ti += 1;\n\t\t\t}\n\n\t\t\treturn (i === w.length) ? res : null;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tMQTT Broker\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.hostname__placeholder:test.mosquitto.org;required:1\">Hostname</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.name }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156pxep": "<script total>\n\n\texports.name = 'MQTT Publish';\n\texports.icon = 'fa fa-sign-out';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.inputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\tvar broker = instance.main.find(config.broker);\n\t\t\tif (!broker)\n\t\t\t\treturn;\n\n\t\t\tbroker.publish($.data.topic, $.data.message);\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tvar arr = [];\n\n\t\t\tvar instances = instance.main.instances();\n\n\t\t\tinstances = instances.filter(i => i.module.name === 'MQTT Broker');\n\t\t\tfor (let com of instances)\n\t\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\t\t\tconsole.log(arr);\n\t\t\tanswer(arr);\n\t\t};\n\t};\n</script>\n\n<readme>\nMQTT Publish\n\nInput:\n```javascript\n{\n\ttopic: 'some/topic',\n\tmessage: { some: 'data' },\n\t// optional\n\toptions: {\n\t\tqos: 0|1|2,\n\t\tretain: true|false\n\t}\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer>div>div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<script>\n\tON('configure_mqttpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\"\n\t\t\t\t\tclass=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156qoz3": "<script total>\n\n\texports.name = 'MQTT Subscribe';\n\texports.icon = 'fa fa-sign-in';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.outputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar subscribed = false;\n\t\tvar broker, topic;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscribe(instance.id, topic);\n\n\t\t\ttopic = config.topic;\n\n\t\t\tinstance.status({ status: 'Not configured', topic });\n\t\t\tbroker = instance.main.find(config.broker);\n\n\t\t\tif (broker) {\n\t\t\t\tbroker.subscribe(instance.id, topic);\n\t\t\t\tsubscribed = true;\n\t\t\t\tinstance.status({ status: 'Subscribed', topic });\n\t\t\t} else {\n\t\t\t\tinstance.status({ status: 'Broker not found', topic });\n\t\t\t}\n\t\t};\n\n\t\tinstance.onmessage = function(topic, message, match) {\n\t\t\tinstance.send('message', { topic, message, match });\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscibe(instance.id, topic);\n\t\t};\n\n\t\tsetTimeout(instance.configure, 2000);\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tvar arr = [];\n\n\t\t\tvar instances = instance.main.instances();\n\n\t\t\tinstances = instances.filter(i => i.module.name === 'MQTT Broker');\n\t\t\tfor (let com of instances)\n\t\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\n\t\t\tanswer(arr);\n\t\t};\n\t};\n</script>\n\n<readme>\nMQTT Subscribe\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<script>\n\tON('configure_mqttsubscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\" class=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.topic__placeholder:devices/status;required:1\" class=\"m\"><b>Topic</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<p>\n\t\t\t\t\t<b>The topic supports wildcards like:</b><br>\n\t\t\t\t\t- devices/+/status -> devices/1/status or devices/123456/status etc.<br>\n\t\t\t\t\t- devices/#        -> any topic begining with devices/.......\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t\t<div><b>{{ value.topic }}</b>Topic</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156rfye": "<script total>\n\texports.name = 'RPIgpio';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['rpi-gpio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar RPI = require('rpi-gpio');\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet bit = $.data;\n\n\t\t\tif (config.read_write && config.gpiokey) {\n\n\t\t\t\tswitch (config.read_write) {\n\t\t\t\t\tcase 'write':\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\n\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tcase 'read':\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\n\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.destroy();\n\n\t\t};\n\t};\n</script>\n\n<readme>\n# GPIO\n\n__Write mode__:\n\n- Select the GPIO you want\n- Set the read/write option to write\n- Send true to the component to set the GPIO to HIGH\n- Send false to the component to set the GPIO to LOW\n\n__Read mode__:\n\n- Select the GPIO you want\n- Set the read/write option to write\n- Send true to the node so read the state of the gpio\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\n\t</header>\n</body>",
			"cl156shpm": "<script total>\n\n\texports.name = 'RPIgpioPWM';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['rpi-gpio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar RPI = require('rpi-gpio');\n\n\t\tvar handler = function(duration) {\n\t\t\tinstance.pwmHandlerCount++;\n\t\t\tif (instance.pwmHandlerCount < duration * 10) {\n\t\t\t\tRPI.write(config.gpiokey, true, function(err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t});\n\t\t\t} else if (instance.pwmHandlerCount < 10) {\n\t\t\t\tRPI.write(config.gpiokey, false, function(err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.pwmHandlerCount = -1;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (config.gpiokey) {\n\t\t\t\tlet duration = $.data ? parseFloat($.data) : 0.0;\n\t\t\t\tinstance.pwmHandler && clearInterval(instance.pwmHandler);\n\t\t\t\tinstance.pwmHandlerCount = -1;\n\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE)\n\t\t\t\t$.send('output', { pin: config.gpiokey, value: duration });\n\t\t\t\tif (duration != 0.0)\n\t\t\t\t\tinstance.pwmHandler = setInterval(handler, 10, duration);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinstance.pwmHandler && clearInterval(instance.pwmHandler);\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# GPIO PWM\n\n- send number with the uptime duration to the component.\n- 0 (zero) is 0%\n- 1 (one) is 100%.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry GPIO PWM\n\t</header>\n</body>",
			"cl156u0qn": "<script total>\n\texports.name = 'RPIi2cRead';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar BCD2D = function(Wert) {\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar i2c1 = I2C.openSync(1);\n\n\t\t\tif (config.presensor) {\n\t\t\t\tswitch (config.sensor) {\n\t\t\t\t\tcase 'DS1307':\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\n\n\t\t\t\t//send msg\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\n\t\t\t\t$.send('output', rbuf.toString());\n\t\t\t}\n\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Read\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `readLength`: The length of how many bits will be read\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\n\t\t</div>\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\n\t</header>\n</body>",
			"cl156xrgb": "<script total>\n\texports.name = 'RPIi2cRead';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar BCD2D = function(Wert) {\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar i2c1 = I2C.openSync(1);\n\n\t\t\tif (config.presensor) {\n\t\t\t\tswitch (config.sensor) {\n\t\t\t\t\tcase 'DS1307':\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\n\n\t\t\t\t//send msg\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\n\t\t\t\t$.send('output', rbuf.toString());\n\t\t\t}\n\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Read\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `readLength`: The length of how many bits will be read\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\n\t\t</div>\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\n\t</header>\n</body>",
			"cl1571l5w": "<script total>\n\texports.name = 'RPIi2cWrite';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar stringtonumber = c => parseInt(c);\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet address, register, bytes;\n\n\t\t\ttry {\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\n\t\t\t} catch (err) {\n\t\t\t\t$.send('output', err + '');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Send msg\n\t\t\tlet i2c1 = I2C.openSync(1);\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\n\t\t\t$.send('output', { data: bytes });\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Write\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `bytes`: The bytes which will be written\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.address\">Address</div>\n\t\t<div data---=\"input__?.register\">Register</div>\n\t\t<div data---=\"input__?.bytes\">Data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\n\t</header>\n</body>",
			"cl1573cau": "<script total>\n\texports.name = 'RPIuart';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = { port:'/dev/ttyUSB0' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['serialport'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar SerialPort = require('serialport')\n\t\tvar sp;\n\n\t\tinstance.openConnectionUart = function(){\n\n\t\t\tsp = new SerialPort(config.port, {\n\t\t\t\tbaudRate: parseInt(config.baudrate),\n\t\t\t\tdataBits: parseInt(config.databits),\n\t\t\t\tparity: config.parity,\n\t\t\t\tstopBits: parseInt(config.stopbits),\n\t\t\t\tflowControl: false,\n\t\t\t\tautoOpen: false\n\t\t\t});\n\n\t\t\tsp.on('open', function() {\n\t\t\t\tinstance.status({ open: true });\n\t\t\t});\n\n\t\t\tsp.on('close', function() {\n\t\t\t\tinstance.status({ open: false });\n\t\t\t});\n\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\n\t\t\t\tinstance.send('output', data);\n\t\t\t});\n\n\t\t\tsp.open(function (err) {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\n\t\t\t});\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet bytes = $.data;\n\n\t\t\t//check if sp is open\n\t\t\tif (!sp)\n\t\t\t\tinstance.openConnectionUart();\n\n\t\t\t//send msg\n\t\t\tsp.write(bytes);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tsp && sp.close(NOOP);\n\t\t}\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n</style>\n\n<readme>\n# UART\n\n- send a string directly to a port\n- when device from a port sends data to the host, it will be send to the output of the component\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200||115200,128000|128000;required:1\">Baudrate</div>\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry UART\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\n\t\t\t{{ if value.open }}\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\n\t\t\t{{ else }}\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\n\t\t\t{{ fi }}\n\t\t</div>\n\t</footer>\n</body>",
			"cl1574vgz": "<script total>\n\texports.name = 'RPIuartDevices';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['serialport'];\n\n\texports.make = function(instance, config) {\n\t\tvar SerialPort = new require('serialport');\n\t\tinstance.trigger = async function() {\n\t\t\tawait SerialPort.list().then(function(ports) {\n\t\t\t\tinstance.send('output', ports);\n\t\t\t});\n\t\t}\n\t};\n\n</script>\n\n<readme>\n# UART\n\nGet all devices which are possible to send\n</readme>\n\n<script>\n\tFUNC.frpiuartdevices_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\n\t</div>\n</body>",
			"cl1575p5d": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cl15768bg": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cl1576sj0": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl1577pl2": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"cl1578aes": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"cl1578tyk": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>"
		},
		"design": {
			"il155hgek": {
				"id": "il155hgek",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": true,
					"interval": 20000
				},
				"x": 45.056854248046875,
				"y": 246.93178939819336,
				"component": "cl155eca6",
				"connections": {
					"output": [
						{
							"id": "il155j1lu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "AcgDevs",
					"name": "Trigger2",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155j1lu": {
				"id": "il155j1lu",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t};\n});"
				},
				"x": 294.1875,
				"y": 319.1875,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155o411",
							"index": "input"
						},
						{
							"id": "il16evdo0",
							"index": "input"
						},
						{
							"id": "il1c0pw4v",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155o411": {
				"id": "il155o411",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','bj').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 483.5,
				"y": 193.75,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155p8pv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155p8pv": {
				"id": "il155p8pv",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 814,
				"y": 187,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155q3wb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155q3wb": {
				"id": "il155q3wb",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'http://api.openweathermap.org/data/2.5/weather?lat={1}&lon={0}&units=metric&lang=fr&appid={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 1066,
				"y": 201,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1581scl",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155s0wf": {
				"id": "il155s0wf",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1667,
				"y": 170,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1581scl": {
				"id": "il1581scl",
				"config": {
					"template": "\n***Meteo Aujourd hui @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.name}*** \nTemps : @{model.weather[0].description}\nTempMax : @{model.main.temp_max} deg C \nTempMin : @{model.main.temp_min} deg C \nVitesseVent : @{((model.wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.sys.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.sys.sunset * 1000).parseDate().format('HH:mm')}"
				},
				"x": 1348,
				"y": 237,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il155s0wf",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16evdo0": {
				"id": "il16evdo0",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','bf').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 546.4203796386719,
				"y": 329.6590805053711,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16ew1l0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ew1l0": {
				"id": "il16ew1l0",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 819,
				"y": 387,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16ewu6c",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ewu6c": {
				"id": "il16ewu6c",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'http://api.openweathermap.org/data/2.5/weather?lat={1}&lon={0}&units=metric&lang=fr&appid={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 1074,
				"y": 396,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16exjjt",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16exjjt": {
				"id": "il16exjjt",
				"config": {
					"template": "***Meteo Aujourd hui @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.name}*** \nTemps : @{model.weather[0].description}\nTempMax : @{model.main.temp_max} deg C \nTempMin : @{model.main.temp_min} deg C \nVitesseVent : @{((model.wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.sys.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.sys.sunset * 1000).parseDate().format('HH:mm')}"
				},
				"x": 1353,
				"y": 408,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il16ey27x",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ey27x": {
				"id": "il16ey27x",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1776.5279541015625,
				"y": 676.7709350585938,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1c0pw4v": {
				"id": "il1c0pw4v",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','ml').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 506.4204406738281,
				"y": 495.65340423583984,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0pyt1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0pyt1": {
				"id": "il1c0pyt1",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 814.9714660644531,
				"y": 521.9602279663086,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0q26m",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0q26m": {
				"id": "il1c0q26m",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'http://api.openweathermap.org/data/2.5/weather?lat={1}&lon={0}&units=metric&lang=fr&appid={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 1063.9203491210938,
				"y": 531.9033355712891,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0q8qu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0q8qu": {
				"id": "il1c0q8qu",
				"config": {
					"template": "***Meteo Aujourd hui @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.name}*** \nTemps : @{model.weather[0].description}\nTempMax : @{model.main.temp_max} deg C \nTempMin : @{model.main.temp_min} deg C \nVitesseVent : @{((model.wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.sys.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.sys.sunset * 1000).parseDate().format('HH:mm')}"
				},
				"x": 1043.5625,
				"y": 521.78125,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il1c0qaie",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0qaie": {
				"id": "il1c0qaie",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1706.909912109375,
				"y": 490.763916015625,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1g9pvwe": {
				"id": "il1g9pvwe",
				"config": {
					"url": "/apimeteo/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "custom"
				},
				"x": 469.48858642578125,
				"y": 786.3351745605469,
				"component": "cl1577pl2",
				"connections": {
					"output": [
						{
							"id": "il1g9rasb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1g9rasb": {
				"id": "il1g9rasb",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').one().where('sc',(data.query.sc || '')).callback(function(err,region) {\n\tif(region){\n\t$.send('output',region)\n\t}\n});"
				},
				"x": 821.6192626953125,
				"y": 787.6135864257812,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1garlct",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1g9v9ju": {
				"id": "il1g9v9ju",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1550.5904541015625,
				"y": 875.90283203125,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"paused": {},
			"il1garlct": {
				"id": "il1garlct",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'http://api.openweathermap.org/data/2.5/weather?lat={1}&lon={0}&units=metric&lang=fr&appid={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 1056.5908203125,
				"y": 767.5567626953125,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1gart7f",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1gart7f": {
				"id": "il1gart7f",
				"config": {
					"template": "***Meteo Aujourd hui @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.name}*** \nTemps : @{model.weather[0].description}\nTempMax : @{model.main.temp_max} deg C \nTempMin : @{model.main.temp_min} deg C \nVitesseVent : @{((model.wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.sys.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.sys.sunset * 1000).parseDate().format('HH:mm')}"
				},
				"x": 1333.5225830078125,
				"y": 725.7670288085938,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il1g9v9ju",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://192.168.0.171:8000",
		"dtcreated": "2022-04-21T08:13:45.029Z",
		"size": 144928,
		"variables2": {}
	},
	"fp0fi001aj41d": {
		"paused": true,
		"id": "fp0fi001aj41d",
		"reference": "",
		"author": "",
		"group": "API Mise a jour",
		"icon": "fa fa-cloud-sun-rain",
		"color": "#83FA5A",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Météo Prevision",
		"components": {
			"cl155eca6": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Alain Guigma';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.trigger_header{ color : #fff; background-color :#E8357E;}\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header class=\"trigger_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"cl155f3k4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl155fspr": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"cl155fv1e": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155fx4p": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl155fzkh": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g242": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g48l": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g6f2": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g8bk": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gb4z": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gcq2": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"cl155geu5": "<script total>\n\n\texports.name = 'Telemetry';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-rss-square';\n\texports.author = 'Martin Smola';\n\texports.config = { paths: {}, interval: null }; // { name, path }\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tvar last = { items: [] };\n\t\tvar interval;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tconst data = { items: [] };\n\t\t\tconst paths = config.paths;\n\n\t\t\tfor (const path in paths)\n\t\t\t\tdata.items.push({ key: path, value: get($.data, paths[path]) || '' });\n\n\t\t\tif (!interval)\n\t\t\t\tinstance.status(data);\n\t\t\telse\n\t\t\t\tlast = data;\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status({ items: [] });\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tclearInterval(interval);\n\t\t\tif (config.interval) {\n\t\t\t\tinterval = setInterval(() => instance.status(last), config.interval);\n\t\t\t} else\n\t\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.close = () => clearInterval(interval);\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .telemetry-item > span { float: right; font-size: 14px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component shows data in a template.\nAssuming this incomming data:\n```javascript\n{\n\tspeed: 1,\n\tnested: { value: 2 },\n\tarray: [{ value: 3 }]\n}\n```\nThe paths bust be defined as:\n```\nspeed         // -> 1\nnested.value  // -> 2\narray.0.value // -> 3\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.interval__type:number__500\">Update interval (in ms)</div>\n\t\t<div class=\"help m\">Leave empty to update immediately when new data comes in.</div>\n\t\t<div data---=\"keyvalue__?.paths__placeholderkey:Type a property name;placeholdervalue:Type a path and press enter\">Properties to show in the template</div>\n\t\t<div class=\"help\">Path supports js dot notation like `data.arr.0.value`, following is not supported `data.arr[0].value`</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\" class=\"\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{foreach item in value.items}}\n\t\t\t\t\t<div class=\"telemetry-item\"><b class=\"mr5\">{{item.key}}:</b><span>{{item.value}}</span></div>\n\t\t\t\t{{end}}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155ghmg": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"cl155gk2e": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gpeu": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155grjw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155wjan": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl156bs2c": "<script total>\n\n\texports.name = 'DBMS';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Alain Guigma';\n\texports.config = { url: '',collection: '', method: 'query' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\texports.make = function(instance, config) {\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\t\tinstance.message = function($) {\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!config.collection) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\tvar data = $.data;\n\t\t\t\trequire('dbms').init(config.url,ERROR('DBMS'));\n\t\t\t\tDBMS.measure && DBMS.measure(true);\n\t\t\t\tvar dbms = DBMS();\n\t\t\t\tvar builder\n\t\t\t\tvar method = config.method.toLowerCase();\n\t\t\t\tswitch (method) {\n\t\t\t\t\tcase 'read':\n\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t\tif (data.params.id)\n\t\t\t\t\t\t\t\tdata.id = data.params.id;\n\t\t\t\t\t\t\tif (!data.id) {\n\t\t\t\t\t\t\t\tdata = { err: '[DB] Cannot get record by id: `undefined`' };\n\t\t\t\t\t\t\t\t$.send('error', data);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuilder = dbms.read(config.collection);\n\t\t\t\t\t\t\tbuilder.where('id', data.id);\n\t\t\t\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdata = { response: response };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'query':\n\t\t\t\t\tbuilder = dbms.list(config.collection);\n\t\t\t\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdata = { response: response };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'insert':\n\t\t\t\t\t\tdbms.add(config.collection,data).callback(function(err) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { success: err ? false : true, id: $.data.id };\n\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'remove':\n\t\t\t\t\t\tdbms.remove(config.collection).where('id',data.id).callback(function(err,count) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { response: count || 0 };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'update':\n\t\t\t\t\t\tdbms.remove(config.collection,data).where('id',data.id).callback(function(err,count) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { response: count || 0 };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\tconsole.log(method);\n\t\t\t\t}\n\t\t};\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component creates a HTTP request. Incoming data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:QUERY|query,READ|read,INSERT|insert,UPDATE|update,DELETE|remove\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-5 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>Url de connection</b></div>\n\n\t\t\t</div>\n\t\t\t<div class=\"col-md-5 m\">\n\t\t\t\t<div data---=\"input__?.collection__required:1\"><b>Collection</b></div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<hr class=\"nmt nmb\" />\n\n</settings>",
			"cl156cxle": "<script total>\n\texports.name = 'GoogleSearch';\n\texports.icon = 'fab fa-google';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['google-it'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\t// retrieve search keyword\n\t\t\tvar keyword = $.data;\n\t\t\t// import google-it library\n\t\t\tvar google = require('google-it');\n\t\t\t// Set number of result per page\n\t\t\tgoogle.resultPerPage = 5;\n\t\t\t// Set language to french\n\t\t\tgoogle.lang = 'fr';\n\t\t\t// if keyword exist\n\t\t\tif (keyword){\n\t\t\t\t// Make Google Search\n\t\t\t\tgoogle({query : keyword}).then(function(response){\n\t\t\t\t\t// retrieve  links from search result and send to next component\n\t\t\t\t\t$.send('output',response.links);\n\t\t\t\t\t// $.destroy();\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"cl156e2xi": "<script total>\n\n\texports.name = 'MatchEventSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'goal', name: 'GOAL' },\n\t\t\t\t\t\t{ id: 'goalpenalty', name: 'GOAL_PENALTY' },\n\t\t\t\t\t\t{ id: 'owngoal', name: 'OWN_GOAL' },\n\t\t\t\t\t\t{ id: 'yellowcard', name: 'YELLOW_CARD' },\n\t\t\t\t\t\t{ id: 'redcard', name: 'RED_CARD' },\n\t\t\t\t\t\t{ id: 'missedpenalty', name: 'MISSED_PENALTY' },\n\t\t\t\t\t\t{ id: 'substitution', name: 'SUBSTITUTION' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'yellowredcard', name: 'YELLOW_RED_CARD' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar event = $.data;\n\n\t\t\t\tswitch(event.event){\n\t\t\t\t\tcase 'GOAL'\t :\n\t\t\t\t\t\t$.send('goal', event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'GOAL_PENALTY' :\n\t\t\t\t\t\t$.send('goalpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'OWN_GOAL' :\n\t\t\t\t\t\t$.send('owngoal',event);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YELLOW_CARD' :\n\t\t\t\t\t\t$.send('yellowcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RED_CARD':\n\t\t\t\t\t\t$.send('redcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ' YELLOW_RED_CARD' :\n\t\t\t\t\t\t$.send('yellowredcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'MISSED_PENALTY' :\n\t\t\t\t\t\t$.send('missedpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SUBSTITUTION' :\n\t\t\t\t\t\t$.send('substitution',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',event);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n```\t\t[\n\t\t\t{\n                \"id\": \"10509914\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"5\",\n                \"event\": \"GOAL\",\n                \"sort\": \"0\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509915\",\n                \"match_id\": \"129180\",\n                \"player\": \"MARIAPPA ADRIAN\",\n                \"time\": \"13\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"1\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509916\",\n                \"match_id\": \"129180\",\n                \"player\": \"CAPOUE ETIENNE\",\n                \"time\": \"60\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"2\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509917\",\n                \"match_id\": \"129180\",\n                \"player\": \"DOUCOURE ABDOULAYE\",\n                \"time\": \"61\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"3\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509918\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"62\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"4\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10510529\",\n                \"match_id\": \"129180\",\n                \"player\": \"VARDY JAMIE\",\n                \"time\": \"75\",\n                \"event\": \"GOAL\",\n                \"sort\": \"5\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10510974\",\n                \"match_id\": \"129180\",\n                \"player\": \"PEREIRA RICARDO\",\n                \"time\": \"84\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"6\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10511398\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"GOAL\",\n                \"sort\": \"7\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10511625\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"8\",\n                \"home_away\": \"h\"\n            }\n        ],\n        \"match\": {\n            \"id\": \"129180\",\n            \"date\": \"2019-03-03\",\n            \"home_name\": \"Watford\",\n            \"away_name\": \"Leicester City\",\n            \"score\": \"2 - 1\",\n            \"ht_score\": \"1 - 0\",\n            \"ft_score\": \"2 - 1\",\n            \"et_score\": \"\",\n            \"time\": \"FT\",\n            \"league_id\": \"25\",\n            \"status\": \"FINISHED\",\n            \"added\": \"2019-03-03 11:55:12\",\n            \"last_changed\": \"2019-03-03 13:58:04\",\n            \"home_id\": \"11\",\n            \"away_id\": \"6\",\n            \"competition_id\": \"2\",\n            \"location\": null,\n            \"fixture_id\": null,\n            \"scheduled\": null,\n            \"home\": {\n                \"id\": \"11\",\n                \"name\": \"Watford\",\n                \"stadium\": \"Vicarage Road Stadium\",\n                \"location\": \"Vicarage Road Stadium\"\n            },\n            \"away\": {\n                \"id\": \"6\",\n                \"name\": \"Leicester City\",\n                \"stadium\": \"King Power Stadium\",\n                \"location\": \"King Power Stadium\"\n            },\n            \"competition\": {\n                \"id\": \"2\",\n                \"name\": \"Premier League\"\n            }\n        }\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.event_header{ color : #fff; background-color :#171717;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"cl156fik0": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tif(matchs.length === 0 ){\n\t\t\t\t$.send('default', 'Config last update. '+ NOW.format('HH:mm'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.switch_header{ color : #fff; background-color :#8C42F6;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"switch_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"cl156h8wk": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156ie4d": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl156j8px": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl156k5gy": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>\n",
			"cl156kztn": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156lyyy": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156nhyy": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156ovuq": "<script total>\n\n\texports.name = 'MQTT Broker';\n\texports.icon = 'fa fa-exchange-alt';\n\texports.group = 'MQTT';\n\texports.config = { hostname: 'localhost', port: 1883, secure: false };\n\texports.outputs = [{ id: 'output', name: 'Messages' }, { id: 'error', name: 'Errors' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.npm = ['mqtt'];\n\n\texports.make = function(instance, config) {\n\n\t\tconst mqtt = require('mqtt');\n\t\tvar client;\n\n\t\tconst state = () => {\n\t\t\tvar obj;\n\t\t\tif (!client) {\n\t\t\t\tobj = { connected: false, connecting: false, disconnected: true, disconnnecting: false, status: 'disconnected' };\n\t\t\t} else {\n\t\t\t\tconst { connected, disconnecting, reconnecting } = client;\n\t\t\t\tobj = { connecting: client.stream ? client.stream.connecting : false, connected, disconnecting, reconnecting };\n\t\t\t\tconst current = Object.keys(obj).filter(s => obj[s]);\n\t\t\t\tobj.status = current.length ? current[0] : 'disconnected';\n\t\t\t}\n\n\t\t\tinstance.state = { status: obj.status, name: config.hostname + ':' + config.port };\n\t\t\tinstance.status(instance.state);\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tdisconnect(connect);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tdisconnect(NOOP);\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction disconnect(callback) {\n\t\t\tif (!client)\n\t\t\t\treturn callback && callback();\n\n\t\t\tif (client.end)\n\t\t\t\tclient.end(true, cb);\n\t\t\telse\n\t\t\t\tcb();\n\n\t\t\tfunction cb() {\n\t\t\t\tclient.removeAllListeners();\n\t\t\t\tclient = null;\n\t\t\t\tcallback && callback();\n\t\t\t};\n\t\t};\n\n\t\tfunction connect() {\n\n\t\t\tstate();\n\n\t\t\tvar broker = config.secure ? 'mqtts://' : 'mqtt://' + config.hostname + ':' + config.port;\n\n\t\t\tclient = mqtt.connect(broker, config);\n\n\t\t\tclient.on('connect', function() {\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('reconnect', function() {\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('message', function(topic, message) {\n\t\t\t\tmessage = message.toString();\n\t\t\t\tif (message[0] === '{')\n\t\t\t\t\tmessage = message.parseJSON(true);\n\n\t\t\t\tonmessage(topic, message);\n\t\t\t});\n\n\t\t\tclient.on('close', function(err) {\n\t\t\t\tif (err && err.toString().indexOf('Error')) {\n\t\t\t\t}\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('error', function(err) {\n\t\t\t\tstate();\n\t\t\t});\n\t\t};\n\n\t\tfunction onmessage(topic, message) {\n\t\t\tconsole.log('Broker.onmessage', topic, message);\n\t\t\tfor (let sub in subscribtions) {\n\t\t\t\tvar match = mqttWildcard(topic, sub);\n\t\t\t\tif (match) {\n\t\t\t\t\tfor (const comid of sub) {\n\t\t\t\t\t\tconst com = instance.main.find(comid);\n\t\t\t\t\t\tcom && com.onmessage(topic, message, match);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinstance.publish = function(topic, message, options) {\n\t\t\tconsole.log('Broker.publish', topic, message, options);\n\t\t\tclient && client.publish(topic, message, options, function(err){\n\t\t\t\tif (err)\n\t\t\t\t\tconsole.log('error', err);\n\t\t\t});\n\t\t};\n\n\t\tconst subscribtions = {};\n\n\t\tinstance.subscribe = function(componentid, topic) {\n\t\t\tvar self = this;\n\t\t\tsubscribtions[topic] = subscribtions[topic] || [];\n\t\t\tif (subscribtions[topic].indexOf(componentid) > -1)\n\t\t\t\treturn;\n\n\t\t\tconsole.log('Broker.subscribe', topic);\n\t\t\tclient.subscribe(topic);\n\t\t\tsubscribtions[topic].push(componentid);\n\t\t};\n\n\t\tinstance.unsubscribe = function(componentid, topic) {\n\t\t\tvar self = this;\n\t\t\tvar sub = subscribtions[topic];\n\t\t\tif (sub) {\n\t\t\t\tsubscribtions[topic] = sub.remove(componentid);\n\t\t\t\tclient.connected && !subscribtions[topic].length && client.unsubscribe(topic);\n\t\t\t}\n\t\t};\n\n\t\t// https://github.com/hobbyquaker/mqtt-wildcard\n\t\tfunction mqttWildcard(topic, wildcard) {\n\t\t\tif (topic === wildcard) {\n\t\t\t\treturn [];\n\t\t\t} else if (wildcard === '#') {\n\t\t\t\treturn [topic];\n\t\t\t}\n\n\t\t\tvar res = [];\n\n\t\t\tvar t = String(topic).split('/');\n\t\t\tvar w = String(wildcard).split('/');\n\n\t\t\tvar i = 0;\n\t\t\tfor (var lt = t.length; i < lt; i++) {\n\t\t\t\tif (w[i] === '+') {\n\t\t\t\t\tres.push(t[i]);\n\t\t\t\t} else if (w[i] === '#') {\n\t\t\t\t\tres.push(t.slice(i).join('/'));\n\t\t\t\t\treturn res;\n\t\t\t\t} else if (w[i] !== t[i]) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (w[i] === '#') {\n\t\t\t\ti += 1;\n\t\t\t}\n\n\t\t\treturn (i === w.length) ? res : null;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tMQTT Broker\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.hostname__placeholder:test.mosquitto.org;required:1\">Hostname</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.name }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156pxep": "<script total>\n\n\texports.name = 'MQTT Publish';\n\texports.icon = 'fa fa-sign-out';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.inputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\tvar broker = instance.main.find(config.broker);\n\t\t\tif (!broker)\n\t\t\t\treturn;\n\n\t\t\tbroker.publish($.data.topic, $.data.message);\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tvar arr = [];\n\n\t\t\tvar instances = instance.main.instances();\n\n\t\t\tinstances = instances.filter(i => i.module.name === 'MQTT Broker');\n\t\t\tfor (let com of instances)\n\t\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\t\t\tconsole.log(arr);\n\t\t\tanswer(arr);\n\t\t};\n\t};\n</script>\n\n<readme>\nMQTT Publish\n\nInput:\n```javascript\n{\n\ttopic: 'some/topic',\n\tmessage: { some: 'data' },\n\t// optional\n\toptions: {\n\t\tqos: 0|1|2,\n\t\tretain: true|false\n\t}\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer>div>div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<script>\n\tON('configure_mqttpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\"\n\t\t\t\t\tclass=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156qoz3": "<script total>\n\n\texports.name = 'MQTT Subscribe';\n\texports.icon = 'fa fa-sign-in';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.outputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar subscribed = false;\n\t\tvar broker, topic;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscribe(instance.id, topic);\n\n\t\t\ttopic = config.topic;\n\n\t\t\tinstance.status({ status: 'Not configured', topic });\n\t\t\tbroker = instance.main.find(config.broker);\n\n\t\t\tif (broker) {\n\t\t\t\tbroker.subscribe(instance.id, topic);\n\t\t\t\tsubscribed = true;\n\t\t\t\tinstance.status({ status: 'Subscribed', topic });\n\t\t\t} else {\n\t\t\t\tinstance.status({ status: 'Broker not found', topic });\n\t\t\t}\n\t\t};\n\n\t\tinstance.onmessage = function(topic, message, match) {\n\t\t\tinstance.send('message', { topic, message, match });\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscibe(instance.id, topic);\n\t\t};\n\n\t\tsetTimeout(instance.configure, 2000);\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tvar arr = [];\n\n\t\t\tvar instances = instance.main.instances();\n\n\t\t\tinstances = instances.filter(i => i.module.name === 'MQTT Broker');\n\t\t\tfor (let com of instances)\n\t\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\n\t\t\tanswer(arr);\n\t\t};\n\t};\n</script>\n\n<readme>\nMQTT Subscribe\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<script>\n\tON('configure_mqttsubscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\" class=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.topic__placeholder:devices/status;required:1\" class=\"m\"><b>Topic</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<p>\n\t\t\t\t\t<b>The topic supports wildcards like:</b><br>\n\t\t\t\t\t- devices/+/status -> devices/1/status or devices/123456/status etc.<br>\n\t\t\t\t\t- devices/#        -> any topic begining with devices/.......\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t\t<div><b>{{ value.topic }}</b>Topic</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156rfye": "<script total>\n\texports.name = 'RPIgpio';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['rpi-gpio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar RPI = require('rpi-gpio');\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet bit = $.data;\n\n\t\t\tif (config.read_write && config.gpiokey) {\n\n\t\t\t\tswitch (config.read_write) {\n\t\t\t\t\tcase 'write':\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\n\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tcase 'read':\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\n\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.destroy();\n\n\t\t};\n\t};\n</script>\n\n<readme>\n# GPIO\n\n__Write mode__:\n\n- Select the GPIO you want\n- Set the read/write option to write\n- Send true to the component to set the GPIO to HIGH\n- Send false to the component to set the GPIO to LOW\n\n__Read mode__:\n\n- Select the GPIO you want\n- Set the read/write option to write\n- Send true to the node so read the state of the gpio\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\n\t</header>\n</body>",
			"cl156shpm": "<script total>\n\n\texports.name = 'RPIgpioPWM';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['rpi-gpio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar RPI = require('rpi-gpio');\n\n\t\tvar handler = function(duration) {\n\t\t\tinstance.pwmHandlerCount++;\n\t\t\tif (instance.pwmHandlerCount < duration * 10) {\n\t\t\t\tRPI.write(config.gpiokey, true, function(err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t});\n\t\t\t} else if (instance.pwmHandlerCount < 10) {\n\t\t\t\tRPI.write(config.gpiokey, false, function(err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.pwmHandlerCount = -1;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (config.gpiokey) {\n\t\t\t\tlet duration = $.data ? parseFloat($.data) : 0.0;\n\t\t\t\tinstance.pwmHandler && clearInterval(instance.pwmHandler);\n\t\t\t\tinstance.pwmHandlerCount = -1;\n\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE)\n\t\t\t\t$.send('output', { pin: config.gpiokey, value: duration });\n\t\t\t\tif (duration != 0.0)\n\t\t\t\t\tinstance.pwmHandler = setInterval(handler, 10, duration);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinstance.pwmHandler && clearInterval(instance.pwmHandler);\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# GPIO PWM\n\n- send number with the uptime duration to the component.\n- 0 (zero) is 0%\n- 1 (one) is 100%.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry GPIO PWM\n\t</header>\n</body>",
			"cl156u0qn": "<script total>\n\texports.name = 'RPIi2cRead';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar BCD2D = function(Wert) {\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar i2c1 = I2C.openSync(1);\n\n\t\t\tif (config.presensor) {\n\t\t\t\tswitch (config.sensor) {\n\t\t\t\t\tcase 'DS1307':\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\n\n\t\t\t\t//send msg\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\n\t\t\t\t$.send('output', rbuf.toString());\n\t\t\t}\n\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Read\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `readLength`: The length of how many bits will be read\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\n\t\t</div>\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\n\t</header>\n</body>",
			"cl156xrgb": "<script total>\n\texports.name = 'RPIi2cRead';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar BCD2D = function(Wert) {\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar i2c1 = I2C.openSync(1);\n\n\t\t\tif (config.presensor) {\n\t\t\t\tswitch (config.sensor) {\n\t\t\t\t\tcase 'DS1307':\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\n\n\t\t\t\t//send msg\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\n\t\t\t\t$.send('output', rbuf.toString());\n\t\t\t}\n\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Read\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `readLength`: The length of how many bits will be read\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\n\t\t</div>\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\n\t</header>\n</body>",
			"cl1571l5w": "<script total>\n\texports.name = 'RPIi2cWrite';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar stringtonumber = c => parseInt(c);\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet address, register, bytes;\n\n\t\t\ttry {\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\n\t\t\t} catch (err) {\n\t\t\t\t$.send('output', err + '');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Send msg\n\t\t\tlet i2c1 = I2C.openSync(1);\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\n\t\t\t$.send('output', { data: bytes });\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Write\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `bytes`: The bytes which will be written\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.address\">Address</div>\n\t\t<div data---=\"input__?.register\">Register</div>\n\t\t<div data---=\"input__?.bytes\">Data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\n\t</header>\n</body>",
			"cl1573cau": "<script total>\n\texports.name = 'RPIuart';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = { port:'/dev/ttyUSB0' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['serialport'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar SerialPort = require('serialport')\n\t\tvar sp;\n\n\t\tinstance.openConnectionUart = function(){\n\n\t\t\tsp = new SerialPort(config.port, {\n\t\t\t\tbaudRate: parseInt(config.baudrate),\n\t\t\t\tdataBits: parseInt(config.databits),\n\t\t\t\tparity: config.parity,\n\t\t\t\tstopBits: parseInt(config.stopbits),\n\t\t\t\tflowControl: false,\n\t\t\t\tautoOpen: false\n\t\t\t});\n\n\t\t\tsp.on('open', function() {\n\t\t\t\tinstance.status({ open: true });\n\t\t\t});\n\n\t\t\tsp.on('close', function() {\n\t\t\t\tinstance.status({ open: false });\n\t\t\t});\n\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\n\t\t\t\tinstance.send('output', data);\n\t\t\t});\n\n\t\t\tsp.open(function (err) {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\n\t\t\t});\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet bytes = $.data;\n\n\t\t\t//check if sp is open\n\t\t\tif (!sp)\n\t\t\t\tinstance.openConnectionUart();\n\n\t\t\t//send msg\n\t\t\tsp.write(bytes);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tsp && sp.close(NOOP);\n\t\t}\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n</style>\n\n<readme>\n# UART\n\n- send a string directly to a port\n- when device from a port sends data to the host, it will be send to the output of the component\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200||115200,128000|128000;required:1\">Baudrate</div>\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry UART\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\n\t\t\t{{ if value.open }}\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\n\t\t\t{{ else }}\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\n\t\t\t{{ fi }}\n\t\t</div>\n\t</footer>\n</body>",
			"cl1574vgz": "<script total>\n\texports.name = 'RPIuartDevices';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['serialport'];\n\n\texports.make = function(instance, config) {\n\t\tvar SerialPort = new require('serialport');\n\t\tinstance.trigger = async function() {\n\t\t\tawait SerialPort.list().then(function(ports) {\n\t\t\t\tinstance.send('output', ports);\n\t\t\t});\n\t\t}\n\t};\n\n</script>\n\n<readme>\n# UART\n\nGet all devices which are possible to send\n</readme>\n\n<script>\n\tFUNC.frpiuartdevices_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\n\t</div>\n</body>",
			"cl1575p5d": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cl15768bg": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cl1576sj0": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl1577pl2": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"cl1578aes": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"cl1578tyk": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cl1nb85l0": "<script total>\n\n\texports.name = 'MySQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mysql2'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst mysql = require('mysql2');\n\n\t\tvar MYSQL;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MYSQL || !MYSQL.pool)\n\t\t\t\treturn $.send('output', { error: 'MySQL connection not configured' });\n\n\t\t\tMYSQL.pool.query(data.query, function(err, rows, fields) {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\n\t\t\t\t$.send('output', { rows });\n\t\t\t})\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MYSQL) {\n\t\t\t\tMYSQL.count--;\n\t\t\t\tif (MYSQL.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tMYSQL.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tMYSQL = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (MYSQL && MYSQL.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tMYSQL = exports.POOLS[config.connection];\n\t\t\t\tMYSQL.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = mysql.createPool(config.connection);\n\t\t\tMYSQL = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMySQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div data---=\"input__?.connection__;required:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">e.g.: mysql://user:password@localhost:3306/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span class=\"red\" data-bind=\"STATUS.error__text\"></span>\n\t</footer>\n</body>",
			"cl1nb8ixw": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\tnosql.insert(data.data).callback(function(err) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tif (!data.filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl1nb8fb0": "<script total>\n\n\texports.name = 'PostgreSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['pg'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { Pool } = require('pg')\n\t\tvar PG;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!PG || !PG.pool)\n\t\t\t\treturn $.send('output', { error: 'Postgre connection not configured' });\n\n\t\t\tPG.pool.query(data.query, (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\t\t\t\t$.send('output', { rows: response && response.rows });\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (PG && PG.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tPG = exports.POOLS[config.connection];\n\t\t\t\tPG.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = new Pool({ connectionString: config.connection });\n\t\t\tPG = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.on('error', (err, client) => {\n\t\t\t\tconsole.log('[PG] Unexpected error on idle client', err);\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (PG) {\n\t\t\t\tPG.count--;\n\t\t\t\tif (PG.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tPG.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tPG = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nPostgreSQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div data---=\"input__?.connection__;required:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">e.g.: postgresql://user:password@localhost:5432/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span class=\"red\" data-bind=\"STATUS.error__text\"></span>\n\t</footer>\n</body>",
			"cl1nb8lrs": "<script total>\n\n\texports.name = 'SQLite3';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.npm = ['better-sqlite3'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst Database = require('better-sqlite3');\n\t\tvar db, file;\n\t\tvar fns = ['run', 'get', 'all', 'exec'];\n\n\t\tinstance.message = function($) {\n\t\t\tif (!db) {\n\t\t\t\t$.send('error', { error: 'db not ready' });\n\t\t\t\treturn instance.throw('SQLite3 not ready');\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.prepare || !data.fn) {\n\t\t\t\tinstance.throw('No `prepare` or `op` provided');\n\t\t\t\treturn $.send('error', { error: 'invalid input data' });;\n\t\t\t}\n\n\t\t\tif (fns.indexOf(data.fn) < 0) {\n\t\t\t\tinstance.throw('Unsupported function: ' + data.fn);\n\t\t\t\treturn $.send('error', { error: 'unsupported function' });\n\t\t\t}\n\n\t\t\tif (data.fn === 'exec') {\n\t\t\t\tlet result = db.exec(data.prepare);\n\t\t\t\treturn $.send('output2', result);\n\t\t\t}\n\n\t\t\tlet stmt = db.prepare(data.prepare);\n\t\t\tlet result = data.data ? stmt[data.fn](data.data) : stmt[data.fn]();\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tlet newfile = PATH.databases(config.filename || `${instance.id}.sqlite`);\n\t\t\tif (file === newfile)\n\t\t\t\treturn;\n\n\t\t\tfile = newfile;\n\n\t\t\tlet tmp = exports.DBS[file];\n\t\t\tif (tmp) {\n\t\t\t\tdb = tmp.db;\n\t\t\t\ttmp.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdb = new Database(file, { verbose: console.log });\n\t\t\texports.DBS[file] = {\n\t\t\t\tdb,\n\t\t\t\tcount: 1\n\t\t\t};\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (file && db) {\n\t\t\t\texports.DBS[file].count--;\n\t\t\t\tif (exports.DBS[file].count === 0) {\n\t\t\t\t\tdb && db.close();\n\t\t\t\t\tdb = null;\n\t\t\t\t\tdelete exports.DBS[file];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nSQLite3 [Documentation](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md)\n\n```js\n{\n\t// query\n\tprepare: 'INSERT INTO cats (name, age) VALUES (?, ?)',\n\n\t// function name: run, get, all, exec\n\tfn: 'run',\n\n\t// data, optional\n\tdata: ['Joey', 2] // string/number or array\n\n}\n```\n\nFunctions:\n\t- [run](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#runbindparameters---object)\n\t- [get](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#getbindparameters---row)\n\t- [all](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#allbindparameters---array-of-rows)\n\t- [exec](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#execstring---this)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.filename__placeholder:mydatabase\">Filename (optional)</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>"
		},
		"design": {
			"il155hgek": {
				"id": "il155hgek",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": true,
					"interval": 20000
				},
				"x": -10.4261474609375,
				"y": 231.25,
				"component": "cl155eca6",
				"connections": {
					"output": [
						{
							"id": "il155j1lu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "AcgDevs",
					"name": "Trigger2",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155j1lu": {
				"id": "il155j1lu",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t};\n});"
				},
				"x": 264.1875,
				"y": 317.125,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155o411",
							"index": "input"
						},
						{
							"id": "il16evdo0",
							"index": "input"
						},
						{
							"id": "il1c0pw4v",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155o411": {
				"id": "il155o411",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','bj').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 535.875,
				"y": 183.9375,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155p8pv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155p8pv": {
				"id": "il155p8pv",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 778,
				"y": 151,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155q3wb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155q3wb": {
				"id": "il155q3wb",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'http://api.openweathermap.org/data/2.5/forecast/daily?lat={1}&lon={0}&units=metric&lang=fr&appid={2}&cnt={3}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key,1);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 1016.6875,
				"y": 151.46875,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1581scl",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155s0wf": {
				"id": "il155s0wf",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1740,
				"y": 199,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1581scl": {
				"id": "il1581scl",
				"config": {
					"template": "***Meteo Prevision : Demain @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.city.name}*** \nTemps : @{model.list[0].weather[0].description}\nTempMax : @{model.list[0].main.temp_max} deg C \nTempMin : @{model.list[0].main.temp_min} deg C \nVitesseVent : @{((model.list[0].wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.city.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.city.sunset * 1000).parseDate().format('HH:mm')}\n"
				},
				"x": 1428.96875,
				"y": 134.78125,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il155s0wf",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16evdo0": {
				"id": "il16evdo0",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','bf').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 540.8125,
				"y": 345.3125,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16ew1l0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ew1l0": {
				"id": "il16ew1l0",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 838,
				"y": 327,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16ewu6c",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ewu6c": {
				"id": "il16ewu6c",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'http://api.openweathermap.org/data/2.5/forecast/daily?lat={1}&lon={0}&units=metric&lang=fr&appid={2}&cnt={3}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key,1);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 1086.9375,
				"y": 336.9375,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16exjjt",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16exjjt": {
				"id": "il16exjjt",
				"config": {
					"template": "***Meteo Prevision : Demain @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.city.name}*** \nTemps : @{model.list[0].weather[0].description}\nTempMax : @{model.list[0].main.temp_max} deg C \nTempMin : @{model.list[0].main.temp_min} deg C \nVitesseVent : @{((model.list[0].wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.city.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.city.sunset * 1000).parseDate().format('HH:mm')}\n"
				},
				"x": 1391.9885864257812,
				"y": 371.98858642578125,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il16ey27x",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ey27x": {
				"id": "il16ey27x",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1706.9033203125,
				"y": 356.9317932128906,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"paused": {
				"input__il16evdo0__input": 1,
				"input__il155o411__input": 1
			},
			"il1c0pw4v": {
				"id": "il1c0pw4v",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','ml').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 506.4204406738281,
				"y": 495.65340423583984,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0pyt1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0pyt1": {
				"id": "il1c0pyt1",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 814.9714660644531,
				"y": 521.9602279663086,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0q26m",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0q26m": {
				"id": "il1c0q26m",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = '9b860b87531afde305327d6c9faafcc2';\nvar url = 'http://api.openweathermap.org/data/2.5/forecast?lat={1}&lon={0}&units=metric&lang=fr&cnt={3}&appid={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key,1);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 1106.9317626953125,
				"y": 526.9033651351929,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0q8qu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0q8qu": {
				"id": "il1c0q8qu",
				"config": {
					"template": "***Meteo Prevision : Demain @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.city.name}*** \nTemps : @{model.list[0].weather[0].description}\nTempMax : @{model.list[0].main.temp_max} deg C \nTempMin : @{model.list[0].main.temp_min} deg C \nVitesseVent : @{((model.list[0].wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.city.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.city.sunset * 1000).parseDate().format('HH:mm')}\n"
				},
				"x": 1410.82373046875,
				"y": 512.8124694824219,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il1c0qaie",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0qaie": {
				"id": "il1c0qaie",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1714.6021728515625,
				"y": 487.6419982910156,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://localhost:8000",
		"dtcreated": "2022-04-21T08:17:45.028Z",
		"size": 156722,
		"variables2": {}
	},
	"fp0fo001aj41d": {
		"paused": true,
		"id": "fp0fo001aj41d",
		"reference": "",
		"author": "Afric Consuting Group",
		"group": "API Mise a jour",
		"icon": "fa fa-horse-head",
		"color": "#EB73F8",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Horoscope@2",
		"components": {
			"ckwuq8pg8": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq8zek": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuq94cc": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"ckwuq96qg": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq98l4": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9eu4": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ckwuq9how": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<div>\n\n\t\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</div>\n\n\t</header>\n</body>",
			"ckwuq9mxs": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckwuq9pk8": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuq9rvk": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"ckwuq9u6w": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"ckwuqa354": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"ckwuqa4rg": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ckwuqaml4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Peter Širka';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['cheerio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<style>\n\n\t.code_header{ color : #fff; background-color :#041EF5;}\n\theader > .fa{color : #fff!important;}\n</style>\n\n<body>\n\t<header class=\"code_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqao7g": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckwuqaqzg": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqau2k": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqax8g": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb00g": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb1xw": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqb3y4": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"ckwuqbayw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbco0": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbgws": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqbj84": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"ckwuqbljg": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckwuqboe8": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ckx4tdfco": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: true };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\t\tvar id;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\n\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(instance.trigger(), config.interval);\n\t\t};\n\t\tconfig.restart && setTimeout(() => instance.configure(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ckx4uquo8": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Louis Bertson';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.trigger_header{ color : #fff; background-color :#E8357E;}\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header class=\"trigger_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"ckx6c55dg": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, {id : 'row',name : 'Input data'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', res);\n\t\t\t\t\t\t$.send('row', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ckxa3c034": "<script total>\n\n\texports.name = 'FootballSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id : 'output', name: 'Output' },\n\t\t\t\t\t   { id : 'notstarted', name : 'NOT STARTED'},\n\t\t\t\t\t   { id : 'inplay', name : 'IN PLAY'},\n\t\t\t\t\t   { id : 'halftimebreak', name : 'HALF TIME BREAK' },\n\t\t\t\t\t   { id : 'addedtime', name : 'ADDED TIME'},\n\t\t\t\t\t   { id : 'finished' , name : 'FINISHED'},\n\t\t\t\t\t   { id : 'unsufficientdata' , name : 'UNSUFFICIENT'}];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"ckxa9ds4s": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tif(matchs.length === 0 ){\n\t\t\t\t$.send('default', 'Config last update. '+ NOW.format('HH:mm'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.switch_header{ color : #fff; background-color :#8C42F6;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"switch_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxcuhcds": "<script total>\n\n\texports.name = 'MatchEventSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'goal', name: 'GOAL' },\n\t\t\t\t\t\t{ id: 'goalpenalty', name: 'GOAL_PENALTY' },\n\t\t\t\t\t\t{ id: 'owngoal', name: 'OWN_GOAL' },\n\t\t\t\t\t\t{ id: 'yellowcard', name: 'YELLOW_CARD' },\n\t\t\t\t\t\t{ id: 'redcard', name: 'RED_CARD' },\n\t\t\t\t\t\t{ id: 'missedpenalty', name: 'MISSED_PENALTY' },\n\t\t\t\t\t\t{ id: 'substitution', name: 'SUBSTITUTION' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'yellowredcard', name: 'YELLOW_RED_CARD' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar event = $.data;\n\n\t\t\t\tswitch(event.event){\n\t\t\t\t\tcase 'GOAL'\t :\n\t\t\t\t\t\t$.send('goal', event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'GOAL_PENALTY' :\n\t\t\t\t\t\t$.send('goalpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'OWN_GOAL' :\n\t\t\t\t\t\t$.send('owngoal',event);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YELLOW_CARD' :\n\t\t\t\t\t\t$.send('yellowcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RED_CARD':\n\t\t\t\t\t\t$.send('redcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ' YELLOW_RED_CARD' :\n\t\t\t\t\t\t$.send('yellowredcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'MISSED_PENALTY' :\n\t\t\t\t\t\t$.send('missedpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SUBSTITUTION' :\n\t\t\t\t\t\t$.send('substitution',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',event);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n```\t\t[\n\t\t\t{\n                \"id\": \"10509914\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"5\",\n                \"event\": \"GOAL\",\n                \"sort\": \"0\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509915\",\n                \"match_id\": \"129180\",\n                \"player\": \"MARIAPPA ADRIAN\",\n                \"time\": \"13\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"1\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509916\",\n                \"match_id\": \"129180\",\n                \"player\": \"CAPOUE ETIENNE\",\n                \"time\": \"60\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"2\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509917\",\n                \"match_id\": \"129180\",\n                \"player\": \"DOUCOURE ABDOULAYE\",\n                \"time\": \"61\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"3\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509918\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"62\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"4\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10510529\",\n                \"match_id\": \"129180\",\n                \"player\": \"VARDY JAMIE\",\n                \"time\": \"75\",\n                \"event\": \"GOAL\",\n                \"sort\": \"5\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10510974\",\n                \"match_id\": \"129180\",\n                \"player\": \"PEREIRA RICARDO\",\n                \"time\": \"84\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"6\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10511398\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"GOAL\",\n                \"sort\": \"7\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10511625\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"8\",\n                \"home_away\": \"h\"\n            }\n        ],\n        \"match\": {\n            \"id\": \"129180\",\n            \"date\": \"2019-03-03\",\n            \"home_name\": \"Watford\",\n            \"away_name\": \"Leicester City\",\n            \"score\": \"2 - 1\",\n            \"ht_score\": \"1 - 0\",\n            \"ft_score\": \"2 - 1\",\n            \"et_score\": \"\",\n            \"time\": \"FT\",\n            \"league_id\": \"25\",\n            \"status\": \"FINISHED\",\n            \"added\": \"2019-03-03 11:55:12\",\n            \"last_changed\": \"2019-03-03 13:58:04\",\n            \"home_id\": \"11\",\n            \"away_id\": \"6\",\n            \"competition_id\": \"2\",\n            \"location\": null,\n            \"fixture_id\": null,\n            \"scheduled\": null,\n            \"home\": {\n                \"id\": \"11\",\n                \"name\": \"Watford\",\n                \"stadium\": \"Vicarage Road Stadium\",\n                \"location\": \"Vicarage Road Stadium\"\n            },\n            \"away\": {\n                \"id\": \"6\",\n                \"name\": \"Leicester City\",\n                \"stadium\": \"King Power Stadium\",\n                \"location\": \"King Power Stadium\"\n            },\n            \"competition\": {\n                \"id\": \"2\",\n                \"name\": \"Premier League\"\n            }\n        }\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.event_header{ color : #fff; background-color :#171717;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"ckxfxgv70": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ckxfxgza8": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl09vtgcu": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\tnosql.insert(data.data,true).where('id',data.id).callback(function(err) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tif (!data.filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl09vtmi7": "<script total>\n\n\texports.name = 'MongoDB Insert';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\n\t\tvar MONGO;\n        var COLS = {};\n\n\t\tinstance.message = async function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar result = {\n\t\t\t\tdata: data.data\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (data.data instanceof Array)\n\t\t\t\t\tresult.response = await COLS[id].insertMany(data.data, data.options);\n\t\t\t\telse\n\t\t\t\t\tresult.response = await COLS[id].insertOne(data.data, data.options);\n\n\t\t\t\tconsole.log('insertedId', typeof(result.response.insertedId))\n\t\t\t} catch(e) {\n\t\t\t\tresult = { error: e };\n\t\t\t}\n\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (config.string)\n\t\t\t\tconfig.connection = config.string;\n\n\t\t\tif (!config.connection)\n\t\t\t\treturn instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === config.connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[config.connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[config.connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tMONGO = REPO.mongodb[config.connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\n\t\t\tconsole.log(instance.main.instances());\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: { ... },  // data to insert, object for `insertOne` and an array of objects for `insertMany`\n\toptions: { ... }// insert options as passed to `insertOne(data, options)` or `insertMany(data, options)`\n}\n```\n\n</readme>\n<script>\n\tON('configure_mongodbinsert', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<div data---=\"input__?.string__dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t<div data---=\"input__?.name\" class=\"m b\">Connection name</div>\n\t\t\t\t<div data---=\"input__?.connection\" class=\"b\">Connection string (without the database name)</div>\n\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"STATUS.state__text\"></span>\n\t</footer>\n</body>",
			"cl09vtoi1": "<script total>\n\n\texports.name = 'MongoDB Insert';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\n\t\tvar MONGO;\n        var COLS = {};\n\n\t\tinstance.message = async function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar result = {\n\t\t\t\tdata: data.data\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (data.data instanceof Array)\n\t\t\t\t\tresult.response = await COLS[id].insertMany(data.data, data.options);\n\t\t\t\telse\n\t\t\t\t\tresult.response = await COLS[id].insertOne(data.data, data.options);\n\n\t\t\t\tconsole.log('insertedId', typeof(result.response.insertedId))\n\t\t\t} catch(e) {\n\t\t\t\tresult = { error: e };\n\t\t\t}\n\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (config.string)\n\t\t\t\tconfig.connection = config.string;\n\n\t\t\tif (!config.connection)\n\t\t\t\treturn instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === config.connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[config.connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[config.connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tMONGO = REPO.mongodb[config.connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\n\t\t\tconsole.log(instance.main.instances());\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: { ... },  // data to insert, object for `insertOne` and an array of objects for `insertMany`\n\toptions: { ... }// insert options as passed to `insertOne(data, options)` or `insertMany(data, options)`\n}\n```\n\n</readme>\n<script>\n\tON('configure_mongodbinsert', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<div data---=\"input__?.string__dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t<div data---=\"input__?.name\" class=\"m b\">Connection name</div>\n\t\t\t\t<div data---=\"input__?.connection\" class=\"b\">Connection string (without the database name)</div>\n\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"STATUS.state__text\"></span>\n\t</footer>\n</body>",
			"cl1c2594w": "<script total>\n\n\texports.name = 'HoroscopeSwitch';\n\texports.icon = 'fa fa-heartbeat';\n\texports.author = 'Louis Bertson';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'amour', name: 'AMOUR' },\n\t\t\t\t\t\t{ id: 'argent', name: 'ARGENT' },\n\t\t\t\t\t\t{ id: 'sante', name: 'SANTE' },\n\t\t\t\t\t\t{ id: 'travail', name: 'TRAVAIL' },\n\t\t\t\t\t\t{ id: 'famille', name: 'FAMILLE' },\n\t\t\t\t\t\t{ id: 'viesociale', name: 'VIE SOCIALE' },\n\t\t\t\t\t\t{ id: 'citationdujour', name: 'CITATION DU JOUR' },\n\t\t\t\t\t\t{ id: 'nombredechance', name: 'NOMBRE DE CHANCE' },\n\t\t\t\t\t\t{ id: 'clind-oeil', name: 'CLIN D\\'OEIL ' },\n\t\t\t\t\t\t{ id: 'feteasouhaiter', name: 'FETE A SOUHAITER' },\n\t\t\t\t\t\t{ id: 'default', name: 'Exception' }\n\t\t\t\t\t  ];\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar horoscope = $.data;\n\n\t\t\t\tswitch(horoscope.type){\n\t\t\t\t\tcase 'amour'\t :\n\t\t\t\t\t\t$.send('amour', horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'argent' :\n\t\t\t\t\t\t$.send('argent',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'sante' :\n\t\t\t\t\t\t$.send('sante',horoscope);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'travail' :\n\t\t\t\t\t\t$.send('travail',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'famille':\n\t\t\t\t\t\t$.send('famille',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'viesociale' :\n\t\t\t\t\t\t$.send('viesociale',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'citationdujour' :\n\t\t\t\t\t\t$.send('citationdujour',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'nombredechance' :\n\t\t\t\t\t\t$.send('nombredechance',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'clind-oeil' :\n\t\t\t\t\t\t$.send('clind-oeil',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'feteasouhaiter' :\n\t\t\t\t\t\t$.send('feteasouhaiter',horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',horoscope);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n</script>\n<readme>\n```\t\tCool\n```\n</readme>\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n<style>\n\t.event_header{ color : #fff; background-color :#47962A;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"cl1cd27id": "<script total>\n\n\texports.name = 'OneWire';\n\texports.group = 'Raspberry Pi';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\t//exports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar sensors = {};\n\t\tvar values = {};\n\t\tvar interval;\n\t\tvar reading = false;\n\n\t\tvar average = arr => arr.reduce((a,b) => a + b, 0) / arr.length;\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (reading)\n\t\t\t\treturn;\n\t\t\treading = true;\n\n\t\t\tONEWIRE.list((err, list) => {\n\t\t\t\t$.data = {\n\t\t\t\t\tts: Date.now(),\n\t\t\t\t\tignorelist: [],\n\t\t\t\t\tsensors: []\n\t\t\t\t};\n\n\t\t\t\tlist.wait((id, next) => {\n\t\t\t\t\tif (!sensors[id]) {\n\t\t\t\t\t\t$.data.ignorelist.push(id)\n\t\t\t\t\t\treturn next();\n\t\t\t\t\t}\n\n\t\t\t\t\tONEWIRE.readDS18B20(id, config, function (err, data) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\t//$.data[id] = -127;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet val = Math.round(data * 100) / 100;\n\t\t\t\t\t\t\tif (config.history) {\n\t\t\t\t\t\t\t\tvalues[id] = values[id] || [];\n\t\t\t\t\t\t\t\tvalues[id].unshift(val);\n\n\t\t\t\t\t\t\t\tif (values[id].length > 10)\n\t\t\t\t\t\t\t\t\tvalues[id] = values[id].slice(0, 10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet obj = { id, name: sensors[id], value: val };\n\t\t\t\t\t\t\tif (config.history) {\n\t\t\t\t\t\t\t\tobj.history = values[id];\n\t\t\t\t\t\t\t\tobj.average = average(obj.history);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$.data.sensors.push(obj);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnext();\n\n\t\t\t\t\t});\n\t\t\t\t}, function done(){\n\t\t\t\t\t$.send('output');\n\t\t\t\t\treading = false;\n\t\t\t\t});\n\t\t\t});\n\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tsensors = {};\n\t\t\tObject.keys(config.map).forEach(s => {\n\t\t\t\tsensors[config.map[s]] = s;\n\t\t\t});\n\n\t\t\tif (!isNaN(config.interval) && config.interval < 30)\n\t\t\t\tconfig.interval = 30;\n\n\t\t\tclearInterval(interval);\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tinstance.message(instance.newmessage({}));\n\t\t\t}, (config.interval || 60) * 1000); // default 1 minute\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.close = () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\n\t\tinstance.trigger = () => {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t};\n\n\texports.call = function call(data, next){\n\t\tONEWIRE.list((err, list) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('list error', err);\n\t\t\t\tnext([]);\n\t\t\t} else {\n\t\t\t\tnext(list.map(d => ({ name: d, id: d })));\n\t\t\t}\n\t\t});\n\t};\n\n\tvar Fs = require('fs');\n\tvar Path = require('path');\n\n    var ONEWIRE = {\n        W1_DIR: '/sys/bus/w1/devices/w1_bus_master1',\n        W1_MASTER: 'w1_master_slaves',\n        list: (callback) => {\n            const filepath = Path.join(ONEWIRE.W1_DIR, ONEWIRE.W1_MASTER);\n            Fs.stat(filepath, function(err){\n                if (err)\n                    return callback(err);\n\n                Fs.readFile(filepath, 'utf8', function(err, data){\n                    if (err)\n                        return callback(err);\n\n                    var devices = data.split('\\n').trim();\n                    callback(null, devices);\n                });\n            });\n        },\n        readDS18B20: function(id, options, callback){\n\n            if (!id)\n                return callback('No id specified');\n\n            if (typeof(options) === 'function') {\n                callback = options;\n                options = {};\n            }\n\n            const filepath = Path.join(ONEWIRE.W1_DIR, id, 'w1_slave');\n\n            Fs.stat(filepath, function(err){\n                if (err)\n                    return callback(`Sensor ${id} not found`);\n\n                Fs.readFile(filepath, 'utf8', function(err, data){\n                    if (err)\n                        return callback(err);\n\n                    var temp = ONEWIRE.parseTemperature(data, options.digits, options.degF);\n                    callback(null, temp);\n                });\n            });\n        },\n        readDS2438: function(id, options, callback){\n\n            if (!id)\n                return callback('No id specified');\n\n            if (typeof(options) === 'function') {\n                callback = options;\n                options = {};\n            }\n\n            const dir = Path.join(ONEWIRE.W1_DIR, id);\n\n            Fs.readdir(dir, function(err, list) {\n                if (err)\n                    return callback(`Sensor ${id} not found`);\n\n                var i = 0;\n                list.forEach(function(f) {\n                    if (f === 'temperature' || f === 'vad' || f === 'vdd' || f === 'iad')\n                        return i++;\n                });\n\n                if (i < 4)\n                    return callback(`Error reading sensor ${id}`);\n\n                var temperature, vad, vdd, iad = '-1';\n\n                (async () => {\n                    try {\n                        temperature = await read(Path.join(dir, 'temperature'));\n                        vad = await read(Path.join(dir, 'vad'));\n                        vdd = await read(Path.join(dir, 'vdd'));\n                    } catch(e){\n                        return callback(`Error reading sensor ${id}, ${e.code}`);\n                    }\n                    try {\n                        iad = await read(Path.join(dir, 'iad'));\n                    } catch(e){\n                        console.log(e);\n                    }\n\n                    temperature = +temperature.trim() / 256;\n                    vdd = +vdd.trim() / 100;\n                    vad = +vad.trim() / 100;\n                    iad = +iad.trim() / (4.096 * 4700);\n\n                    if (temperature === 0 || vdd === 0 || vad === 0)\n                        return callback(`Error reading sensor ${id}`);\n\n                    /* Compute light (Light sensor BPW 34 S on IAD Input of the DS2438Z) */\n                    var lux = iad * (!isNaN(options.lumcoeficient) ? options.lumcoeficient : 12000.0);\n\n                    var humidity = 0;\n                    if (options.zerooffset && options.slope)\n                        humidity = ONEWIRE.hum(vad, options.zerooffset, options.slope / 1000)\n                    else\n                        humidity = (vad / vdd - 0.16) / 0.0062 / (1.0546 - 0.00216 * temperature );\n\n                    callback(null, { temperature: temperature.format(2), humidity: humidity.format(2), liminosity: lux });\n                })();\n            });\n        },\n        parseTemperature: function parseTemperature(data, digits, degF) {\n            var arr = data.split('\\n');\n            var digits = digits !== undefined ? digits : 2;\n            let temp = null;\n\n            // Ensure \"crc=00\" is not present since this indicates the sensor has been disconnected.\n            if (arr[0].indexOf('YES') > -1 && arr[0].indexOf('crc=00') === -1) {\n                var out = data.match(/t=(-?(\\d+))/);\n                if (out !== null) {\n                    temp = parseInt(out[1], 10) / 1000;\n                    if (degF) {\n                        temp = (temp * (9 / 5)) + 32;\n                    }\n                    temp = temp.round(digits);\n                }\n            } else\n                console.log('Failed to parse DS18B20', arr);\n\n            return temp;\n        },\n        hum: function hum(vad, offset, slope) {\n            offset = (offset / 0.05) * 0.033;\n            slope = (slope / 0.05) * 0.033;\n            return (vad - offset) / slope;\n        }\n    };\n\n</script>\n\n<readme>\n## Output\n```js\n{\n\t\"ts\": 1646643556666,      // timestamp\n\t\"ignorelist\": []          // list of ignored devices, the devices not in the \"Name/ID map\" in config form\n\t\"sensors\": [\n\t\t{\n\t\t\t\"id\": \"28-3c01e076b84d\", // onewire sensor id\n\t\t\t\"name\": \"livingroom\",    // friedly name assigned in the config form\n\t\t\t\"value\": 21.06,          // current value\n\t\t\t// optionaly, if enabled, the last 10 values, 1st(21.06) is most recent\n\t\t\t\"history\": [ 21.06, 21.13, 21.06, 21.06, 21.13, 21.13, 21.06, 21.06, 21.08, 21.09 ],\n\t\t},\n\t\t...\n]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"keyvalue__?.map__placeholderkey:Sensor name;placeholdervalue:Type a sensor id and hit enter\" class=\"m\">Name/ID map</div>\n\t\t<div data---=\"input__?.interval__type:number\" class=\"m\">Interval in seconds (default 60s, minimum 30s)</div>\n\t\t<div data---=\"input__?.history__type:checkbox\" class=\"m\">Keep history? (last 10 values for each sensor)</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0 0 0 4px; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Read</button>\n\t\t<i class=\"ICON\"></i>NAME (DS18B20)\n\t</header>\n</body>",
			"cl1cd2ceu": "<script total>\r\n\texports.name = 'RPIi2cWrite';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar stringtonumber = c => parseInt(c);\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet address, register, bytes;\r\n\r\n\t\t\ttry {\r\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\r\n\t\t\t} catch (err) {\r\n\t\t\t\t$.send('output', err + '');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Send msg\r\n\t\t\tlet i2c1 = I2C.openSync(1);\r\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\r\n\t\t\t$.send('output', { data: bytes });\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Write\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `bytes`: The bytes which will be written\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.address\">Address</div>\r\n\t\t<div data---=\"input__?.register\">Register</div>\r\n\t\t<div data---=\"input__?.bytes\">Data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\r\n\t</header>\r\n</body>",
			"cl1cd24ma": "<script total>\r\n\texports.name = 'RPIgpio';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['rpi-gpio'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar RPI = require('rpi-gpio');\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bit = $.data;\r\n\r\n\t\t\tif (config.read_write && config.gpiokey) {\r\n\r\n\t\t\t\tswitch (config.read_write) {\r\n\t\t\t\t\tcase 'write':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tcase 'read':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$.destroy();\r\n\r\n\t\t};\r\n\t};\r\n</script>\r\n\r\n<readme>\r\n# GPIO\r\n\r\n__Write mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the component to set the GPIO to HIGH\r\n- Send false to the component to set the GPIO to LOW\r\n\r\n__Read mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the node so read the state of the gpio\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\r\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\r\n\t</header>\r\n</body>",
			"cl1cd2aj6": "<script total>\r\n\texports.name = 'RPIi2cRead';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar BCD2D = function(Wert) {\r\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\r\n\t\t};\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar i2c1 = I2C.openSync(1);\r\n\r\n\t\t\tif (config.presensor) {\r\n\t\t\t\tswitch (config.sensor) {\r\n\t\t\t\t\tcase 'DS1307':\r\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\r\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\r\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t$.destroy();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\r\n\r\n\t\t\t\t//send msg\r\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\r\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\r\n\t\t\t\t$.send('output', rbuf.toString());\r\n\t\t\t}\r\n\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Read\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `readLength`: The length of how many bits will be read\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\r\n\t\t</div>\r\n\t\t<hr />\r\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\r\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\r\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\r\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\r\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\r\n\t</header>\r\n</body>",
			"cl1cd2gpi": "<script total>\n\texports.name = 'RPIuart';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = { port:'/dev/ttyUSB0' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['serialport'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar SerialPort = require('serialport')\n\t\tvar sp;\n\n\t\tinstance.openConnectionUart = function(){\n\n\t\t\tsp = new SerialPort(config.port, {\n\t\t\t\tbaudRate: parseInt(config.baudrate),\n\t\t\t\tdataBits: parseInt(config.databits),\n\t\t\t\tparity: config.parity,\n\t\t\t\tstopBits: parseInt(config.stopbits),\n\t\t\t\tflowControl: false,\n\t\t\t\tautoOpen: false\n\t\t\t});\n\n\t\t\tsp.on('open', function() {\n\t\t\t\tinstance.status({ open: true });\n\t\t\t});\n\n\t\t\tsp.on('close', function() {\n\t\t\t\tinstance.status({ open: false });\n\t\t\t});\n\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\n\t\t\t\tinstance.send('output', data);\n\t\t\t});\n\n\t\t\tsp.open(function (err) {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\n\t\t\t});\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet bytes = $.data;\n\n\t\t\t//check if sp is open\n\t\t\tif (!sp)\n\t\t\t\tinstance.openConnectionUart();\n\n\t\t\t//send msg\n\t\t\tsp.write(bytes);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tsp && sp.close(NOOP);\n\t\t}\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n</style>\n\n<readme>\n# UART\n\n- send a string directly to a port\n- when device from a port sends data to the host, it will be send to the output of the component\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200|115200,128000|128000;required:1\">Baudrate</div>\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry UART\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\n\t\t\t{{ if value.open }}\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\n\t\t\t{{ else }}\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\n\t\t\t{{ fi }}\n\t\t</div>\n\t</footer>\n</body>",
			"cl1cd2en3": "<script total>\r\n\texports.name = 'RPIuartDevices';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tvar SerialPort = new require('serialport');\r\n\t\tinstance.trigger = async function() {\r\n\t\t\tawait SerialPort.list().then(function(ports) {\r\n\t\t\t\tinstance.send('output', ports);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# UART\r\n\r\nGet all devices which are possible to send\r\n</readme>\r\n\r\n<script>\r\n\tFUNC.frpiuartdevices_exec = function(el) {\r\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\r\n\t</div>\r\n</body>",
			"cl1g8xdti": "<script total>\n\n\texports.name = 'write excel file';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\t//exports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.output = [\n\t\t\t\t\t\t{ id: 'ligne1', name: 'AMOUR' },\n\t\t\t\t\t\t{ id: 'ligne2', name: 'ARGENT' },\n\t\t\t\t\t\t{ id: 'ligne3', name: 'SANTE' },\n\t\t\t\t\t\t{ id: 'ligne4', name: 'TRAVAIL' },\n\t\t\t\t\t\t{ id: 'ligne5', name: 'FAMILLE' },\n\t\t\t\t\t\t{ id: 'ligne6', name: 'VIE SOCIALE' },\n\t\t\t\t\t\t{ id: 'ligne7', name: 'CITATION DU JOUR' },\n\t\t\t\t\t\t{ id: 'ligne8', name: 'NOMBRE DE CHANCE' },\n\t\t\t\t\t\t{ id: 'ligne9', name: 'CLIN D\\'OEIL ' },\n\t\t\t\t\t\t{ id: 'ligne10', name: 'FETE A SOUHAITER' },\n\t\t\t\t\t\t{ id: 'ligne11', name: 'Exception' }\n\t];\n\n\t exports.npm = ['write-excel-file'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tvar horoscope = $.data;\n\n\t\t\t\tswitch(horoscope.type){\n\t\t\t\t\tcase 'amour'\t :\n\t\t\t\t\t\t$.send('amour', horoscope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t//var data = $.data;\n\t\t\t//$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"cl1p0gbks": "<script total>\n\n\texports.name = 'PostgreSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['pg'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { Pool } = require('pg')\n\t\tvar PG;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!PG || !PG.pool)\n\t\t\t\treturn $.send('output', { error: 'Postgre connection not configured' });\n\n\t\t\tPG.pool.query(data.query, (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\t\t\t\t$.send('output', { rows: response && response.rows });\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (PG && PG.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tPG = exports.POOLS[config.connection];\n\t\t\t\tPG.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = new Pool({ connectionString: config.connection });\n\t\t\tPG = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.on('error', (err, client) => {\n\t\t\t\tconsole.log('[PG] Unexpected error on idle client', err);\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (PG) {\n\t\t\t\tPG.count--;\n\t\t\t\tif (PG.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tPG.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tPG = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nPostgreSQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div data---=\"input__?.connection__;required:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">e.g.: postgresql://user:password@localhost:5432/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span class=\"red\" data-bind=\"STATUS.error__text\"></span>\n\t</footer>\n</body>",
			"cl1p0g85e": "<script total>\n\n\texports.name = 'MySQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mysql2'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst mysql = require('mysql2');\n\n\t\tvar MYSQL;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MYSQL || !MYSQL.pool)\n\t\t\t\treturn $.send('output', { error: 'MySQL connection not configured' });\n\n\t\t\tMYSQL.pool.query(data.query, function(err, rows, fields) {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\n\t\t\t\t$.send('output', { rows });\n\t\t\t})\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MYSQL) {\n\t\t\t\tMYSQL.count--;\n\t\t\t\tif (MYSQL.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tMYSQL.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tMYSQL = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (MYSQL && MYSQL.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tMYSQL = exports.POOLS[config.connection];\n\t\t\t\tMYSQL.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = mysql.createPool(config.connection);\n\t\t\tMYSQL = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMySQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div data---=\"input__?.connection__;required:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">e.g.: mysql://user:password@localhost:3306/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span class=\"red\" data-bind=\"STATUS.error__text\"></span>\n\t</footer>\n</body>",
			"cl1p0ge80": "<script total>\n\n\texports.name = 'SQLite3';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.npm = ['better-sqlite3'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst Database = require('better-sqlite3');\n\t\tvar db, file;\n\t\tvar fns = ['run', 'get', 'all', 'exec'];\n\n\t\tinstance.message = function($) {\n\t\t\tif (!db) {\n\t\t\t\t$.send('error', { error: 'db not ready' });\n\t\t\t\treturn instance.throw('SQLite3 not ready');\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.prepare || !data.fn) {\n\t\t\t\tinstance.throw('No `prepare` or `op` provided');\n\t\t\t\treturn $.send('error', { error: 'invalid input data' });;\n\t\t\t}\n\n\t\t\tif (fns.indexOf(data.fn) < 0) {\n\t\t\t\tinstance.throw('Unsupported function: ' + data.fn);\n\t\t\t\treturn $.send('error', { error: 'unsupported function' });\n\t\t\t}\n\n\t\t\tif (data.fn === 'exec') {\n\t\t\t\tlet result = db.exec(data.prepare);\n\t\t\t\treturn $.send('output2', result);\n\t\t\t}\n\n\t\t\tlet stmt = db.prepare(data.prepare);\n\t\t\tlet result = data.data ? stmt[data.fn](data.data) : stmt[data.fn]();\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tlet newfile = PATH.databases(config.filename || `${instance.id}.sqlite`);\n\t\t\tif (file === newfile)\n\t\t\t\treturn;\n\n\t\t\tfile = newfile;\n\n\t\t\tlet tmp = exports.DBS[file];\n\t\t\tif (tmp) {\n\t\t\t\tdb = tmp.db;\n\t\t\t\ttmp.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdb = new Database(file, { verbose: console.log });\n\t\t\texports.DBS[file] = {\n\t\t\t\tdb,\n\t\t\t\tcount: 1\n\t\t\t};\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (file && db) {\n\t\t\t\texports.DBS[file].count--;\n\t\t\t\tif (exports.DBS[file].count === 0) {\n\t\t\t\t\tdb && db.close();\n\t\t\t\t\tdb = null;\n\t\t\t\t\tdelete exports.DBS[file];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nSQLite3 [Documentation](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md)\n\n```js\n{\n\t// query\n\tprepare: 'INSERT INTO cats (name, age) VALUES (?, ?)',\n\n\t// function name: run, get, all, exec\n\tfn: 'run',\n\n\t// data, optional\n\tdata: ['Joey', 2] // string/number or array\n\n}\n```\n\nFunctions:\n\t- [run](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#runbindparameters---object)\n\t- [get](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#getbindparameters---row)\n\t- [all](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#allbindparameters---array-of-rows)\n\t- [exec](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#execstring---this)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.filename__placeholder:mydatabase\">Filename (optional)</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>"
		},
		"design": {
			"il09uo4sb": {
				"id": "il09uo4sb",
				"config": {
					"outputs": 1,
					"code": "// set the daylly time when to start the process;\nvar time = '15:30';\nvar time_now = new Date().format('HH:mm');\nif (  time == time_now ){\n}\n\t$.send('output',data);"
				},
				"x": 383.25,
				"y": 498.75,
				"note": "START TIME",
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0tpto6n",
							"index": "input"
						},
						{
							"id": "il0tyssxl",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqumnz": {
				"id": "il0aqumnz",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'http://213.246.36.116/kiosquesmsmoovbn/kiosque_ussd_recu.php';\nopt.query = { msisdn : '22652133010', ussd : 702 , keyword : data.keyword };\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.table = 'sousmenu2s';\n\tp.id = data.id;\n\tp.nom = data.nom;\n\tp.keyword = data.keyword;\n\tp.result = res.body;\n\t$.send('output', {data : p});\n\n}\nREQUEST(opt);"
				},
				"x": 1273.90625,
				"y": 309.28125,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqvxzo": {
				"id": "il0aqvxzo",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'http://213.246.36.116/kiosquesmsmoovbn/kiosque_ussd_recu.php';\nopt.query = { msisdn : '22652133010', ussd : 702 , keyword : data.keyword };\nopt.callback = function(err, res) {\n\tvar p = {};\n\tp.table = 'sousmenu3s';\n\tp.id = data.id;\n\tp.nom = data.nom;\n\tp.keyword = data.keyword;\n\tp.result = res.body;\n\t$.send('output', {data : p});\n\n}\nREQUEST(opt);"
				},
				"x": 1281.28125,
				"y": 423.9375,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqw09z": {
				"id": "il0aqw09z",
				"config": {
					"outputs": 1,
					"code": "console.log(data.length);\ndata.forEach(function(item) {\n\tvar form = {};\n\tform.an = item[0];\n\tform.mois = item[1];\n\tform.jour = item[2];\n\t$.send('output',{ date : item.join('-'),form : form});\n});"
				},
				"x": 1284.3125,
				"y": 605.65625,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0aqxciw",
							"index": "input"
						},
						{
							"id": "il0twzwyp",
							"index": "input"
						},
						{
							"id": "il0v61rqt",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0aqxciw": {
				"id": "il0aqxciw",
				"config": {
					"addid": false,
					"method": "insert",
					"collection": "kiosque_test"
				},
				"x": 1662.9862060546875,
				"y": 403.71533203125,
				"component": "cl09vtgcu",
				"connections": {},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Input"
						}
					]
				}
			},
			"il0aqz8ai": {
				"id": "il0aqz8ai",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1729.58349609375,
				"y": 296.7361373901367,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il0avjos4": {
				"id": "il0avjos4",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 3038,
				"y": 163,
				"component": "ckwuq9mxs",
				"connections": {
					"output": [
						{
							"id": "il09uo4sb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tpto6n": {
				"id": "il0tpto6n",
				"config": {
					"outputs": 1,
					"code": "Date.prototype.addDays = function(days) {\n    var date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\nfunction getDates(startDate, stopDate) {\n    var dateArray = new Array();\n    var currentDate = startDate;\n    while (currentDate <= stopDate) {\n        dateArray.push(new Date (currentDate).format('yyyy-M-d').split('-'));\n        currentDate = currentDate.addDays(1);\n    }\n    return dateArray;\n}\n\n//var dateArray = getDates(new Date(), (new Date()).add('21 months').add('15 days'));\nvar dateArray = getDates(new Date(), (new Date()).add('1 days'));\n\n$.send('output',dateArray);"
				},
				"x": 649.625,
				"y": 423.375,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0u1ez7i",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tw7msf": {
				"id": "il0tw7msf",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3445.8802490234375,
				"y": 765.2556457519531,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il0twzwyp": {
				"id": "il0twzwyp",
				"config": {
					"delay": 500
				},
				"x": 1615.283935546875,
				"y": 536.8749694824219,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "il0txazt9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0txazt9": {
				"id": "il0txazt9",
				"config": {
					"outputs": 1,
					"code": "for (var i = 0; i < 12; i++){\n\tprocess(data,i, function(output) {\n\t$.send('output',output);\n\n\t})\n}\nfunction process(data,i, callback) {\n\ti += 1;\n\tvar form = U.clone(data.form);\n\tform.sign =i;\n\n\tvar output = { data : { id : data.date, sign : i , date : data.date,form : form },form:form};\n\tcallback(output)\n}"
				},
				"x": 1989.5452880859375,
				"y": 675.625,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0ty1fyq",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0ty1fyq": {
				"id": "il0ty1fyq",
				"config": {
					"delay": 200
				},
				"x": 2270.5625,
				"y": 608.6875,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "il0tzfxg2",
							"index": "input"
						},
						{
							"id": "il0u1hnth",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tyssxl": {
				"id": "il0tyssxl",
				"config": {
					"outputs": 1,
					"code": "F.restart();"
				},
				"x": 721.375,
				"y": 687.875,
				"component": "ckwuqaml4",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0tzfxg2": {
				"id": "il0tzfxg2",
				"config": {
					"addid": true,
					"method": "insert",
					"collection": "horoscopes"
				},
				"x": 2654.744140625,
				"y": 750.710205078125,
				"component": "cl09vtgcu",
				"connections": {},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Input"
						}
					]
				}
			},
			"il0u1ez7i": {
				"id": "il0u1ez7i",
				"config": {
					"delay": 500
				},
				"x": 929.75,
				"y": 333.375,
				"component": "ckwuqb1xw",
				"connections": {
					"output": [
						{
							"id": "il0aqw09z",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Common",
					"name": "Delay",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0u1hnth": {
				"id": "il0u1hnth",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nopt.url = 'https://www.asiaflash.com/horoscope/parjour_365_jours.php';\nopt.method = 'POST';\n//opt.data = data.form;\nopt.body = `an=${data.form.an}&mois=${data.form.mois}&jour=${data.form.jour}&sign=${data.form.sign}`;\nopt.type = 'urlencoded';\nopt.callback = function(err, res) {\n\t//res = res.parseJSON(true);\n\tvar p = {};\n\tp.id = data.data.id;\n\tp.sign = data.data.sign;\n\tp.result = res.body.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n\t$.send('output', p);\n};\nREQUEST(opt);"
				},
				"x": 2524.0338134765625,
				"y": 590.3976898193359,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0utt39d",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0utt39d": {
				"id": "il0utt39d",
				"config": {
					"outputs": 1,
					"code": "var cheerio = require('cheerio');\nvar dollar = cheerio.load(data.result);\n// selectors\nvar signSeleector = 'body > div.af_section_container > article > div.af_rubrique > figure > figcaption > span';\nvar selectors = [\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(2)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(3)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(4)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(5)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(6)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(7)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(8)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(9)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(10)',\n\t'body > div.af_section_container > article > div.af_rubrique > p:nth-child(11)',\n\t];\nselectors.map(function(selector) {\n\t$.send('output',{html : data.result,selector : selector});\n\n});\n\n/*dollar(titreSeleector).each(function(index) {\n\tvar obj = { id : data.id, sign : data.sign};\n\tobj.type =  dollar(this).text().substring(1).split('-')[1].trim().split(' ').join('').slug();\n\tobj.titre = dollar(this).text().substring(1).split('-')[0].trim();\n\tobj.content = dollar(this).contents().filter(function () { return this.nodeType === 3; }).text();;\n});\n$.send('output',obj);*/"
				},
				"x": 2785.71875,
				"y": 627.3125,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il1oxefbn",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il0v61rqt": {
				"id": "il0v61rqt",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1652.9544677734375,
				"y": 779.9715576171875,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1c28je8": {
				"id": "il1c28je8",
				"config": {},
				"x": 3363,
				"y": 219,
				"component": "cl1c2594w",
				"connections": {
					"amour": [
						{
							"id": "il1eqwn9c",
							"index": "input"
						},
						{
							"id": "il1ez727l",
							"index": "input"
						},
						{
							"id": "il1nlxc7j",
							"index": "input"
						}
					],
					"argent": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"sante": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"travail": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"famille": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"viesociale": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"citationdujour": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"nombredechance": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"clind-oeil": [
						{
							"id": "il1ez727l",
							"index": "input"
						}
					],
					"feteasouhaiter": [
						{
							"id": "il1c5ldcr",
							"index": "input"
						},
						{
							"id": "il1ez727l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-heartbeat",
					"group": "AcgDevs",
					"name": "HoroscopeSwitch",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "amour",
							"name": "AMOUR"
						},
						{
							"id": "argent",
							"name": "ARGENT"
						},
						{
							"id": "sante",
							"name": "SANTE"
						},
						{
							"id": "travail",
							"name": "TRAVAIL"
						},
						{
							"id": "famille",
							"name": "FAMILLE"
						},
						{
							"id": "viesociale",
							"name": "VIE SOCIALE"
						},
						{
							"id": "citationdujour",
							"name": "CITATION DU JOUR"
						},
						{
							"id": "nombredechance",
							"name": "NOMBRE DE CHANCE"
						},
						{
							"id": "clind-oeil",
							"name": "CLIN D'OEIL "
						},
						{
							"id": "feteasouhaiter",
							"name": "FETE A SOUHAITER"
						},
						{
							"id": "default",
							"name": "Exception"
						}
					]
				}
			},
			"il1c5ldcr": {
				"id": "il1c5ldcr",
				"config": {},
				"x": 3897.9256591796875,
				"y": 723.8636169433594,
				"component": "ckwuqb3y4",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1eqwn9c": {
				"id": "il1eqwn9c",
				"config": {
					"path": "~/databases/amour.json",
					"serializer": "json",
					"rewrite": false,
					"divider": "\\n"
				},
				"x": 4010,
				"y": 182,
				"component": "ckxfxgv70",
				"connections": {},
				"template": {
					"icon": "fa fa-pencil",
					"group": "Files",
					"name": "File Writer",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1ewf5aw": {
				"id": "il1ewf5aw",
				"config": {
					"path": "~/databases/amour.json",
					"parser": "json",
					"interval": 1000
				},
				"x": 4672.6419677734375,
				"y": 1016.6476440429688,
				"component": "ckxfxgza8",
				"connections": {
					"output": [
						{
							"id": "il1ewfb62",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-recycle",
					"group": "Files",
					"name": "File Watcher",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1ewfb62": {
				"id": "il1ewfb62",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 4908.920166015625,
				"y": 970.9374389648438,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1ewftfv": {
				"id": "il1ewftfv",
				"config": {
					"addid": false,
					"collection": "database",
					"method": "insert",
					"upsert": false
				},
				"x": 4164.6019287109375,
				"y": 413.4374694824219,
				"component": "cl09vtgcu",
				"connections": {
					"output": [
						{
							"id": "il1lzg1vv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Input"
						}
					]
				}
			},
			"il1ex0hht": {
				"id": "il1ex0hht",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 4387,
				"y": 630,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1ez727l": {
				"id": "il1ez727l",
				"config": {
					"outputs": 1,
					"code": "data.id = data.id+'-'+UID();\n$.send('output',{data : data});"
				},
				"x": 3886,
				"y": 418,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il1ewftfv",
							"index": "input"
						},
						{
							"id": "il1ex0hht",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1f14kjw": {
				"id": "il1f14kjw",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 5082.982421875,
				"y": 672.9828491210938,
				"component": "ckwuq9mxs",
				"connections": {
					"output": [
						{
							"id": "il1f153q1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1f153q1": {
				"id": "il1f153q1",
				"config": {
					"upsert": false,
					"method": "insert",
					"collection": "database",
					"addid": true
				},
				"x": 5304.6016845703125,
				"y": 504.2897033691406,
				"component": "cl09vtgcu",
				"connections": {},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Input"
						}
					]
				}
			},
			"il1f16cjc": {
				"id": "il1f16cjc",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 5398.692626953125,
				"y": 640.17041015625,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1gcp8w9": {
				"id": "il1gcp8w9",
				"config": {
					"collection": "database",
					"method": "query"
				},
				"x": 2904,
				"y": 1074,
				"component": "cl09vtgcu",
				"connections": {
					"output": [
						{
							"id": "il1gcq0hi",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Input"
						}
					]
				}
			},
			"il1gcphy2": {
				"id": "il1gcphy2",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": true
				},
				"x": 2773.9772033691406,
				"y": 1028.9772338867188,
				"component": "ckwuq9mxs",
				"connections": {
					"output": [
						{
							"id": "il1gcr5an",
							"index": "input"
						},
						{
							"id": "il1gcp8w9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1gcq0hi": {
				"id": "il1gcq0hi",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3915,
				"y": 910,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1gcr5an": {
				"id": "il1gcr5an",
				"config": {
					"outputs": 1,
					"code": "NOSQL('database').find().callback(function(err, data) {\n\t$.send('output',data);\n});"
				},
				"x": 3019.9712524414062,
				"y": 1207.9829406738281,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il1gcp8w9",
							"index": "input"
						},
						{
							"id": "il1gcq0hi",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1g9ahli": {
				"id": "il1g9ahli",
				"config": {},
				"x": 5721.9884033203125,
				"y": 376.98863220214844,
				"component": "cl1g8xdti",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"name": "write excel file",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1lzg1vv": {
				"id": "il1lzg1vv",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 4471.67578125,
				"y": 416.960205078125,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1m548fz": {
				"id": "il1m548fz",
				"config": {
					"outputs": 1,
					"code": "//avec write-excel-file\nconst writeXlsxFile = require('write-excel-file/node')\nvar  data  =  [\n    // Row #1\n    [\n      // Column #1\n      {\n        value : '',\n        fontWeight : 'bold'\n      } ,\n      // Column #2\n      {\n        value : 'signe1' ,\n        fontWeight : 'bold'\n      } ,\n      // Colonne #3\n      {\n        value : 'signe2' ,\n        fontWeight : 'bold'\n      } ,\n      // Colonne #4\n      {\n        value : 'signe3' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #5\n      {\n        value : 'signe4' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #6\n      {\n        value : 'signe5' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #7\n      {\n        value : 'signe6' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #8\n      {\n        value : 'signe7' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #9\n      {\n        value : 'signe8' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #10\n      {\n        value : 'signe9' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #11\n      {\n        value : 'signe10' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #12\n      {\n        value : 'signe11' ,\n        fontWeight : 'bold'\n      },\n      // Colonne #13\n      {\n        value : 'signe12' ,\n        fontWeight : 'bold'\n      },\n    ] ,\n    // Ligne #2\n    [\n      // Colonne #1\n      {\n        // `type` est un\n        type : String ,\n        valeur : 'Amour',\n        fontWeight : 'bold'\n      } ,\n       // Column #2\n       {\n        type : String ,\n        value : 'Amour'\n      } ,\n      // Colonne #3\n      {\n        type : String ,\n        value : 'Amour'\n      } ,\n      // Colonne #4\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #5\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #6\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #7\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #8\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #9\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #10\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #11\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #12\n      {\n        type : String ,\n        value : 'Amour'\n      },\n      // Colonne #13\n      {\n        type : String ,\n        value : 'Amour'\n      },\n    ] ,\n    // Ligne #3\n    [\n      // Colonne #1\n      {\n        // `type` est un\n        type : String ,\n        value : 'Argent',\n        fontWeight : 'bold'\n      } ,\n       // Column #2\n       {\n        type : String ,\n        value : 'Argent'\n      } ,\n      // Colonne #3\n      {\n        type : String ,\n        value : 'Argent'\n      } ,\n      // Colonne #4\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #5\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #6\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #7\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #8\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #9\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #10\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #11\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #12\n      {\n        type : String ,\n        value : 'Argent'\n      },\n      // Colonne #13\n      {\n        type : String ,\n        value : 'Argent'\n      },\n    ] ,\n     // Ligne #4\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Sante',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        type : String ,\n        value : 'Sante'\n      } ,\n      // Colonne #3\n      {\n        type : String ,\n        value : 'Sante'\n      } ,\n      // Colonne #4\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #5\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #6\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #7\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #8\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #9\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #10\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #11\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #12\n      {\n        type : String ,\n        value : 'Sante'\n      },\n      // Colonne #13\n      {\n        type : String ,\n        value : 'Sante'\n      },\n    ] ,\n      // Ligne #5\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Travail',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        type : String ,\n        value : 'Travail'\n      } ,\n      // Colonne #3\n      {\n        type : String ,\n        value : 'Travail'\n      } ,\n      // Colonne #4\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #5\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #6\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #7\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #8\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #9\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #10\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #11\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #12\n      {\n        type : String ,\n        value : 'Travail'\n      },\n      // Colonne #13\n      {\n        type : String ,\n        value : 'Travail'\n      },\n    ] ,\n    // Ligne #6\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Famille',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        type : String ,\n        value : 'Famille'\n      } ,\n      // Colonne #3\n      {\n        type : String ,\n        value : 'Famille'\n      } ,\n      // Colonne #4\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #5\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #6\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #7\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #8\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #9\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #10\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #11\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #12\n      {\n        type : String ,\n        value : 'Famille'\n      },\n      // Colonne #13\n      {\n        type : String ,\n        value : 'Famille'\n      },\n    ] ,\n    // Ligne #7\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Vie Sociale',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        type : String ,\n        value : 'Vie Sociale'\n      } ,\n      // Colonne #3\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      } ,\n      // Colonne #4\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #5\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #6\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #7\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #8\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #9\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #10\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #11\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #12\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n      // Colonne #13\n      {\n        type : String ,\n        value : 'Vie Sociale'\n      },\n    ],\n    // Ligne #8\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Citation Du Jour',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        type : String ,\n        value : 'Citation Du Jour'\n      } ,\n      // Colonne #3\n      {\n        type : String ,\n        value : 'Citation Du Jour'\n      } ,\n      // Colonne #4\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #5\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #6\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #7\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #8\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #9\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #10\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #11\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #12\n      {\n        value : 'Citation Du Jour'\n      },\n      // Colonne #13\n      {\n        value : 'Citation Du Jour'\n      },\n    ] ,\n    // Ligne #9\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Nombre De Chance',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        value : 'Nombre De Chance'\n      } ,\n      // Colonne #3\n      {\n        value : 'Nombre De Chance'\n      } ,\n      // Colonne #4\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #5\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #6\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #7\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #8\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #9\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #10\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #11\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #12\n      {\n        value : 'Nombre De Chance'\n      },\n      // Colonne #13\n      {\n        value : 'Nombre De Chance'\n      },\n    ] ,\n    // Ligne #10\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Clin d\\'Oeil',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        value : 'Clin d\\'Oeil'\n      } ,\n      // Colonne #3\n      {\n        value : 'Clin d\\'Oeil'\n      } ,\n      // Colonne #4\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #5\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #6\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #7\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #8\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #9\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #10\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #11\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #12\n      {\n        value : 'Clin d\\'Oeil'\n      },\n      // Colonne #13\n      {\n        value : 'Clin d\\'Oeil'\n      },\n    ] ,\n    // Ligne #11\n    [\n        // Colonne #1\n        {\n          // `type` est un\n          type : String ,\n          valeur : 'Fete A Souhaiter',\n          fontWeight : 'bold'\n        } ,\n         // Column #2\n       {\n        value : 'Fete A Souhaiter'\n      } ,\n      // Colonne #3\n      {\n        value : 'Fete A Souhaiter'\n      } ,\n      // Colonne #4\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #5\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #6\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #7\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #8\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #9\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #10\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #11\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #12\n      {\n        value : 'Fete A Souhaiter'\n      },\n      // Colonne #13\n      {\n        value : 'Fete A Souhaiter'\n      },\n    ] ,\n  ];\n  async function generate(data){\n   await writeXlsxFile(data, {\n        filePath: 'public/tests.xlsx'\n      })\n  }\n  generate(data);"
				},
				"x": -12.017059326171875,
				"y": 555.9658508300781,
				"component": "ckwuqaml4",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1nlxc7j": {
				"id": "il1nlxc7j",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 4170,
				"y": 767,
				"component": "ckwuqaqzg",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1oxefbn": {
				"id": "il1oxefbn",
				"config": {
					"outputs": 1,
					"code": "var cheerio = require('cheerio');\nasync function prepare(html,callback){\n\tvar  dollar = await cheerio.load(html);\n\n\tcallback(dollar);\n};\n\nprepare(data.html, async function(dollard){\n\tvar txt = await dollard(data.selector).text();\n\t//console.log(txt);\n\tvar obj = {};\n\tobj.sign = txt.substring(1).split('-')[0].trim();\n\t//obj.type = txt.substring(1).split('-').trim().split(' ')[1];\n\t//obj.content = txt.substring(20,1000).split('-')[2].trim();\n\tobj.content = dollard(data.selector).contents().filter(function () { return this.nodeType === 3; }).text();\n\tobj.type =  txt.replace(obj.content,'').substring(1).split('-')[1].trim().split(' ').join('').slug();\n\t$.send('output',obj);\n});\n\n/*dollar(titreSeleector).each(function(index) {\n\tvar obj = { id : data.id, sign : data.sign};\n\tobj.type =  dollar(this).text().substring(1).split('-')[1].trim().split(' ').join('').slug();\n\tobj.titre = dollar(this).text().substring(1).split('-')[0].trim();\n\tobj.content = dollar(this).contents().filter(function () { return this.nodeType === 3; }).text();\n});\n$.send('output',obj);*/"
				},
				"x": 3115.9940185546875,
				"y": 641.8749694824219,
				"component": "ckwuqaml4",
				"connections": {
					"output": [
						{
							"id": "il0tw7msf",
							"index": "input"
						},
						{
							"id": "il1c28je8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1oxv9uw": {
				"id": "il1oxv9uw",
				"config": {
					"path": "~/public/horoscope.txt",
					"serializer": "text",
					"rewrite": true,
					"divider": "\\n"
				},
				"x": 3268,
				"y": 938,
				"component": "ckxfxgv70",
				"connections": {},
				"template": {
					"icon": "fa fa-pencil",
					"group": "Files",
					"name": "File Writer",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1p0hhmx": {
				"id": "il1p0hhmx",
				"config": {},
				"x": 3008.920166015625,
				"y": 854.9147338867188,
				"component": "cl1p0g85e",
				"connections": {},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "MySQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"paused": {
				"input__il0aqumnz__input": 1,
				"input__il0aqvxzo__input": 1,
				"input__il0aqxciw__input": 1,
				"input__il0tyssxl__input": 1,
				"input__il0tzfxg2__input": 1,
				"output__il1f14kjw__output": 1,
				"input__il1gcr5an__input": 1,
				"output__il1gcr5an__output": 1
			}
		},
		"variables": {
			"api_key": "eXOv8YQzPrtdesCF",
			"api_secret": "9dCd3fFKo22cGq9VnYrwXh6MJz0X2CCb",
			"competition_id": "370",
			"fixtures": "https://livescore-api.com/api-client/fixtures/matches.json",
			"fixture_time": "05:30",
			"live_score": "https://livescore-api.com/api-client/scores/live.json",
			"events": "https://livescore-api.com/api-client/scores/events.json",
			"morningprogram": "07:45"
		},
		"sources": {},
		"origin": "http://localhost:8454",
		"dtcreated": "2022-04-21T08:23:45.032Z",
		"size": 193605,
		"variables2": {}
	},
	"fpkga001aj41d": {
		"paused": false,
		"id": "fpkga001aj41d",
		"reference": "",
		"author": "",
		"group": "Actualite",
		"icon": "far fa-newspaper",
		"color": "#61C83B",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Actu REGION",
		"components": {
			"cgq0f971dd": "<script total>\n\n\texports.name = 'Macro';\n\texports.icon = 'fa fa-scroll';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { code: 'RETURN DATA' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\t\tvar temp = {};\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar val = fn({ data: $.data, temp: temp });\n\t\t\t\t$.send('output', val === undefined ? $.data : val);\n\t\t\t} else\n\t\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tfn = config.code ? NEWMACRO(config.code) : null;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe macro component uses Total.js Macro language that allows you to write much simple code like in JavaScript. Macros are targeted for small data transformation.\n\n- you don't need to solve Upper/Lower case\n- `return EXPRESSION` will return data and send them next\n- `data` keyword contains a message data\n- `temp` keyword can contain a persistent temporary data\n\n__Example__:\n\n```text\nIF DATA>20 AND DATA<35\n\tRETURN DATA * 5\nFI\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear temporary data</div>\n\t\t<div data---=\"codemirror__?.code__type:text;minheight:300;parent:auto;margin:90;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><a href=\"https://docs.totaljs.com/total4/pahk001pr41d/\" target=\"_blank\"><i class=\"fa fa-book mr5\"></i>Documentation</a></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgmxl1055e": "<script total>\n\n\texports.id = 'qrgenerator';\n\texports.name = 'QR generator';\n\texports.icon = 'fa fa-qrcode';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['awesome-qr'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tconst { AwesomeQR } = require(\"awesome-qr\");\n\t\tconst { writeFile, readFile } = require('fs').promises;\n\t\tconst filename = PATH.tmp(instance.id + 'qrcode.png');\n\t\tvar bgready = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tgenerate(data.text, function(err, buf){\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.end();\n\t\t\t\tif ($.data.filename)\n\t\t\t\t\tF.Fs.writeFile($.data.filename, buf, function(err){\n\t\t\t\t\t\tif (err) instance.throw(err);\n\t\t\t\t\t});\n\t\t\t\t$.data._qrcode = buf.toString('base64');\n\t\t\t\t$.send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t/*// \"config\" is changed\n\t\t\tif (config.background) {\n\t\t\t\twriteFile(filename, Buffer.from(config.background.split(';base64,')[1], 'base64'))\n\t\t\t\t\t.then(_ => { console.log('OK'); bgready = true; })\n\t\t\t\t\t.catch(err => { console.log('FAILED', err); bgready = false; });\n\t\t\t} else\n\t\t\t\tbgready = false;*/\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function generate(text, cb) {\n\t\t\tvar bg;\n\n\t\t\tif (bgready) {\n\t\t\t\ttry {\n\t\t\t\t\tbg = await readFile(filename);\n\t\t\t\t} catch(e) {\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar obj = {\n\t\t\t\ttext,\n\t\t\t\tsize: 600\n\t\t\t}\n\n\t\t\tif (bg)\n\t\t\t\tobj.backgroundImage = bg;\n\t\t\tvar buffer;\n\n\t\t\tnew AwesomeQR(obj).draw().then(buf => {\n\t\t\t\tcb(null, buf);\n\t\t\t}).catch(err => {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\ttext: 'text to write to qr code',\n\tfilename: '/public/img/', // optionaly writes the file to filesystem\n\t...\n}\n```\n## Output\n```js\n{\n\ttext: 'text to write to qr code',\n\t...\n\t_qrcode: 'base64 encoded buffer'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<!--Please use <a href=\"https://www.base64-image.de/\" target=\"_blank\">base64-image.de</a> to turn the background image to Base64 and place the text \"data:image/png;ba....\" bellow.\n\t\t<div data---=\"input__?.background\">Background Image data (optional)</div>-->\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ch5c79dcc2": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"ch9ub95918": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"chdmwfcabd": "<script total>\n\n\texports.name = 'Workflow';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Name', code: 'success();', clear: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1400 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar repo = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn($, repo);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tvar code = config.code;\n\t\t\t\tif (code) {\n\n\t\t\t\t\tvar builder = ['var controller=$.refs.controller||EMPTYOBJECT'];\n\n\t\t\t\t\tif (code.indexOf('headers') !== -1)\n\t\t\t\t\t\tbuilder.push('headers=controller.headers||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('params') !== -1)\n\t\t\t\t\t\tbuilder.push('params=controller.params||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('query') !== -1)\n\t\t\t\t\t\tbuilder.push('query=controller.query||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('respond') !== -1)\n\t\t\t\t\t\tbuilder.push('respond=(data)=>$.send(\\'output\\',data)');\n\n\t\t\t\t\tif (code.indexOf('success') !== -1)\n\t\t\t\t\t\tbuilder.push('success=(data)=>$.send(\\'output\\',{success:true,value:data})');\n\n\t\t\t\t\tif (code.indexOf('invalid') !== -1)\n\t\t\t\t\t\tbuilder.push('invalid=(err)=>$.send(\\'error\\',[{error:err.toString()}])');\n\n\t\t\t\t\tif (code.indexOf('user') !== -1)\n\t\t\t\t\t\tbuilder.push('user=controller.user');\n\n\t\t\t\t\tif (code.indexOf('ip') !== -1)\n\t\t\t\t\t\tbuilder.push('ip=controller.ip||\\'\\'');\n\n\t\t\t\t\tif (code.indexOf('model') !== -1)\n\t\t\t\t\t\tbuilder.push('model=$.data');\n\n\t\t\t\t\tvar AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t\t\t\t\tvar body = builder.join(',') + ';try{' + code + '}catch(e){$.instance.status({error:e.message});$.destroy();}';\n\n\t\t\t\t\tfn = code.indexOf('await ') === -1 ? new Function('$', 'repo', body) : new AsyncFunction('$', 'repo', body);\n\n\t\t\t\t\tif (config.clear)\n\t\t\t\t\t\trepo = {};\n\n\t\t\t\t} else\n\t\t\t\t\tfn = null;\n\n\t\t\t\tinstance.status(EMPTYOBJECT);\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.status({ error: e.message });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t\trepo = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component simulates Total.js Schema Workflow operation. It can process data and store/read them into the database.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Workflow name</div>\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear repository object</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:185;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><i class=\"fa fa-book\"></i><span class=\"link exec\" data-exec=\"comworkflowsettingshelp\">Documentation</span></div>\n\t</div>\n</settings>\n\n<script>\nTOUCH(function(instance) {\n\n\tW.comworkflowsettingshelp = function() {\n\tvar md = `\n__Properties__:\n- \\`$ {Message}\\`\n- \\`controller {Object}\\` A controller instance\n- \\`user {Object}\\` A user instance if exists\n- \\`headers {Object}\\` Request headers\n- \\`query {Object}\\` URL query arguments\n- \\`params {Object}\\` A dynamic URL params\n- \\`ip {String}\\` IP address\n\n__Functions__:\n- \\`respond(data {Object})\\` Responds with data\n- \\`success(data {Object}\\` optional) Response with success object\n- \\`invalid(error {String})\\` Error handling`;\n\t\tFUNC.readme('Documentation: Workflow', md);\n\t};\n\n\tinstance.settings = function() {\n\t\tif (!W.comworkflowsettingsskip) {\n\t\t\tW.comworkflowsettingsskip = true;\n\t\t\tW.comworkflowsettingshelp();\n\t\t}\n\t};\n});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text\"></b>\n\t</header>\n\t<footer data-bind=\"STATUS.error__text span__show\" style=\"padding:10px\" class=\"fs12 red\"><i class=\"fa fa-bug mr5\"></i><b>ERROR:</b> <span></span></footer>\n</body>",
			"chim37758d": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { payload: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + value.substring(1)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"chkct9f685": "<script total>\n\n\texports.name = 'Token Auth';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:1\">Token</div>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.header__required:1;type:lower\">Header</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.error__required:1\">Error message</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div data---=\"input__?.ddos__required:1;type:number\">DDOS protection</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.code__text\" class=\"code\"></span> <span data-bind=\"CONFIG.header__text\"></span></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
			"chm2b0c2fc": "<script total>\n\n\texports.name = 'Remember';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-save';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'remember', name: 'Remember' }, { id: 'request', name: 'Request' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache;\n\n\t\tinstance.message = function($) {\n\n\t\t\tif ($.input === 'remember') {\n\t\t\t\tcache = $.data;\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar val = cache;\n\n\t\t\tif (val == null)\n\t\t\t\tval = null;\n\n\t\t\tif (config.path)\n\t\t\t\tU.set($.data, config.path, val);\n\t\t\telse\n\t\t\t\t$.data = val;\n\n\t\t\t$.send('response');\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe primary goal of this component is to remember data. The component contains two inputs:\n\n- Remember input for remembering data\n- Request input as a trigger for obtaining data, then remembered data would extend the request message (its data), and the component will send it to the Response output\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property\">Set remembered data to the specific property/field</div>\n\t\t<div class=\"help\">If you don't enter the property, the remembered data will replace data on the Request input.</div>\n\t</div>\n</settings>",
			"chnzlb085c": "<script total>\n\n\texports.name = 'API PostgreSQL';\n\texports.icon = 'fa fa-cubes';\n\texports.author = 'Total.js';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.config = { name: 'default', url: '', pooling: 2 };\n\texports.outputs = [{ id: 'error', name: 'Error' }];\n\texports.npm = ['querybuilderpg'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar QB = require('querybuilderpg');\n\t\tvar init = false;\n\t\tvar conf;\n\n\t\tinstance.configure = function() {\n\n\t\t\tinit && QB.init(conf.name);\n\t\t\tconf = instance.replace(config);\n\n\t\t\tif (conf.url) {\n\t\t\t\tQB.init(conf.name, conf.url, config.pooling, function(err, data) {\n\t\t\t\t\tvar msg = instance.newmessage([{ error: err + ' --> ' + data.query }]);\n\t\t\t\t\tmsg.send('error');\n\t\t\t\t});\n\t\t\t\tinit = true;\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tconf && require('querybuilderpg').init(conf.name);\n\t\t\tconf = null;\n\t\t\tinit = false;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component initializes QueryBuilder for PostgreSQL database. So you will able to use `API Database` component. Every connection must be separated by the alias.\n\n__Usage in API Database__:\n\n- `tbl_user` is targeted to the `default/tbl_user` alias connection\n- `anotherserver/tbl_user` will use `anotherserver` alias connection\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Alias</div>\n\t\t\t\t<div class=\"help\">The alias separates various DB connections</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.url__required:1;camouflage:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">Example: postgresql://user:pass@localhost:5432/database_name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.pooling__required:1;type:number\">Pooling</div>\n\t\t\t\t<div class=\"help\">How many connections can it keep?</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\tAlias: <b class=\"monospace\" data-bind=\"CONFIG.name__text\"></b>\n\t</footer>\n</body>",
			"chpq6c0445": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tcompiled = {};\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{dynamic_arg_1}/{dynamic_arg_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n__Output data:__ will be same data extendend by adding new properties:\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"chsvy615c5": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\" class=\"code\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</footer>\n</body>",
			"chuxx5941c": "<script total>\n\n\texports.name = 'API Database';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-database';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', tab: 'list', listtable: '', listfilter: [], listwhere: [], listlimit: 100, listsort: '', listpath: '', createtable: '', createerror: '', readtable: '', readfields: '*', readwhere: [], readpath: '', readsort: '', readerror: '', createtable: '', createpath: '', updatetable: '', updateerror: '', updatepath: '', updatewhere: [], removetable: '', removepath: '', removeerror: '', removewhere: [] };\n\texports.inputs = [{ id: 'list', name: 'List' }, { id: 'create', name: 'Create' }, { id: 'read', name: 'Read' }, { id: 'update', name: 'Update' }, { id: 'remove', name: 'Delete' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar builder = null;\n\t\t\tvar is = false;\n\t\t\tvar data = $.data;\n\t\t\tvar params = data.params || EMPTYOBJECT;\n\t\t\tvar query = data.query || EMPTYOBJECT;\n\t\t\tvar user = data.user || EMPTYOBJECT;\n\n\t\t\tdata = data.data || data.body;\n\n\t\t\tswitch ($.input) {\n\t\t\t\tcase 'create':\n\t\t\t\t\tif (config.createtable)\n\t\t\t\t\t\tbuilder = DB().insert(config.createtable, data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\n\t\t\t\t\tif (config.updatetable) {\n\t\t\t\t\t\tbuilder = DB().update(config.updatetable, data);\n\t\t\t\t\t\tcache.update && cache.update(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.updateerror && builder.error(config.updateerror);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remove':\n\t\t\t\t\tif (config.removetable) {\n\t\t\t\t\t\tbuilder = DB().remove(config.removetable);\n\t\t\t\t\t\tcache.remove && cache.remove(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.removeerror && builder.error(config.removeerror);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'read':\n\t\t\t\t\tif (config.readtable) {\n\t\t\t\t\t\tbuilder = DB().read(config.readtable);\n\t\t\t\t\t\tcache.read && cache.read(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.readerror && builder.error(config.readerror);\n\t\t\t\t\t\tif (cache.readsort) {\n\t\t\t\t\t\t\tfor (var m of cache.readsort)\n\t\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'list':\n\t\t\t\t\tif (config.listtable) {\n\t\t\t\t\t\tbuilder = DB().list(config.listtable);\n\t\t\t\t\t\tbuilder.autoquery(query, cache.listfields, cache.listsort ? (cache.listsort[0] + '_' + cache.listsort[1]) : null, config.listlimit || 100);\n\t\t\t\t\t\tcache.list && cache.list(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (builder) {\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t$.send('error', [{ error: err + '' }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar path = config[$.input + 'path'];\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\tU.set($.data, path, response);\n\t\t\t\t\t\t\t$.send('output');\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\t$.send('error', [{ error: 'Not configured' }]);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tconfig.tab = 'list';\n\n\t\t\tvar types = ['list', 'update', 'read', 'remove'];\n\t\t\tvar builder;\n\t\t\tvar tmp;\n\n\t\t\tfor (var key of types) {\n\n\t\t\t\tbuilder = [];\n\n\t\t\t\tfor (var item of config[key + 'where']) {\n\t\t\t\t\tvar val = 'null';\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase '1':\n\t\t\t\t\t\t\tval = item.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '2':\n\t\t\t\t\t\t\tval = '\\'' + item.value.replace(/'/g, '\\\\\\'') + '\\'';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\tval = item.value.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === '1' || item.value === 'true' || val === 'on';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === 'now' ? 'new Date()' : item.value.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '6':\n\t\t\t\t\t\t\tval = 'null';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbuilder.push('where(\\'{0}\\', \\'{1}\\', {2})'.format(item.name, item.comparer, val));\n\t\t\t\t}\n\n\t\t\t\tcache[key] = builder.length ? new Function('params', 'data', 'query', 'user', 'refs', '$', 'builder', 'builder.' + builder.join('.')) : null;\n\t\t\t}\n\n\t\t\ttypes = ['list', 'read'];\n\n\t\t\tfor (var key of types) {\n\t\t\t\tvar k = key + 'sort';\n\t\t\t\tif (config[k]) {\n\t\t\t\t\tcache[k] = [];\n\t\t\t\t\ttmp = config[k].split(/,|;/);\n\t\t\t\t\tfor (var m of tmp) {\n\t\t\t\t\t\tm = m.trim().split(' ');\n\t\t\t\t\t\tm[1] = (m[1] || '').toLowerCase() === 'asc';\n\t\t\t\t\t\tcache[k].push(m);\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tcache[k] = null;\n\t\t\t}\n\n\t\t\tcache.listfields = '';\n\n\t\t\tfor (var item of config.listfilter) {\n\t\t\t\ttmp = 'string';\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase '3':\n\t\t\t\t\t\ttmp = 'number';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '4':\n\t\t\t\t\t\ttmp = 'boolean';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '5':\n\t\t\t\t\t\ttmp = 'date';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcache.listfields += (cache.listfields ? ',' : '') + item.name + ':' + tmp;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component can perform some operations on a database with the help of Total.js QueryBuilder. First, you must initialize the connection string for the database via QueryBuilder initialization.\n\n__Input data__:\n\n- `data {Object}` or `body {Object}` optional - payload\n- `query {Object}` optional - query data, key/value must be string\n- `params {Object}` optional - dynamic values, key/value must be string\n- `user {Object}` optional - a user instance\n\n__Output__:\n\n- `insert` returns Number\n- `update` returns Number\n- `remove` returns Number\n- `query` returns Array of Objects\n- `read` returns Object\n- `list` returns:\n\n```json\n{\n\titems: Array,\n\tpage: Number,\n\tpages: Number,\n\tcount: Number\n}\n```\n\nQuery parameters for the `List` operation can contain the below fields which can affect filtering according to the values defined in the dynamic filter.\n\n- `sort {String}` can contain field name with `_asc` or `_desc` value\n- `fields {String}` can return only specified fields separated by comma\n- `page {Number}` page number\n- `limit {Number}` max. items per page (default: max. limit)\n- `column_name=VALUE` enables dynamic filtering\n\n---\n\n__Good to know__: If the `data` (payload) can contain special key names in the form:\n\n- `+key` increments a value\n- `-key` decrements a value\n- `!key` performs toggle for boolean values\n- `>key` stores only greater value\n- `<key` stores only lower value\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings .item { padding: 7px 10px; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\n\t<script type=\"text/html\" class=\"apidatabasestaticfilter\">\n\t\t<div data---=\"listform__?.TYPEwhere__autofocus:1;empty:You do not have defined any rules\">\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} {{ comparer }} <b>{{ if type == '6' }}null{{ else }}{{ value }}{{ fi }}</b></div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'id'\">Name</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.comparer__required:1;align:1;dirsource:tmpcruddb.comparers__'='\">Comparer</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types__'1'\">Type</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.value__monospace:1;align:1__''\" data-bind=\"?.type__enable:value!=='6'\">Value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"help\"><b>Expression</b> supports these commands <code>params {Object}</code>, <code>query {Object}</code>, <code>data {Object}</code>, <code>user {Object}</code>. A value for date field can contain <code>now</code> with the current date/time.</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t</SCR>\n\t\t</div>\n\t</script>\n\n\t<div class=\"CLASS-settings\">\n\n\t\t<div class=\"padding bg-smoke\">\n\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\n\t\t\t<ul class=\"tabmenu\" data---=\"tabmenu__?.tab__null__'list'\">\n\t\t\t\t<li data-value=\"list\">List</li>\n\t\t\t\t<li data-value=\"read\">Read</li>\n\t\t\t\t<li data-value=\"create\">Create</li>\n\t\t\t\t<li data-value=\"update\">Update</li>\n\t\t\t\t<li data-value=\"remove\">Delete</li>\n\t\t\t</ul>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding npt\">\n\n\t\t\t<div data-bind=\"?.tab__show:value==='list'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-list\"></i>List input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listlimit__type:number;required:1;monospace:1\">Max. limit</div>\n\t\t\t\t\t\t<div class=\"help\">Max. records to output</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=list\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel\">\n\t\t\t\t\t<label class=\"bg-smoke\">Dynamic filter</label>\n\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t<div data---=\"listform__?.listfilter__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} <b>{{ type | tmpapidatabasetype }}</b></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'dtcreated'\">Name</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types2__'5'\">Type</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='read'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-glasses\"></i>Read input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<hr />\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readfields__monospace:1\"><b>Read fields</b></div>\n\t\t\t\t\t\t<div class=\"help\">Seperate them by the comma. Empty value or <code>*</code> returns all fields (columns).</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=read\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='create'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-plus-circle\"></i>Create input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='update'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-pencil\"></i>Update input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updateerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=update\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='remove'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-trash-alt\"></i>Delete input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removeerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=remove\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmpapidatabase;\n\n\t\t\tif (!tmp) {\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.commands = [];\n\t\t\t\ttmp.commands.push({ id: 'list', name: 'List' });\n\t\t\t\ttmp.commands.push({ id: 'read', name: 'Read' });\n\t\t\t\ttmp.commands.push({ id: 'insert', name: 'Insert' });\n\t\t\t\ttmp.commands.push({ id: 'update', name: 'Update' });\n\t\t\t\ttmp.commands.push({ id: 'delete', name: 'Delete' });\n\t\t\t\ttmp.comparers = [];\n\t\t\t\ttmp.comparers.push({ id: '=', name: '=' });\n\t\t\t\ttmp.comparers.push({ id: '>', name: '>' });\n\t\t\t\ttmp.comparers.push({ id: '>=', name: '>=' });\n\t\t\t\ttmp.comparers.push({ id: '<', name: '<' });\n\t\t\t\ttmp.comparers.push({ id: '<=', name: '<=' });\n\t\t\t\ttmp.comparers.push({ id: '<>', name: '<>' });\n\n\t\t\t\ttmp.types = [];\n\t\t\t\ttmp.types.push({ id: '1', name: 'Expression' });\n\t\t\t\ttmp.types.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types.push({ id: '5', name: 'Date' });\n\t\t\t\ttmp.types.push({ id: '6', name: 'NULL' });\n\n\t\t\t\ttmp.types2 = [];\n\t\t\t\ttmp.types2.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types2.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types2.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types2.push({ id: '5', name: 'Date' });\n\n\t\t\t\tThelpers.tmpapidatabasetype = function(val) {\n\t\t\t\t\treturn tmp.types2.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapidatabase = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"chvhr9eb24": "<script total>\n\n\texports.name = 'CORS';\n\texports.group = 'REST API';\n\texports.icon = 'fab fa-html5';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\t\tvar route = CORS();\n\t\tinstance.close = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\troute = null;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component enables Cross-Origin Resource Sharing `CORS`, so the web browser will be able to communicate directly with the REST API. The functionality will work only with a defined Proxy endpoint for this Flow.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"fa-3x fab fa-html5\" style=\"color:#BD6B27\"></i>\n\t\t<div class=\"mt10 fs12\">CORS enabled</div>\n\t</div>\n</body>",
			"chxs92d30e": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"chyqe6dd66": "<script total>\n\n\texports.id = 'date';\n\texports.name = 'Date';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-calendar';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t\tinstance.configure = function configure() {\n\t\t\tinstance.status(config.format || 'yyyy-MM-dd HH:mm:ss');\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.trigger = function trigger() {\n\t\t\tinstance.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.format__placeholder:yyyy-MM-dd HH\\:mm\\:ss\">Date format</div>\n\t\t<p>\n\t\t\td - day e.g. 1<br>\n\t\t\tdd - day e.g. 01<br>\n\t\t\tddd - day (named). MO<br>\n\t\t\tdddd - day (named). Monday<br>\n\t\t\tM - month e.g. 1<br>\n\t\t\tMM - month e.g. 01<br>\n\t\t\tMMM - month (named). Jan<br>\n\t\t\tMMMM - month (named). January<br>\n\t\t\tyy - year e.g. 16<br>\n\t\t\tyyyy - year e.g. 2016<br>\n\t\t\tw - week number e.g. 1<br>\n\t\t\tww - week number e.g. 01<br>\n\t\t\tH - hour e.g. 1<br>\n\t\t\tHH - hour e.g. 01<br>\n\t\t\tm - minute e.g. 1<br>\n\t\t\tmm - minute e.g. 01<br>\n\t\t\ts - second e.g. 1<br>\n\t\t\tss - second e.g. 01<br>\n\t\t\ta - AM/PM\n\t\t</p>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci0a550362": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"ci0v4e844c": "<script total>\n\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data;' + builder.join('') + '$.destroy();');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sort data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > div { padding: 10px; font-size: 12px; }\n\t.CLASS footer .newbie { display: none; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASSsettings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASSsettings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASSsettings\">\n\t\t<div data---=\"listform__?.conditions__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"fa fa-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1__''\" class=\"m\">Name</div>\n\t\t\t\t\t<div data---=\"input__?.if__required:1__'value != null'\">Condition</div>\n\t\t\t\t\t<div class=\"help m\"><i class=\"fa fa-exclamation-triangle\"></i><code>value</code> represents a message data. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<div data---=\"validate__?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__text__show\" class=\"red\"></div>\n\t\t<div class=\"newbie\"><i class=\"fa fa-clock-o mr5\"></i>Waits for applying</div>\n\t</footer>\n</body>",
			"ci1cf7fe31": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci21rf35b4": "<script total>\n\texports.id = 'middleware_exec';\n\texports.name = 'Middleware Exec';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { id: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function message($) {\n\t\t\tif (!config.id) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar com = instance.main.instances().findItem('id', config.id);\n\n\t\t\tif (!com || !com.execute) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcom.execute($, function(err, data){\n\t\t\t\tif (err)\n\t\t\t\t\t$.send('error', err);\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function call(data, callback) {\n\t\tvar coms = this.instances().filter(ins => ins.component === 'middleware_function' && ins.config.name).map(ins => ({ id: ins.id, name: ins.config.name }));\n\t\tcallback(coms);\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\t\texports.settings = function(meta) {\n\t\t\tmeta.call(function(response) {\n\t\t\t\tSET('%functions', response);\n\t\t\t}, true);\n\t\t};\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%functions;dirraw:1;placeholder:Select middleware function;dirempty:No functions;required:1\" class=\"m\">Name</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci2ol4a50c": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci39e1e50f": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? Buffer.from(value, item.convert.substring(4)) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.path && config.rewrite)\n\t\t\t\tU.set($.data, config.path, obj);\n\n\t\t\t$.send('output', obj);\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"ci40w50cc5": "<script total>\n\n\texports.name = 'Server extension';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-flag-checkered';\n\texports.author = 'Total.js';\n\texports.config = { name: 'My extension', install: '', uninstall: '', icon: exports.icon };\n\n\texports.make = function(instance, config) {\n\n\t\tvar install = null;\n\t\tvar uninstall = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (uninstall) {\n\t\t\t\tuninstall.call(instance, instance, require);\n\t\t\t\tuninstall = null;\n\t\t\t\tsetTimeout(instance.configure, 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tinstall = config.install ? new Function('instance', 'require', config.install) : null;\n\t\t\t\tuninstall = config.uninstall ? new Function('instance', 'require', config.uninstall) : null;\n\t\t\t} catch (e) {\n\t\t\t\tinstall = null;\n\t\t\t\tuninstall = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\n\t\t\tinstall && install.call(instance, instance, require);\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tuninstall && uninstall.call(instance, instance, require);\n\t\t\tuninstall = null;\n\t\t\tinstall = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component installs Total.js server-side extension. In other words: it can evaluate JavaScript code when the component is initialized or the component settings is changed.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:e.g. Database\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Installation code:</div>\n\t\t<div data---=\"codemirror__?.install__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help m\">The code will be executed when the configuration is changed or the component instance is initialized.</div>\n\t\t<div class=\"ui-input-label\">Uninstallation code:</div>\n\t\t<div data---=\"codemirror__?.uninstall__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">The code above will be executed when the configuration is changed or the component instance is removed.</div>\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\" data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<i class=\"fa-2x {{ value.icon }}\"></i>\n\t\t\t<div class=\"mt10 fs12\">{{ value.name }}</div>\n\t\t\t<div class=\"help npt nmt\">Server extension</div>\n\t\t</script>\n\t</div>\n</body>",
			"ci4i028e45": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ci4yb31396": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ci5lsa7a49": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; min-width: 150px; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec button hidden\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__hide\">Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci6662d511": "<script total>\n\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true, name: 'Debug' };\n\texports.inputs = [{ id: 'input', name: 'Log window' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status({ name: config.name, date: new Date(), data: output });\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name\" class=\"m\">Name</div>\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"far fa-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<div data---=\"box__common.$debug__if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:fa fa-bug;zindex:5\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"fa fa-trash-alt\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></div>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"fa fa-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(data.data, '\\t'))));\n\t\t};\n\n\t});\n\n</script>",
			"ci6sh4b21d": "<script total>\n\texports.id = 'middleware_function';\n\texports.name = 'Middleware Function';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// callback(...);' };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tfn = new Function('instance', '$', 'data', 'repo', 'require', 'vars', 'callback', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tinstance.status(config.name);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.execute = function execute($, callback) {\n\t\t\tif (!fn)\n\t\t\t\tcallback();\n\t\t\telse\n\t\t\t\tfn(instance, $, $.data, $.repo, require, instance.variables, callback);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThe code defined in this component can be executed by multiple `Middleware Exec`.\n**Example:**\n```js\n// available arguments\n// instance {FlowStreamComponent}\n// $        {FlowStreamMessage}\n// data     reference to $.data\n// repo     reference to $.repo\n// vars     reference to instance.main.variables\n\nif (data.headers['x-token'] === instance.main.variables.token)\n\t// data will be send to `Output` output of `Middleware Exec` component\n\tcallback(null, data);\nelse\n\t// data will be send to `Error` output of `Middleware Exec` component\n\tcallback('an error occured');\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t<div class=\"ui-input-label\">Code</div>\n\t\t<div data---=\"codemirror__?.code__required:1;type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci79kc8f4a": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci82ffd82e": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ciai4ea3c7": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cib2305565": "<script total>\n\n\texports.name = 'Map array';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar arr, newarr = [];\n\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tarr = get(config.path);\n\t\t\t\t} catch(e) {}\n\t\t\t} else {\n\t\t\t\tarr = $.data;\n\t\t\t}\n\n\t\t\tif (!config.map)\n\t\t\t\treturn instance.throw('No configuration');\n\t\t\tif (!Array.isArray(arr))\n\t\t\t\treturn instance.throw('Input data is not an array');\n\n\t\t\tvar len = arr.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvar item = arr[i];\n\t\t\t\t\tif (typeof(item) !== 'object' || Array.isArray(item))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar val = getNewObj(arr[i], config.map);\n\t\t\t\t\tnewarr[i] = val;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data = newarr;\n\t\t\t$.send('output', );\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\n\t\t};\n\n\t\tinstance.configure();\n\t\t// from obj to result -> obj.name to result.name\n\t\tconst getNewObj = (obj, map) => {\n\t\t\tvar result = config.array ? [] : {};\n\t\t\tvar len = map.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvar paths = map[i]; // { source: 'path.to.value', target: 'new.path.to.value' }\n\t\t\t\tvar val = get(obj, paths.source);\n\n\t\t\t\tif (val) {\n\t\t\t\t\tif (config.array) {\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!paths.target)// no path, ignore it\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (paths.target === '...') // keep the same path\n\t\t\t\t\t\tpaths.target = paths.source;\n\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\telse\n\t\t\t\t\t\tset(result, paths.target, val);\n\t\t\t\t} else {\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n## The input must be an array of objects !!\n\nThis component can iterate over an array and only take properties listed in the configuration.\n### Example data:\n```js\n\t[\n\t\t{ sensor: { temperature: 25, humidity: 50, ... some more properties }},\n\t\t{ sensor: { temperature: 24, humidity: 55, ... some more properties }},\n\t\t{ sensor: { temperature: 23, humidity: 60, ... some more properties }}\n\t]\n```\n### Example configuration:\n`sensor.temperature` -> `temp`\n`sensor.humidity` -> `hum`\n\n### Example output:\n```js\n\t[\n\t\t{ temp: 25, hum: 50 },\n\t\t{ temp: 24, hum: 55 },\n\t\t{ temp: 23, hum: 60 }\n\t]\n```\n\nIf `Return an Array of Arrays` is checked then\neach of the Map properties will be pushed to a new array, see example bellow\n\n### Example given the data above and this configuration:\n`Return an Array of Arrays` -> **checked**\n**Map**\n`sensor.temperature`\n`sensor.humidity`\n\n### Example output:\n```js\n\t[\n\t\t[25, 50],\n\t\t[24, 55],\n\t\t[23, 60],\n\t]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.array__type:checkbox\" class=\"m\">Return an Array of Arrays (Default: Array of Objects)</div>\n\t\t<section class=\"maparray-section m\">\n\t\t\t<label>Map</label>\n\t\t\t<!--<div data---=\"keyvalue___?.map__placeholderkey:Type a path to property;placeholdervalue:Type a new path to a property\" class=\"maparray-keyvalue\"></div>-->\n\n\t\t\t<div data-bind=\"?.map__template:.maparray-item -> data-index\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach item in value }}\n\t\t\t\t\t<div class=\"maparray-item\" data-index=\"{{ $index }}\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"\" data-bind=\"?.array__.col-md-11:value__.col-md-5:!value\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].source\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div class=\"m\" style=\"line-height: 35px;\">--&gt;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-5\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].target\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.maparray_remove_item\" data-index=\"{{ $index }}\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\" data-bind=\"?.array__hide\">You can use 3 dots(...) in the right field to keep the same path.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.maparray_add_item\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.maparray_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.maparray_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.maparray_add_item = function(el) {\n\t\tconsole.log('ADDING', el);\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.map', { source: '', target: '' });\n\t};\n\n\tFUNC.maparray_remove_item = function(el) {\n\t\tconsole.log('REMOVING', el);\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.attrd('index');\n\t\tconfig.map.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.CLASS .button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.CLASS .button-add:hover { background-color: #F8F8F8; }\n\t.CLASS .button-add:active { background-color: #E0E0E0; }\n\n\t.CLASS .ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.CLASS .ui-dark .button-add:hover { background-color: #303030; }\n\t.CLASS .ui-dark .button-add:active { background-color: #404040; }\n\n\t.maparray-section > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n\t.maparray-section { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.maparray-keyvalue .ui-keyvalue-item-key { width: 50% !important; }\n\t.maparray-keyvalue .ui-keyvalue-item-value { margin: 0 32px 0 50% !important; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cicbpc77a1": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"cie527e4": "<script total>\n\n\texports.name = 'Downloader';\n\texports.icon = 'fa fa-download';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tconst { unlink } = require('fs').promises;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tconst urlpath = config.urlpath || 'url';\n\n\t\t\tconst url = get(data, urlpath);\n\t\t\tif (!url)\n\t\t\t\treturn;\n\n\t\t\tconst filename = 'tmp/{0}.{1}'.format(UID(), U.getExtension(url));\n\n\t\t\tDOWNLOAD(data.url, filename, function(err, response){\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst { filename, body, origin, status, headers } = response;\n\t\t\t\t$.send('output', { filename, body, origin, status, headers });\n\t\t\t\t$.on('terminate', () => {\n\t\t\t\t\tunlink(PATH.root(filename)).catch(e => console.log('[Downloader] Failed to unlink file: ' + filename  + ' | ' + e.message));\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\turl: 'https://example.com/file.jpg', // file url\n}\n```\n\n## Output\nA response object as returned by [DOWNLOAD()](https://docs.totaljs.com/total4/407ff001jy51c/#88aab001hd51c) function.\n```js\n{\n\tfilename: '/tmp/xyz.ext',\n\t...\n}\n```\nThe file will be automaticaly deleted once the message is destroyed.\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.urlpath\">Path to URL in the incomming object (default 'url')</div>\n\t\t<div class=\"help m\">Supports dot notation like so: \"path.to.url\" or \"arr.0.url\" if the \"arr\" is an array. \"arr[0].url\" is not supported</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cif9193b72": "<script total>\n\n\texports.id = 'cron';\n\texports.name = 'Cron';\n\texports.icon = 'fa fa-clock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { jobs: [] };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['node-schedule'];\n\n\texports.make = function(instance, config) {\n\t\tvar schedule = require('node-schedule');\n\n\t\tvar startup = true;\n\t\tvar jobs = [];\n\n\t\tinstance.configure = function() {\n\t\t\tstartJobs(config.jobs);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tjobs.length && jobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t\tif (!job)\n\t\t\t\t\tconsole.log('no job', jobs);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction startJobs(newjobs) {\n\n\t\t\tjobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t});\n\n\t\t\tjobs = [];\n\n\t\t\tnewjobs.forEach(function(job){\n\t\t\t\tjob = job.split('|').trim();\n\n\t\t\t\tif (job[0] === '@startup' && startup) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tinstance.send('output', job[1]);\n\t\t\t\t\t}, 5000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar j = schedule.scheduleJob(job[0], function(){\n\n\t\t\t\t\tvar value = job[1];\n\n\t\t\t\t\tif (job[1] === '@ts')\n\t\t\t\t\t\tvalue = Date.now();\n\n\t\t\t\t\tinstance.send('output', value);\n\t\t\t\t});\n\n\t\t\t\tjobs.push(j);\n\t\t\t});\n\n\t\t\tinstance.status(newjobs.length || '0');\n\n\t\t\tstartup = false;\n\t\t}\n\n\t};\n\n</script>\n\n<readme>\n[node-schedule](https://www.npmjs.com/package/node-schedule) on npmjs.com\n\nSyntax:\n`cron string | data (only string supported) | comment`\n\n## Cron string:\n`* * * * * *`\nMeaning of each `*` explained bellow, in order from left to right\nsecond (0 - 59, OPTIONAL)\nminute (0 - 59)\nhour (0 - 23)\nday of month (1 - 31)\nmonth (1 - 12)\nday of week (0 - 7) (0 or 7 is Sun)\n\nor\n`@startup` to run once at the start or restart of an app (after 5 seconds)\n\n### Examples of cron string:\n```\n0 16 * * *      -> trigger every day at 16:00\n* 0 16 * * *    -> trigger at 16:00 every day and it will keep triggering every second until 16:01\n20,40 19 * * *  -> every day at 19:20 and 19:40\n*/5 * * * *     -> trigger every 5 seconds\n0 20 * * 1      -> every monday at 20:00\n@startup        -> runs once at startup\n```\n\n### Full example:\n```\n* 0 16 * * * | hello data | this is hello comment\n@startup | start\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textboxlist__?.jobs__maxlength:50;placeholder:enter value like '* 1 * * * * | day' and hit enter\" class=\"m\">Cron jobs</div>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.cron_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.cron_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; font-weight: bold; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><span data-bind=\"!STATUS__text\"></span>Number of jobs:</footer>\n</body>",
			"cifpxfc971": "<script total>\n\n\texports.id = 'kill';\n\texports.name = 'Kill';\n\texports.color = '#E73323';\n\texports.icon = 'fa fa-skull';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.main.kill();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nBe careful because this component will kill the current Flow instance. It's targeted only for exceptional cases.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cig7rda52b": "<script total>\n\texports.id = 'modify';\n\texports.name = 'Modify';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tfor (let i = 0; i < Rules.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { getValue, setValue } = Rules[i];\n\n\t\t\t\t\tvar data = getValue($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\t\t\t\t\tsetValue(data, $, instance, set);\n\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.rules || !config.rules.length)\n\t\t\t\treturn;\n\n\t\t\tconst rules = config.rules;\n\t\t\tRules = [];\n\n\t\t\trules.forEach(function eachCondition(cond, index){\n\n\t\t\t\tconst { rule, source, sourcepath, target, targetpath } = cond;\n\t\t\t\tvar getValue, setValue;\n\n\t\t\t\tif (rule === 'remove') {\n\n\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t\tif (!targetpath) {\n\t\t\t\t\t\tif (is$) // set $.data or $.repo to null\n\t\t\t\t\t\t\tsetValue = (d, $) => { $[target] = null; };\n\t\t\t\t\t\telse // ignore variables or variables2\n\t\t\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', 'set({0}, {1}, null);'.format(base, sourcepath));\n\t\t\t\t\t}\n\n\t\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rule === 'set' || rule === 'move') {\n\n\t\t\t\t\tif (source === 'expression')\n\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', sourcepath.indexOf('return') > -1 ? sourcepath : 'return ' + sourcepath + ';');\n\t\t\t\t\telse if (source === 'string')\n\t\t\t\t\t\tgetValue = () => sourcepath; // sourcepath is the actual string value\n\t\t\t\t\telse if (source === 'number') {\n\t\t\t\t\t\tgetValue = () => Number(sourcepath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar str = 'if ({0}) return {1}; if (typeof {1} !== \\'object\\' || {1} == null) return; return {2};'.format(sourcepath ? 'false' : 'true', source, sourcepath ? 'get({0}, \\'{1}\\')'.format(source, sourcepath) : sourcepath);\n\t\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\t\t\tconsole.error(str);\n\t\t\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar str;\n\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t// targetpath => data | repo | variables | variables2\n\t\t\t\tif (!targetpath)\n\t\t\t\t\tstr = base + ' = data;';\n\t\t\t\telse\n\t\t\t\t\tstr = 'if (typeof {0} !== \\'object\\' || {0} == null) {0} = {1}; set({0}, \\'{2}\\', data);'.format(base, isNaN(targetpath[0]) ? '{}' : '[]', targetpath);\n\n\t\t\t\tif (rule === 'move' && sourcepath) {\n\t\t\t\t\tvar is$2 = source === 'data' || source === 'repo';\n\t\t\t\t\tvar base2 = (is$2 ? '$.' : 'instance.main.') + source;\n\t\t\t\t\t// don't delete source if the target is within the same path: source $.data.device --> target $.data.device.data\n\t\t\t\t\tif (base !== base2 || !targetpath.startsWith(sourcepath))\n\t\t\t\t\t\tstr += ' set({0}, \\'{1}\\', null);'.format(base2, sourcepath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t};\n\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t});\n\t\t};\n\n\t\ttry {\n\t\t\tinstance.configure();\n\t\t} catch (e) { console.error(e);}\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tThis component allows you to set/modify/move/remove properties of the incomming data.\n\tFor eaxample, to set the message data to a string `Hello world` select *Message data* in the rule dropdown and leave the text field empty.\n\tThen in the bellow dropdown select `string` and enter the desired string in the text field.\n\tResult:\n\t- before: $.data -> 'Hello world'\n\t- after:  $.data -> 'New string'\n\n\t## Expression\n\tAvailable params are: `data`, `repo`, `variables` ,`variables2`\n\tWhere data is message.data, repo is message.repo --> [Documentation](https://docs.totaljs.com/total4/40844001ni51c)\n\tAnd variables are local variables which can be set in the Variables dialog accessible on the main toolbar(the button between Plus icon and Bug icon)\n\tFor example, we want message data to be the value of (data.value + variables.offset)\n\tResult:\n\t- before: $.data --> `{ value: 100 }` / variables --> `{ offset: 20, ... many other properties }`\n\t- after:  $.data -> `{ value: 120 }`\n\tThe expression: `data.value + variables.offset`\n\n\t### Important\n\t- `Remove` -> `Message data / Message repo` -> `<empty path>` will set `Message data / Message repo` to `null`;\n\t- `Remove` -> `Local variables / Global variables` -> `<empty path>` will be ignored but `Remove` -> `Local variables / Global variables` -> `myVar` will work.\n\t- `Set` -> `Message data` -> `some.path` to: `Message data` -> `some.other.path` will add another property to the incoming data and rest of the data will remain untouched\n\t- `Set` -> `Message data` -> `<empty path>` to: `Message data` -> `some.path` will essentialy overwrite the incomming data, after this there's no longer access to original data(same goes for repo)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<section class=\"modify-rules m\">\n\t\t\t<label>Rules</label>\n\t\t\t<div data-bind=\"?.rules__template:.modify-rule -> data-index\" data---=\"movable__?.rules__selector:.dragme;exec:FUNC.modify_rule_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach rule in value }}\n\t\t\t\t\t<div class=\"modify-rule dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].rule__dirsource:REPO.modify_rules\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<div class=\"m\">--&gt;</div>\n\t\t\t\t\t\t\t\t<div data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">to:</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-7\">\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].target__dirsource:REPO.modify_targets\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].targetpath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group\" data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].source__dirsource:REPO.modify_sources\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].sourcepath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.modify_remove_rule\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each rule will be applied in the order from top to bottom.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.modify_add_rule\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.modify_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.modify_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.modify_add_rule = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.rules', { rule: 'set', source: '', sourcetype: '', target: '', targettype: '' });\n\t};\n\n\tFUNC.modify_remove_rule = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.modify_rule').attrd('index');\n\t\tconfig.rules.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_rule_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.rules.splice(dragged_index, 1)[0];\n\t\tconfig.rules.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.modify_sources = 'string|String,number|Number,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_targets = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_rules = 'set|Set,remove|Remove,move|Move'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.modify-input-group { clear: both; height: 36px; }\n\t.modify-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.modify-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.modify-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.modify-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.modify-rules { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.modify-rule { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.modify-rule > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.modify-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.modify-thead { padding: 8px; margin-bottom:4px; }\n\t.modify-rules > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cigr3c2577": "<script total>\n\n\texports.name = 'Switch';\n\texports.icon = 'fa fa-sitemap fa-rotate-270';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<div data---=\"input__?.source__dirsource:REPO.switch_datasources__'data'\"></div>\n\t\t\t<div data---=\"input__?.path\"></div>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.conditions__template:.switch-condition -> data-index\" data---=\"movable__?.conditions__selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].operator__dirsource:REPO.switch_operators\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t<div data-bind=\"?.conditions[{{ $index }}].operator__hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty'__.switch-input-group:value!=='expression'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].type__dirsource:REPO.switch_valuetypes\" data-bind=\"?.conditions[{{ $index }}].operator__hide:value==='expression'\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].value__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].name\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cihawfaa1c": "<script total>\n\n\texports.name = 'Test';\n\texports.icon = 'fa fa-info';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', 'Hello world output');\n\t\t\t$.send('dynamic', 'Hello world dynamic');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = config.outputs;\n\t\t\tinstance.save();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\tTest\n</readme>\n\n<settings>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cihxm4ad07": "<script total>\n\n\texports.id = 'range';\n\texports.name = 'Range';\n\texports.icon = 'fa fa-arrows-h';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tvar inmin, inmax, outmin, outmax;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar val = parseFloat(typeof(data) === 'object' ? U.get(data, config.property) : data);\n\n\t\t\tif (!val || typeof val !== 'number') {\n\t\t\t\tinstance.throw('Value \"{0}\" is not a number'.format(val.toString().substring(0, 20)));\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (val < inmin) {\n\t\t\t\t$.data = inmin;\n\t\t\t} else if (val > inmax)\n\t\t\t\t$.data = inmax;\n\t\t\telse {\n\t\t\t\tdata = outmin + (outmax - outmin) * (val - inmin) / (inmax - inmin);\n\t\t\t\t$.data = config.round ? Math.round(data) : data;\n\t\t\t}\n\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinmin = parseFloat(config.input_min || 0);\n\t\t\tinmax = parseFloat(config.input_max || 1023);\n\t\t\toutmin = parseFloat(config.output_min || 0);\n\t\t\toutmax = parseFloat(config.output_max || 100);\n\t\t\tinstance.status(`${inmin} - ${inmax} --> ${outmin} - ${outmax}`);\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.property__placeholder:e.g. path.to.property\" class=\"m\">Property (unless the data is the value itself)</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_min__type:number\" class=\"m\">Input min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_max__type:number\" class=\"m\">Input max (defaults to 1023)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_min__type:number\" class=\"m\">Output min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_max__type:number\" class=\"m\">Output max (defaults to 100)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.round__type:checkbox\">Round output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cikxlfe14d": "<script total>\n\n\texports.name = 'Stopwatch';\n\texports.group = 'Stats';\n\texports.version = '3';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Stopwatch', delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Counter' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar max = 9;\n\t\tvar results = [];\n\t\tvar timeout;\n\t\tvar count = 0;\n\t\tvar ts;\n\n\t\tvar flush = function() {\n\t\t\tvar diff = Date.now() - ts;\n\t\t\ttimeout = null;\n\t\t\tif (results.unshift({ date: new Date(), duration: (diff / 1000).floor(3), count: count }) > max)\n\t\t\t\tresults.pop();\n\t\t\tcount = 0;\n\t\t\tinstance.status(results, 1000);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\t$.destroy();\n\n\t\t\tif (timeout)\n\t\t\t\tclearTimeout(timeout);\n\t\t\telse\n\t\t\t\tts = Date.now();\n\n\t\t\tcount++;\n\t\t\ttimeout = setTimeout(flush, config.delay);\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\t\t\tresults = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tresults = [];\n\t\t\tinstance.status(results);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\tif (results.length)\n\t\t\t\tresults = [];\n\n\t\t\tcount = 0;\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; width: 220px; }\n\t.CLASS .result { height: 22px; font-size: 11px; border-top: 1px solid #E0E0E0; line-height: 22px; }\n\t.CLASS .result .ts { margin-right: 100px; }\n\t.CLASS .result .duration { float: right; width: 100px; text-align: right; }\n\t.ui-dark .CLASS .result { border-top-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-8 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1;align:1;ricon:!ms\">Idle time delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component runs a simple stopwatch for incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button></div>\n\t\t<div data-bind=\"STATUS__template__show:value && value.length\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ foreach m in value }}\n\t\t\t\t<div class=\"result\">\n\t\t\t\t\t<span class=\"duration\">{{ m.duration | format(3) }} sec</span>\n\t\t\t\t\t<div class=\"ts\" title=\"{{ m.date | format('[ts]') }}\">{{ m.date | format('[time]') }} ({{ m.count }})</div>\n\t\t\t\t</div>\n\t\t\t\t{{ end }}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cilkhc268b": "<script total>\n\n\texports.name = 'Duration';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = {};\n\n\t\tstats.min = null;\n\t\tstats.max = null;\n\t\tstats.avg = 0;\n\t\tstats.last = 0;\n\t\tstats.count = 0;\n\n\t\tinstance.trigger = function() {\n\t\t\tstats.min = null;\n\t\t\tstats.avg = 0;\n\t\t\tstats.max = null;\n\t\t\tstats.last = null;\n\t\t\tstats.count = 0;\n\t\t\tinstance.status(stats);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar duration = ((Date.now() - $.duration) / 1000).floor(3);\n\n\t\t\tif (stats.min === null || stats.min > duration)\n\t\t\t\tstats.min = duration;\n\n\t\t\tif (stats.max === null || stats.max < duration)\n\t\t\t\tstats.max = duration;\n\n\t\t\tstats.avg = ((stats.max + stats.min) / 2).floor(3);\n\t\t\tstats.last = duration;\n\t\t\tstats.count++;\n\n\t\t\tinstance.status(stats, 500);\n\t\t\t$.send('output', stats);\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component counts message duration. All values except `count` are defined in seconds.\n\n__Output__:\n\n```js\n{\n\tmin: Number,\n\tmax: Number,\n\tavg: Number,\n\tlast: Number,\n\tcount: Number\n}\n```\n</readme>\n\n<style>\n\t.CLASS .keyvalue > span { width: 60px; }\n\t.CLASS .keyvalue > div { margin-left: 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer style=\"padding:10px;width:180px\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<div data-bind=\"STATUS__template__.keyvalue\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Min</span>\n\t\t\t\t\t<div class=\"right\">{{ value.min | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Max</span>\n\t\t\t\t\t<div class=\"right\">{{ value.max | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Avg</span>\n\t\t\t\t\t<div class=\"right\">{{ value.avg | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Last</span>\n\t\t\t\t\t<div class=\"right\">{{ value.last | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Count</span>\n\t\t\t\t\t<div class=\"right b\">{{ value.count | format(0) | empty }}</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cim4f4e8f2": "<script total>\n\n\texports.id = 'dataset';\n\texports.name = 'CSV Dataset';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.config = { name: '', unit: '', icon: '', color: '', decimals: 2, type: 'daily', sum: 0 };\n\texports.inputs = [{ id: 'input', name: 'Value' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar uid = (instance.main.id + '_' + instance.id).makeid();\n\t\tvar filename_meta = PATH.private('dataset_' + uid + '.meta');\n\t\tvar filename_data = PATH.private('dataset_' + uid + '.csv');\n\t\tvar meta = {};\n\n\t\tvar updatestatus = function() {\n\t\t\tinstance.status({ id: uid, keys: meta.keys });\n\t\t};\n\n\t\tF.Fs.readFile(filename_meta, function(err, response) {\n\t\t\tmeta = response ? response.toString('utf8').parseJSON(true) : CLONE(config);\n\t\t\tif (!meta.keys)\n\t\t\t\tmeta.keys = {};\n\t\t\tmeta.id = uid;\n\t\t\tupdatestatus();\n\t\t\tF.Fs.lstat(filename_data, function(err) {\n\t\t\t\tif (err)\n\t\t\t\t\tF.Fs.appendFile(filename_data, 'key,value,min,max,sum,count,tshour,tsday,tsweek,tsmonth,tsyear\\n', NOOP);\n\t\t\t});\n\t\t});\n\n\t\tinstance.close = function(removed) {\n\t\t\tif (removed) {\n\t\t\t\tF.Fs.unlink(filename_meta, NOOP);\n\t\t\t\tF.Fs.unlink(filename_data, NOOP);\n\t\t\t\tdb = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.insert = function(data) {\n\n\t\t\tvar writer = null;\n\t\t\tvar write = false;\n\t\t\tvar key = data.key || data.id || 'Value';\n\n\t\t\tif (!meta.keys[key])\n\t\t\t\tmeta.keys[key] = {};\n\n\t\t\tvar tmp = meta.keys[key];\n\n\t\t\tif (tmp.count && config.type !== 'lastvalue' && config.type !== 'logger') {\n\t\t\t\tvar date = tmp.date;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'hourly':\n\t\t\t\t\t\twrite = date.getHours() !== NOW.getHours();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'daily':\n\t\t\t\t\t\twrite = date.getDate() !== NOW.getDate();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'monthly':\n\t\t\t\t\t\twrite = date.getMonth() !== NOW.getMonth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'weekly':\n\t\t\t\t\t\twrite = date.format('w') !== NOW.format('w');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'yearly':\n\t\t\t\t\t\twrite = date.getFullYear() !== NOW.getFullYear();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (write) {\n\t\t\t\twriter = {};\n\t\t\t\twriter.key = key;\n\t\t\t\twriter.value = tmp.value;\n\t\t\t\twriter.min = tmp.min;\n\t\t\t\twriter.max = tmp.max;\n\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\twriter.count = tmp.count;\n\t\t\t\twriter.date = tmp.date;\n\t\t\t}\n\n\t\t\ttmp.date = NOW;\n\t\t\ttmp.value = data.value;\n\n\t\t\tif (writer) {\n\n\t\t\t\ttmp.min = tmp.value;\n\t\t\t\ttmp.max = tmp.value;\n\t\t\t\ttmp.count = 0;\n\n\t\t\t\tif (config.sum) {\n\t\t\t\t\tif (config.sum === 1)\n\t\t\t\t\t\ttmp.sum = tmp.value;\n\t\t\t\t\telse\n\t\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif (tmp.min == null || tmp.value < tmp.min)\n\t\t\t\t\ttmp.min = tmp.value;\n\n\t\t\t\tif (tmp.max == null || tmp.value > tmp.max)\n\t\t\t\t\ttmp.max = tmp.value;\n\n\t\t\t\tif (config.sum)\n\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\n\t\t\t\tif (config.type === 'logger') {\n\t\t\t\t\twriter = {};\n\t\t\t\t\twriter.key = key;\n\t\t\t\t\twriter.value = tmp.value;\n\t\t\t\t\twriter.min = tmp.min;\n\t\t\t\t\twriter.max = tmp.max;\n\t\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\t\twriter.count = (tmp.count || 0) + 1;\n\t\t\t\t\twriter.date = tmp.date;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp.count = (tmp.count || 0) + 1;\n\n\t\t\tupdatestatus();\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\n\t\t\tif (!writer)\n\t\t\t\treturn;\n\n\t\t\tvar values = [];\n\n\t\t\t// 0 key\n\t\t\t// 1 value\n\t\t\t// 2 min\n\t\t\t// 3 max\n\t\t\t// 4 sum\n\t\t\t// 5 count\n\t\t\t// 6 tsh\n\t\t\t// 7 tsd\n\t\t\t// 8 tsw\n\t\t\t// 9 tsm\n\t\t\t// 10 tsy\n\n\t\t\tvar ts = writer.date.format('yyyyMMddHH');\n\n\t\t\tvalues.push(writer.key);\n\t\t\tvalues.push(writer.value + '');\n\t\t\tvalues.push((writer.min != null ? writer.min : '') + '');\n\t\t\tvalues.push((writer.max != null ? writer.max : '') + '');\n\t\t\tvalues.push((writer.sum != null ? writer.sum : '') + '');\n\t\t\tvalues.push((writer.count != null ? writer.count : '') + '');\n\t\t\tvalues.push(ts);\n\t\t\tvalues.push(ts.substring(0, 8));\n\t\t\tvalues.push(writer.date.format('yyyyww'));\n\t\t\tvalues.push(ts.substring(0, 6));\n\t\t\tvalues.push(ts.substring(0, 4));\n\n\t\t\tF.Fs.appendFile(filename_data, values.join(',') + '\\n', NOOP);\n\t\t};\n\n\t\tvar updatefile = function(fn) {\n\t\t\tF.Fs.readFile(filename_data, function(err, data) {\n\t\t\t\tvar lines = data.toString('utf8').split('\\n');\n\t\t\t\tfn(lines);\n\t\t\t\tF.Fs.writeFile(filename_data, lines.join('\\n'), NOOP);\n\t\t\t});\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'remove') {\n\t\t\t\t// msg.key\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines.splice(counter, 1);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (msg.type === 'rename') {\n\t\t\t\t// msg.key\n\t\t\t\t// msg.name\n\t\t\t\tmeta.keys[msg.name] = meta.keys[msg.key];\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines[counter] = msg.name + ',' + line.substring(key.length);\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar type = typeof(data);\n\n\t\t\tif (type === 'number')\n\t\t\t\tdata = { value: data };\n\n\t\t\tinstance.insert(CLONE(data));\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tCOPY(config, meta);\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS hr { margin: 10px 0; }\n\t.CLASS [contenteditable] { outline: 0 }\n\t.CLASS .padding { padding: 10px; font-size: 12px; }\n\t.CLASS .padding .meta { height: 16px; font-size: 11px; }\n\t.CLASS .padding .meta span { color: #888; margin-right: 5px; width: 30px; float: left; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:Dataset name\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:lastvalue|Last value only,logger|Logger,hourly|Hourly,daily|Daily,weekly|Weeekly,monthly|Monthly,yearly|Yearly;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.sum__dirsource:0|Disabled,1|Periodical sum,2|Total sum;type:number\">Calculate the sum</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.unit__align:1\">Unit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.decimals__align:1;type:number__2\">Decimals</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t</div>\n</settings>\n\n<readme>\nThe component stores data as CSV Dataset for e.g. Dashboard application. Dataset is stored in `/private/` path that is available with the help of the Flow access token.\n\nCSV file contains only processed values, which aren't closed and stored in the `.meta` file.\n\n```js\n{\n\tkey: String,    // optional, e.g. device_id | device_name\n\tvalue: Number   // measured value\n}\n```\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar laststatus;\n\n\t\texports.configure = function(config, isinit) {\n\t\t\tif (!isinit) {\n\t\t\t\texports.status(laststatus);\n\t\t\t\texports.rebind('status');\n\t\t\t}\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t\tif (status) {\n\t\t\t\tstatus.type = exports.config.type;\n\t\t\t\tfor (var key in status.keys)\n\t\t\t\t\tstatus.keys[key].unit = exports.config.unit;\n\t\t\t}\n\t\t};\n\n\t\texports.rename = function(meta, next) {\n\n\t\t\tvar id = ATTRD(meta.element);\n\t\t\tvar value = meta.value.replace(/\\\"|\\,/g, '');\n\n\t\t\tif (id !== value) {\n\t\t\t\tnext(false);\n\t\t\t\t// Due to \"enter\" key\n\t\t\t\tsetTimeout(ASETTER('approve/show', 'Are you sure you want to rename \"{0}\" to <b>\"{1}\"</b>?'.format(id, value), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\t\texports.trigger({ type: 'rename', key: id, name: value });\n\t\t\t\t\tnext(value);\n\t\t\t\t}), 200);\n\t\t\t} else\n\t\t\t\tnext(false);\n\n\t\t};\n\n\t\texports.click = function(el) {\n\t\t\tvar id = ATTRD(el);\n\t\t\tSETTER('approve/show', 'Are you sure you want to remove selected key <b>\"{0}\"</b>?'.format(id.encode()), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\texports.trigger({ type: 'remove', key: id });\n\t\t\t});\n\t\t};\n\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"padding\">\n\t\t\t<div data-bind=\"CONFIG__template\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<span class=\"badge badge-medium badge-color mr5\">{{ value.type }}</span> {{ if value.icon }}<i class=\"{{ value.icon }} mr5\"></i>{{ fi }}<b>{{ value.name }}</b>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div data-bind=\"STATUS__template__show\" class=\"keys hidden\">\n\t\t\t\t<script type=\"text/html\">\n\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t\t<div class=\"meta mt5\">\n\t\t\t\t\t\t\t<span>Meta:</span><div>dataset_{{ value.id }}.meta</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ if value.type !== 'lastvalue' }}\n\t\t\t\t\t\t<div class=\"meta\">\n\t\t\t\t\t\t\t<span>Data:</span><div>dataset_{{ value.id }}.csv</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ fi }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t{{ foreach m in value.keys }}\n\t\t\t\t\t\t<div class=\"keyvalue small\" data-id=\"{{ m.key }}\">\n\t\t\t\t\t\t\t<span><i class=\"fa fa-trash-alt red clickable\"></i><b class=\"edit\" data-edit=\"required:1;offsetWidth:150;exec:TOUCH.rename\" data-id=\"{{ m.key }}\">{{ m.key }}</b></span>\n\t\t\t\t\t\t\t<div class=\"right\">{{ m.value.value }} {{ m.value.unit }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t\t</div>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"cimm26e413": "<script total>\n\n\texports.name = 'Data parser';\n\texports.icon = 'fa fa-compress-arrows-alt';\n\texports.group = 'Transformations';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { type: '1', convert: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar streamer = null;\n\t\tvar reg = /,|;/;\n\n\t\tvar newmessage = function(data) {\n\n\t\t\tif (config.convert) {\n\t\t\t\tif (config.type === '1') {\n\t\t\t\t\tvar m = data.match(reg);\n\t\t\t\t\tdata = data.parseCSV(m ? m[0] : ',');\n\t\t\t\t} else\n\t\t\t\t\tdata = data.parseXML(true);\n\t\t\t}\n\n\t\t\tinstance.newmessage(data).send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (typeof(data) === 'string')\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\n\t\t\t$.destroy();\n\t\t\tdata && streamer && streamer(data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase '1':\n\t\t\t\t\tstreamer = U.streamer('\\n', newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstreamer = U.streamer(config.beg, config.end, newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstreamer = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can parse newline data or begin/end phrases in the buffer or string. In addition, it can help with parsing XML or CSV files.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"choose__?.type__selector:div\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\">\n\t\t\t\t<i class=\"fa fa-level-down-alt fa-rotate-90\"></i>\n\t\t\t\t<span>CSV</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\">\n\t\t\t\t<i class=\"fa fa-code\"></i>\n\t\t\t\t<span>XML</span>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.convert__type:checkbox\">Convert parsed value to the object</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div data-bind=\"?.type__show:value==='2'\" class=\"padding hidden\">\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"fa fa-cog\"></i>Advanced settings</label>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.beg__required:1;placeholder:&lt;PRODUCT&gt;\">Begin phrase</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.end__required:1;placeholder:&lt;/PRODUCT&gt;\">End phrase</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; text-align: center; }\n\t.CLASS footer span { font-family: var(--monospace); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div>{{ if value.type === '1' }}New line{{ else }}<span>{{ value.beg }}</span> - <span>{{ value.end }}</span>{{ fi }}</div>\n\t\t</script>\n\t</footer>\n</body>",
			"cin5ifb433": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'fab fa-wpforms';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\treturn val.parseDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Model name</div>\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"far fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"far fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name > div:first-child { font-weight: bold; outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.04); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), name: 'name', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 1) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"cink02be8f": "<script total>\n\n\texports.name = 'RSS reader';\n\texports.group = 'Transformations';\n\texports.version = '1';\n\texports.icon = 'fa fa-rss';\n\texports.author = 'Total.js';\n\texports.config = { url: '', type: 'a' };\n\texports.inputs = [{ id: 'input', name: 'Trigger' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\n\t\tvar cache = [];\n\t\tvar cachelimit = 50;\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tif (!config.url)\n\t\t\t\treturn;\n\n\t\t\tvar opt = {};\n\t\t\topt.method = 'GET';\n\t\t\topt.custom = true;\n\t\t\topt.url = config.url;\n\n\t\t\tvar output = config.type === 'a' || config.type === 'b' ? [] : null;\n\n\t\t\tREQUEST(opt, function(err, response) {\n\t\t\t\tresponse.stream.on('data', U.streamer('<item>', '</item>', function(xml) {\n\t\t\t\t\tvar item = xml.parseXML(true);\n\t\t\t\t\tif (item) {\n\n\t\t\t\t\t\tvar obj = {};\n\t\t\t\t\t\tobj.title = item.item_title;\n\t\t\t\t\t\tobj.id = obj.title.makeid();\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'd') {\n\t\t\t\t\t\t\tif (cache.indexOf(obj.id) !== -1)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tif (cache.unshift(obj.id) > cachelimit)\n\t\t\t\t\t\t\t\tcache.pop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj.description = item.item_description;\n\t\t\t\t\t\tobj.link = item.item_link;\n\n\t\t\t\t\t\tif (item.item_image_url)\n\t\t\t\t\t\t\tobj.image = item.item_image_url;\n\t\t\t\t\t\telse if (item['item_enclosure__'])\n\t\t\t\t\t\t\tobj.image = item['item_enclosure__'].url;\n\n\t\t\t\t\t\tvar date = item.item_pubDate || item.item_pubdate;\n\t\t\t\t\t\tif (date)\n\t\t\t\t\t\t\tobj.date = new Date(date);\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'c')\n\t\t\t\t\t\t\tinstance.newmessage().send('output', obj);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\toutput.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tresponse.stream.on('end', function() {\n\t\t\t\t\toutput && output.length && instance.newmessage().send('output', output);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.trigger();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS footer { padding: 5px 10px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__type:url;required:1\">URL address</div>\n\t\t<div class=\"help m\">Example: <code>https://blog.totaljs.com/rss/</code></div>\n\t\t<div data---=\"input__?.type__dirsource:a|Send all items,b|Send only new items,c|Send every item separately,d|Send only new items separately\">Output</div>\n\t</div>\n</settings>\n\n<readme>\nThe component downloads every item from the RSS source. A message on to this `Trigger` input starts downloading RSS data.\n\n__Example__:\n```js\n{\n\ttitle: String,\n\tdescription: String,\n\tlink: String,\n\timage: String, // optional\n\tdate: Date // optional\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Download</button>\n\t</div>\n\t<footer data-bind=\"CONFIG.url__text__show\"></footer>\n</body>",
			"cip1k9ce15": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"cipimebbe7": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cipzv710a6": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ciqgwb764e": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"cirsg24067": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Total.js';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ciscz7ac32": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"civadc808d": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tif (typeof(data.data) === 'object') {\n\t\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\t\tnosql.insert(data.data).callback(function(err) {\n\t\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\t$.send('output', { success: false, error: 'invalid data' });\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tif (!filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cj1id7ec88": "<script total>\n\n\texports.name = 'SQLite3';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.npm = ['better-sqlite3'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst Database = require('better-sqlite3');\n\t\tvar db, file;\n\t\tvar fns = ['run', 'get', 'all', 'exec'];\n\n\t\tinstance.message = function($) {\n\t\t\tif (!db) {\n\t\t\t\t$.send('error', { error: 'db not ready' });\n\t\t\t\treturn instance.throw('SQLite3 not ready');\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.prepare || !data.fn) {\n\t\t\t\tinstance.throw('No `prepare` or `op` provided');\n\t\t\t\treturn $.send('error', { error: 'invalid input data' });;\n\t\t\t}\n\n\t\t\tif (fns.indexOf(data.fn) < 0) {\n\t\t\t\tinstance.throw('Unsupported function: ' + data.fn);\n\t\t\t\treturn $.send('error', { error: 'unsupported function' });\n\t\t\t}\n\n\t\t\tif (data.fn === 'exec') {\n\t\t\t\tlet result = db.exec(data.prepare);\n\t\t\t\treturn $.send('output2', result);\n\t\t\t}\n\n\t\t\tlet stmt = db.prepare(data.prepare);\n\t\t\tlet result = data.data ? stmt[data.fn](data.data) : stmt[data.fn]();\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tlet newfile = PATH.databases(config.filename || `${instance.id}.sqlite`);\n\t\t\tif (file === newfile)\n\t\t\t\treturn;\n\n\t\t\tfile = newfile;\n\n\t\t\tlet tmp = exports.DBS[file];\n\t\t\tif (tmp) {\n\t\t\t\tdb = tmp.db;\n\t\t\t\ttmp.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdb = new Database(file, { verbose: console.log });\n\t\t\texports.DBS[file] = {\n\t\t\t\tdb,\n\t\t\t\tcount: 1\n\t\t\t};\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (file && db) {\n\t\t\t\texports.DBS[file].count--;\n\t\t\t\tif (exports.DBS[file].count === 0) {\n\t\t\t\t\tdb && db.close();\n\t\t\t\t\tdb = null;\n\t\t\t\t\tdelete exports.DBS[file];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nSQLite3 [Documentation](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md)\n\n```js\n{\n\t// query\n\tprepare: 'INSERT INTO cats (name, age) VALUES (?, ?)',\n\n\t// function name: run, get, all, exec\n\tfn: 'run',\n\n\t// data, optional\n\tdata: ['Joey', 2] // string/number or array\n\n}\n```\n\nFunctions:\n\t- [run](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#runbindparameters---object)\n\t- [get](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#getbindparameters---row)\n\t- [all](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#allbindparameters---array-of-rows)\n\t- [exec](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#execstring---this)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.filename__placeholder:mydatabase\">Filename (optional)</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cjordb9d5c": "<script total>\n\n\texports.id = 'rabbitmqconsume';\n\texports.name = 'RabbitMQ Consume';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar channel, Manager, ManagerState;\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tinstance.status('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tinstance.status('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinstance.status(ManagerState.title, 1000);\n\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel instance.\n\t\t\t\t\tvar qname = instance.replace(config.queuename);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tchan.assertQueue(qname, { consumerTag: 'consumer-' + qname }),\n\t\t\t\t\t\tchan.consume(qname, function(msg) {\n\t\t\t\t\t\t\tif (msg !== null) {\n\t\t\t\t\t\t\t\tvar data = {\n\t\t\t\t\t\t\t\t\tqueuename: qname,\n\t\t\t\t\t\t\t\t\tpayload: msg.content.toString(),\n\t\t\t\t\t\t\t\t\tmsg: { fields: msg.fields }\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tinstance.send('output', data);\n\t\t\t\t\t\t\t\tchan.ack(msg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t]);\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tconsole.log(config.manager, man);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\tON('configure_rabbitmqconsume', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cjoepce58d": "<script total>\n\n\texports.id = 'rabbitmqconnection';\n\texports.name = 'RabbitMQ Connection';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [];\n\texports.flags = ['rabbitmq'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\t\tvar Manager;\n\t\tvar states = { connected: 'Connected', disconnected: 'Disconnected', connecting: 'Connecting ...', connectionfailed: 'Connection failed' };\n\n\t\tinstance.state = { id: 'disconnected', title: states.disconnected };\n\t\tvar setState = (state) => {\n\t\t\tinstance.state = { id: state, title: states[state] };\n\n\t\t\tinstance.status(states[state], 1000);\n\t\t\tnotifyDeps(state, states[state]);\n\t\t};\n\n\t\tvar notifyDeps = (type) => {\n\t\t\tvar instances = instance.main.instances().filter(i => i.module.flags && i.module.flags.includes('rabbitmq-dep') > -1 && i.config.manager === instance.id);\n\t\t\tfor (let com of instances)\n\t\t\t\tcom.configure(type);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.close(true);\n\n\t\t\tif (!config.hostname) // queue name is optional in some cases, not supported here\n\t\t\t\treturn instance.status('Not configured');\n\n\t\t\tsetState('connecting');\n\t\t\tinstance.status(states.connecting);\n\n\t\t\tconfig.port = config.port || 5672;\n\t\t\tconfig.vhost = config.vhost || '/';\n\t\t\tif (config.vhost[0] !== '/')\n\t\t\t\tconfig.vhost = '/' + config.vhost;\n\n\t\t\tvar credentials = '';\n\t\t\tif (config.username)\n\t\t\t\tcredentials += config.username;\n\t\t\tif (config.password)\n\t\t\t\tcredentials += ':' + config.password;\n\t\t\tif (credentials)\n\t\t\t\tcredentials += '@';\n\n\t\t\tvar conString = `${config.protocol}://${credentials}${config.hostname}:${config.port}${config.vhost}`;\n\n\t\t\t// Create a new connection manager\n\t\t\tManager = amqp.connect([conString]);\n\t\t\tManager.on('connect', function(){\n\t\t\t\tinstance.Manager = Manager;\n\t\t\t\tsetState('connected');\n\t\t\t});\n\n\t\t\tManager.on('connectFailed', function(){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('connectionfailed');\n\t\t\t\t// notifyDeps('connectfailed'); // this does not happen after connect so the deps should be disconnected\n\t\t\t});\n\n\t\t\tManager.on('disconnect', function(e){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('disconnected');\n\t\t\t});\n\n\t\t\tManager.on('error', function(e){\n\t\t\t\tconsole.log('Rabbit Error', e);\n\t\t\t\tif (!Manager.isConnected()) {\n\t\t\t\t\tsetState('disconnected');\n\t\t\t\t\tinstance.Manager = null;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(silent) {\n\t\t\tManager && Manager.close();\n\t\t\tinstance.Manager = null;\n\t\t\t!silent && notifyDeps('removed');\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.hostname__placeholder:localhost;required:1\" class=\"m\">Hostname or IP address</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.port__type:number;placeholder:5672__5672\" class=\"m\">Port (default: 5672)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.protocol__dirsource:amqp|amqp,amqps|amqps__'amqp'\" class=\"m\">Protocol</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.vhost__placeholder:/\" class=\"m\">Virtual host</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.username\" class=\"m\">Username</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.password__type:password\" class=\"m\">Password</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__show__text\"></footer>\n</body>",
			"cjphx755c8": "<script total>\n\n\texports.id = 'rabbitmqpublish';\n\texports.name = 'RabbitMQ Publish';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\n\t\tvar Manager, channel, ManagerState;\n\t\tvar stats = { ack: 0, nack: 0 };\n\n\t\t// initialy the stack is paused\n\t\tvar stack = new Stack(instance.id, function(data, next){\n\t\t\tif (!channel) {\n\t\t\t\treturn next(false);\n\t\t\t}\n\n\t\t\tchannel\n\t\t\t\t.sendToQueue(config.queuename, Buffer.from(data))\n\t\t\t\t.then(function () {\n\t\t\t\t\tnext(true);\n\t\t\t\t\tif (stats.ack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.ack = 0;\n\t\t\t\t\tstats.ack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tnext(false);\n\t\t\t\t\tif (stats.nack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.nack = 0;\n\t\t\t\t\tstats.nack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t});\n\t\t});\n\n\t\tinstance.message = function($) {\n\t\t\tvar d = $.data;\n\t\t\tvar type = typeof(d);\n\t\t\tif (type !== 'buffer' && type !== 'string')\n\t\t\t\td = JSON.stringify(d);\n\n\t\t\tstack.push(d);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tfunction setStatus(str, timeout) {\n\t\t\tinstance.status({\n\t\t\t\tstate: str || ManagerState.title,\n\t\t\t\tstats\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tsetStatus('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\tsetStatus('Disconnected', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tsetStatus('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetStatus(ManagerState.title, 1000);\n\n\t\t\tchannel && channel.close && channel.close();\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\t// Ask the connection manager for a ChannelWrapper.  Specify a setup function to\n\t\t\t// run every time we reconnect to the broker.\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel wrapper instance.\n\t\t\t\t\tsetTimeout(_ => { stack && stack.next(); }, 1000);\n\t\t\t\t\treturn chan.assertQueue(config.queuename, { durable: true });\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tstack.destroy();\n\t\t\tstack = null;\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction Stack(id, callback) {\n\t\t\tvar self = this;\n\t\t\tself.dbname = 'amqp_stack_' + id;\n\t\t\tself.index = 0;\n\t\t\tself.callback = callback;\n\t\t\tself.busy = false;\n\t\t\tself.db = NOSQL(self.dbname);\n\t\t\t//NOSQLMEMORY(self.dbname);\n\t\t};\n\n\t\tStack.prototype.destroy = function() {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.busy = true;\n\t\t\tthis.callback = () => {};\n\t\t\tthis.data = null;\n\t\t};\n\n\t\tStack.prototype.next = function() {\n\t\t\tvar self = this;\n\t\t\tif (self.busy)\n\t\t\t\treturn;\n\t\t\tself.busy = true;\n\t\t\tif (self.timeout) {\n\t\t\t\tclearTimeout(self.timeout);\n\t\t\t\tself.timeout = null;\n\t\t\t}\n\n\t\t\tself.db.find().first().callback(function(err, data){\n\t\t\t\tif (data) {\n\t\t\t\t\tvar id = data.id;\n\t\t\t\t\tvar data = data.data;\n\t\t\t\t\tself.callback(data, function(ok){\n\t\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t\tself.db.remove().where('id', id).callback(function(){\n\t\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\tself.timeout = setTimeout(function(){\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\tself.busy = false;\n\t\t\t});\n\t\t};\n\n\t\tStack.prototype.push = function(data) {\n\t\t\tthis.db.insert({ id: this.index++, data: data }).callback((err, result, meta) => {\n\t\t\t\tthis.next();\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; }\n</style>\n\n<script>\n\tON('configure_rabbitmqpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.state__text\"></div>\n\t\t<div>Ack: <span data-bind=\"STATUS.stats.ack__text\"></span></div>\n\t\t<div>Nack: <span data-bind=\"STATUS.stats.nack__text\"></span></div>\n\t</footer>\n</body>",
			"cjue1ca74d": "<script total>\n\n\texports.name = 'Split';\n\texports.icon = 'fa fa-random';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? U.get(config.path, $.data) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"meno\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"meno\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"meno\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"meno\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"meno\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"meno\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
			"ck5id8291c": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8ij9c0cd": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8zl7724b": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '3';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck9jk93551": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"c28uo6c48a": "<script total>\r\n\texports.name = 'RPIgpio';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['rpi-gpio'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar RPI = require('rpi-gpio');\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bit = $.data;\r\n\r\n\t\t\tif (config.read_write && config.gpiokey) {\r\n\r\n\t\t\t\tswitch (config.read_write) {\r\n\t\t\t\t\tcase 'write':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tcase 'read':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$.destroy();\r\n\r\n\t\t};\r\n\t};\r\n</script>\r\n\r\n<readme>\r\n# GPIO\r\n\r\n__Write mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the component to set the GPIO to HIGH\r\n- Send false to the component to set the GPIO to LOW\r\n\r\n__Read mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the node so read the state of the gpio\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\r\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\r\n\t</header>\r\n</body>",
			"c2pro15472": "<script total>\r\n\texports.name = 'RPIi2cWrite';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar stringtonumber = c => parseInt(c);\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet address, register, bytes;\r\n\r\n\t\t\ttry {\r\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\r\n\t\t\t} catch (err) {\r\n\t\t\t\t$.send('output', err + '');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Send msg\r\n\t\t\tlet i2c1 = I2C.openSync(1);\r\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\r\n\t\t\t$.send('output', { data: bytes });\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Write\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `bytes`: The bytes which will be written\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.address\">Address</div>\r\n\t\t<div data---=\"input__?.register\">Register</div>\r\n\t\t<div data---=\"input__?.bytes\">Data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\r\n\t</header>\r\n</body>",
			"c2qxlf79f2": "<script total>\r\n\texports.name = 'RPIuartDevices';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tvar SerialPort = new require('serialport');\r\n\t\tinstance.trigger = async function() {\r\n\t\t\tawait SerialPort.list().then(function(ports) {\r\n\t\t\t\tinstance.send('output', ports);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# UART\r\n\r\nGet all devices which are possible to send\r\n</readme>\r\n\r\n<script>\r\n\tFUNC.frpiuartdevices_exec = function(el) {\r\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\r\n\t</div>\r\n</body>",
			"c2qgscea9": "<script total>\r\n\texports.name = 'RPIi2cRead';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar BCD2D = function(Wert) {\r\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\r\n\t\t};\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar i2c1 = I2C.openSync(1);\r\n\r\n\t\t\tif (config.presensor) {\r\n\t\t\t\tswitch (config.sensor) {\r\n\t\t\t\t\tcase 'DS1307':\r\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\r\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\r\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t$.destroy();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\r\n\r\n\t\t\t\t//send msg\r\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\r\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\r\n\t\t\t\t$.send('output', rbuf.toString());\r\n\t\t\t}\r\n\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Read\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `readLength`: The length of how many bits will be read\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\r\n\t\t</div>\r\n\t\t<hr />\r\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\r\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\r\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\r\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\r\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\r\n\t</header>\r\n</body>",
			"c2rhca784d": "<script total>\r\n\texports.name = 'RPIuart';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = { port:'/dev/ttyUSB0' };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar SerialPort = require('serialport')\r\n\t\tvar sp;\r\n\r\n\t\tinstance.openConnectionUart = function(){\r\n\r\n\t\t\tsp = new SerialPort(config.port, {\r\n\t\t\t\tbaudRate: parseInt(config.baudrate),\r\n\t\t\t\tdataBits: parseInt(config.databits),\r\n\t\t\t\tparity: config.parity,\r\n\t\t\t\tstopBits: parseInt(config.stopbits),\r\n\t\t\t\tflowControl: false,\r\n\t\t\t\tautoOpen: false\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('open', function() {\r\n\t\t\t\tinstance.status({ open: true });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('close', function() {\r\n\t\t\t\tinstance.status({ open: false });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\r\n\t\t\t\tinstance.send('output', data);\r\n\t\t\t});\r\n\r\n\t\t\tsp.open(function (err) {\r\n\t\t\t\tif (err)\r\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bytes = $.data;\r\n\r\n\t\t\t//check if sp is open\r\n\t\t\tif (!sp)\r\n\t\t\t\tinstance.openConnectionUart();\r\n\r\n\t\t\t//send msg\r\n\t\t\tsp.write(bytes);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.close = function(){\r\n\t\t\tsp && sp.close(NOOP);\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\r\n</style>\r\n\r\n<readme>\r\n# UART\r\n\r\n- send a string directly to a port\r\n- when device from a port sends data to the host, it will be send to the output of the component\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\r\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200|115200,128000|128000;required:1\">Baudrate</div>\r\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\r\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\r\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\r\n\t\t\t{{ if value.open }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\r\n\t\t\t{{ else }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\r\n\t\t\t{{ fi }}\r\n\t\t</div>\r\n\t</footer>\r\n</body>",
			"c2ugtc105d": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Total.js';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cf8ga6bf53": "<script total>\n\n\texports.name = 'Throttle';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { limit: 1, delay: 0 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Outputs' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar pending = [];\n\t\tvar running = 0;\n\n\t\tvar check = function() {\n\t\t\tif (running < config.limit) {\n\n\t\t\t\tvar diff = config.limit - running;\n\t\t\t\tvar items = pending.splice(0, diff);\n\n\t\t\t\trunning += items.length;\n\n\t\t\t\tif (config.delay) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\t\titem.send('output');\n\t\t\t\t\t}, config.delay);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\titem.send('output');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinstance.status(pending.length, 500);\n\t\t};\n\n\t\tvar end = function() {\n\t\t\trunning--;\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.on('end', end);\n\t\t\tpending.push($);\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tvar item = pending.shift();\n\t\t\tif (item) {\n\t\t\t\trunning++;\n\t\t\t\titem.send('output');\n\t\t\t}\n\t\t\tcheck();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component sends only limited count of messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number\">Limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.delay__required:0;align:1;type:number;ricon:!ms\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"button exec\" data-exec=\"FUNC.trigger\">Send</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"coob8a3971": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'ACGDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cu343d9d6": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'ACGDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"il304cv4v": {
				"id": "il304cv4v",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"interval": 12000
				},
				"x": 14.965301513671875,
				"y": 223.9583511352539,
				"component": "ciqgwb764e",
				"connections": {
					"output": [
						{
							"id": "il306l7ln",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Triggers",
					"name": "Timer",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il304z6bk": {
				"id": "il304z6bk",
				"config": {
					"repo": false,
					"data": true,
					"name": "Debug"
				},
				"x": 2989.965576171875,
				"y": 93.95833587646484,
				"component": "ci6662d511",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Debug",
					"inputs": [
						{
							"id": "input",
							"name": "Log window"
						}
					]
				}
			},
			"il305osq5": {
				"id": "il305osq5",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_region_asia').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n$.send('output',data);\n})"
				},
				"x": 461.7578125,
				"y": 57.421875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31auzem",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il306l7ln": {
				"id": "il306l7ln",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 242.951416015625,
				"y": 235.97223663330078,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il305osq5",
							"index": "input"
						},
						{
							"id": "il4ec375s",
							"index": "input"
						},
						{
							"id": "il4f9aiu0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31auzem": {
				"id": "il31auzem",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_region_asia').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 696.171875,
				"y": 56.640625,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31cefls",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31cefls": {
				"id": "il31cefls",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\nREQUEST(opt);\n//var config = data;\n//var opt = {};\n//opt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\n//opt.callback = function(err,response) {\n//\tresponse = response.body.parseJSON(true);\n//\tif(response.pagination.count){\n//\t\t$.send('output',{config : config, result : response.data});\n//\t}\n//};\n//\n//REQUEST(opt);"
				},
				"x": 966.125,
				"y": 63.875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31e9qdk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31doouu": {
				"id": "il31doouu",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3111.9794921875,
				"y": -16.979171752929688,
				"component": "ci2ol4a50c",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il31e9qdk": {
				"id": "il31e9qdk",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1220.0625,
				"y": 71.875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h3pxt",
							"index": "input"
						},
						{
							"id": "il3vqtzki",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h3pxt": {
				"id": "il31h3pxt",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','translate').callback(function(err,response) {\n\tdata.translateconfigs = response;\n\t$.send('output',data);\n})"
				},
				"x": 1649.9307861328125,
				"y": -24.513893127441406,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h85ev",
							"index": "input"
						},
						{
							"id": "il304z6bk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h85ev": {
				"id": "il31h85ev",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nvar configs = data.translateconfigs;\nopt.method = 'POST';\nopt.url = configs.baseurl+\"?\"+configs.value;\nopt.headers = configs.headers;\n\nopt.body = '[{\"Text\":\"'+data.title+\"||\"+data.description+'\"}]';\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response){\n\t\tdata.translated = response[0]['translations'][0]['text'];\n\t$.send('output', data);\n\t}\n\n}\n\nREQUEST(opt);"
				},
				"x": 2068.403076171875,
				"y": -20.416671752929688,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31j3ew8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31j3ew8": {
				"id": "il31j3ew8",
				"config": {
					"outputs": 1,
					"code": "var doc = { id : 'actualite_region_asia'};\ndoc.original = data;\ndoc.date = F.datetime.format('HH:mm');\n$.send('output',doc);"
				},
				"x": 2493.9586181640625,
				"y": -10.000007629394531,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31ku6kw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31ku6kw": {
				"id": "il31ku6kw",
				"config": {
					"template": "<h3>Hello World!</h3>"
				},
				"x": 2810.9725341796875,
				"y": -13.993057250976562,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il31doouu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il32x7uar": {
				"id": "il32x7uar",
				"config": {
					"url": "https://jsonplaceholder.typicode.com/users",
					"method": "GET",
					"dnscache": true,
					"insecure": false,
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": null,
					"send": "all"
				},
				"x": 1548,
				"y": 614,
				"component": "ci82ffd82e",
				"connections": {
					"response": [
						{
							"id": "il32xa25y",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fas fa-cloud-download",
					"group": "Common",
					"name": "Request",
					"inputs": [
						{
							"id": "payload",
							"name": "Payload"
						}
					],
					"outputs": [
						{
							"id": "response",
							"name": "Response"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			},
			"il32xa25y": {
				"id": "il32xa25y",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2079,
				"y": 635,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il32xbjl2": {
				"id": "il32xbjl2",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 1075,
				"y": 656,
				"component": "cipzv710a6",
				"connections": {
					"output": [
						{
							"id": "il32x7uar",
							"index": "payload"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vqtzki": {
				"id": "il3vqtzki",
				"config": {
					"template": "***ACTUALITE REGION ASIE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1474.296875,
				"y": 75.390625,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3vr1ns8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vr1ns8": {
				"id": "il3vr1ns8",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1746.09375,
				"y": 83.8671875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vr21rc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vr21rc": {
				"id": "il3vr21rc",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2027.5,
				"y": 90.1171875,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il4ec375s": {
				"id": "il4ec375s",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_region_burkina').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n$.send('output',data);\n})"
				},
				"x": 469.40625,
				"y": 223.28125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4ec3fow",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ec3fow": {
				"id": "il4ec3fow",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_region_burkina').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 705.5078125,
				"y": 221.7578125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4ec3qq0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ec3qq0": {
				"id": "il4ec3qq0",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\nREQUEST(opt);"
				},
				"x": 944.453125,
				"y": 225.5078125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4ec3zad",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ec3zad": {
				"id": "il4ec3zad",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1194.5703125,
				"y": 235.46875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4ec6ojp",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ec6ojp": {
				"id": "il4ec6ojp",
				"config": {
					"template": "***ACTUALITE REGION BURKINA FASO @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}***ACTUALITE CHAMPIONS LEAGUE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1448.7109375,
				"y": 237.1875,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il4ec6zlf",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ec6zlf": {
				"id": "il4ec6zlf",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1707.2265625,
				"y": 242.734375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4ec7dkb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ec7dkb": {
				"id": "il4ec7dkb",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1952.96875,
				"y": 242.1875,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il4f9aiu0": {
				"id": "il4f9aiu0",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_region_mali').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n$.send('output',data);\n})"
				},
				"x": 478.3984375,
				"y": 361.25,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4f9b0zh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4f9b0zh": {
				"id": "il4f9b0zh",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_region_mali').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 710.9375,
				"y": 364.0234375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4f9bzhb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"paused": {},
			"il4f9bzhb": {
				"id": "il4f9bzhb",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\nREQUEST(opt);"
				},
				"x": 946.875,
				"y": 368.0078125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4f9cd3k",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4f9cd3k": {
				"id": "il4f9cd3k",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1194.140625,
				"y": 367.9296875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4f9cp52",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4f9cp52": {
				"id": "il4f9cp52",
				"config": {
					"template": "***ACTUALITE REGION BURKINA FASO @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}***ACTUALITE CHAMPIONS LEAGUE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1440.78125,
				"y": 378.75,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il4f9cys7",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4f9cys7": {
				"id": "il4f9cys7",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1696.4453125,
				"y": 380.46875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il4f9dcna",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4f9dcna": {
				"id": "il4f9dcna",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1953.90625,
				"y": 389.375,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://localhost:8454",
		"dtcreated": "2022-05-09T08:45:54.398Z",
		"size": 297021
	},
	"fpln8001aj41d": {
		"paused": true,
		"id": "fpln8001aj41d",
		"reference": "",
		"author": "",
		"group": "API Mise a jour",
		"icon": "fa fa-pray",
		"color": "#61C83B",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Heure priere",
		"components": {
			"cl155eca6": "<script total>\n\n\texports.name = 'Trigger2';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Alain Guigma';\n\texports.config = { random: true, type: 'string', data: '', restart: true,interval : 2000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar id;\n\n\t\tfunction fn () {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t\tinstance.status({ interval: config.interval, value: val });\n\t\t};\n\t\tinstance.close = function() {\n\t\t\tclearInterval(id);\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\tid && clearInterval(id);\n\t\t\tid = setInterval(fn, config.interval > 3000 ? config.interval : 3000 );\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.configure(), 3000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.trigger_header{ color : #fff; background-color :#E8357E;}\n</style>\n\n<settings>\n\t<div class=\"row padding\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number\">Interval</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 3s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow within a given interval of time.\n</readme>\n\n<body>\n\t<header class=\"trigger_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<div class = \"padding\">\n\t\t\t<i class=\"fa fa-industry\"></i>Random\n\t</div>\n\t<div class=\"padding\"  data-bind=\"!?.status.{0}__text pre:value.value__text div:value.interval + 'ms'__show\" class=\"hidden frandom\">\n\t\t\t<div class=\"padding\">\n\t\t\t</div>\n\t\t\t<pre class =\"padding json\"></pre>\n\t</div>\n</body>",
			"cl155f3k4": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl155fspr": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fcounter_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fcounter_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__text:value.format(0)__show:value>=0\" class=\"status hidden\"></div>\n\t</footer>\n</body>",
			"cl155fv1e": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155fx4p": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl155fzkh": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; width: 100%; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS button:disabled { background-color: #F0F0F0; color: #A0A0A0; cursor: not-allowed; }\n\t.CLASS .mini { width: initial; float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.ui-dark .CLASS button:disabled { background-color: #333; color: #666; cursor: not-allowed; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec mini\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__disabled\" disabled>Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g242": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g48l": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar value = $.data && typeof($.data) === 'object' ? fn($.data) : undefined;\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\t$.send('output', value);\n\t\t\t\telse\n\t\t\t\t\t$.destroy();\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('data', 'return data?.' + config.path.replace(/\\s|\\./, '?.'));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfn = null;\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component reads a specific value according to the entered path.\n</readme>\n\n<style>\n\t.CLASS footer > div { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n\t.CLASS footer > span { color: #888; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:temperature.max;required:1\" class=\"m\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>\n\t\t\tPath: <span data-bind=\"CONFIG.path__empty__text\" class=\"b\"></span>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g6f2": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'far fa-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155g8bk": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'far fa-file-alt';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Peter Širka';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1\">Path</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code data-bind=\"CONFIG.path__text__empty\"></code>\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show:value.value\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gb4z": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'fa fa-procedures';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.grep__required:1\">App name</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gcq2": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'fa fa-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"progress__!STATUS\"></div>\n\t</footer>\n</body>",
			"cl155geu5": "<script total>\n\n\texports.name = 'Telemetry';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-rss-square';\n\texports.author = 'Martin Smola';\n\texports.config = { paths: {}, interval: null }; // { name, path }\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tvar last = { items: [] };\n\t\tvar interval;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tconst data = { items: [] };\n\t\t\tconst paths = config.paths;\n\n\t\t\tfor (const path in paths)\n\t\t\t\tdata.items.push({ key: path, value: get($.data, paths[path]) || '' });\n\n\t\t\tif (!interval)\n\t\t\t\tinstance.status(data);\n\t\t\telse\n\t\t\t\tlast = data;\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status({ items: [] });\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tclearInterval(interval);\n\t\t\tif (config.interval) {\n\t\t\t\tinterval = setInterval(() => instance.status(last), config.interval);\n\t\t\t} else\n\t\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.close = () => clearInterval(interval);\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .telemetry-item > span { float: right; font-size: 14px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component shows data in a template.\nAssuming this incomming data:\n```javascript\n{\n\tspeed: 1,\n\tnested: { value: 2 },\n\tarray: [{ value: 3 }]\n}\n```\nThe paths bust be defined as:\n```\nspeed         // -> 1\nnested.value  // -> 2\narray.0.value // -> 3\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.interval__type:number__500\">Update interval (in ms)</div>\n\t\t<div class=\"help m\">Leave empty to update immediately when new data comes in.</div>\n\t\t<div data---=\"keyvalue__?.paths__placeholderkey:Type a property name;placeholdervalue:Type a path and press enter\">Properties to show in the template</div>\n\t\t<div class=\"help\">Path supports js dot notation like `data.arr.0.value`, following is not supported `data.arr[0].value`</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\" class=\"\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{foreach item in value.items}}\n\t\t\t\t\t<div class=\"telemetry-item\"><b class=\"mr5\">{{item.key}}:</b><span>{{item.value}}</span></div>\n\t\t\t\t{{end}}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155ghmg": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Peter Širka';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers)\n\t\t\t\topt.headers[$.variables(key)] = $.variables(config.headers[key]);\n\n\t\t\tfor (var key in config.cookies)\n\t\t\t\topt.cookies[$.variables(key)] = $.variables(config.cookies[key]);\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.responsebody)\n\t\t\t\t\t$.data = body;\n\t\t\t\telse\n\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose a specific output;dirempty:None\" class=\"m\">Serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t\t<div data---=\"input__?.responsebody__type:checkbox\">Forward response body only</div>\n\t</div>\n</settings>",
			"cl155gk2e": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Peter Širka';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<pre class=\"json\"></pre>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155gpeu": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'fa fa-network-wired';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port number</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155grjw": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'fa fa-memory';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl155wjan": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'AcgDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl156bs2c": "<script total>\n\n\texports.name = 'DBMS';\n\texports.group = 'AcgDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Alain Guigma';\n\texports.config = { url: '',collection: '', method: 'query' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\texports.make = function(instance, config) {\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\t\tinstance.message = function($) {\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!config.collection) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\tvar data = $.data;\n\t\t\t\trequire('dbms').init(config.url,ERROR('DBMS'));\n\t\t\t\tDBMS.measure && DBMS.measure(true);\n\t\t\t\tvar dbms = DBMS();\n\t\t\t\tvar builder\n\t\t\t\tvar method = config.method.toLowerCase();\n\t\t\t\tswitch (method) {\n\t\t\t\t\tcase 'read':\n\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t\tif (data.params.id)\n\t\t\t\t\t\t\t\tdata.id = data.params.id;\n\t\t\t\t\t\t\tif (!data.id) {\n\t\t\t\t\t\t\t\tdata = { err: '[DB] Cannot get record by id: `undefined`' };\n\t\t\t\t\t\t\t\t$.send('error', data);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuilder = dbms.read(config.collection);\n\t\t\t\t\t\t\tbuilder.where('id', data.id);\n\t\t\t\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdata = { response: response };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'query':\n\t\t\t\t\tbuilder = dbms.list(config.collection);\n\t\t\t\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdata = { response: response };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'insert':\n\t\t\t\t\t\tdbms.add(config.collection,data).callback(function(err) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { success: err ? false : true, id: $.data.id };\n\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'remove':\n\t\t\t\t\t\tdbms.remove(config.collection).where('id',data.id).callback(function(err,count) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { response: count || 0 };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'update':\n\t\t\t\t\t\tdbms.remove(config.collection,data).where('id',data.id).callback(function(err,count) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdata = { response: count || 0 };\n\t\t\t\t\t\t\t\t$.send('response', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\tconsole.log(method);\n\t\t\t\t}\n\t\t};\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component creates a HTTP request. Incoming data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:QUERY|query,READ|read,INSERT|insert,UPDATE|update,DELETE|remove\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-5 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>Url de connection</b></div>\n\n\t\t\t</div>\n\t\t\t<div class=\"col-md-5 m\">\n\t\t\t\t<div data---=\"input__?.collection__required:1\"><b>Collection</b></div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<hr class=\"nmt nmb\" />\n\n</settings>",
			"cl156cxle": "<script total>\n\texports.name = 'GoogleSearch';\n\texports.icon = 'fab fa-google';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['google-it'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\t// retrieve search keyword\n\t\t\tvar keyword = $.data;\n\t\t\t// import google-it library\n\t\t\tvar google = require('google-it');\n\t\t\t// Set number of result per page\n\t\t\tgoogle.resultPerPage = 5;\n\t\t\t// Set language to french\n\t\t\tgoogle.lang = 'fr';\n\t\t\t// if keyword exist\n\t\t\tif (keyword){\n\t\t\t\t// Make Google Search\n\t\t\t\tgoogle({query : keyword}).then(function(response){\n\t\t\t\t\t// retrieve  links from search result and send to next component\n\t\t\t\t\t$.send('output',response.links);\n\t\t\t\t\t// $.destroy();\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"cl156e2xi": "<script total>\n\n\texports.name = 'MatchEventSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'goal', name: 'GOAL' },\n\t\t\t\t\t\t{ id: 'goalpenalty', name: 'GOAL_PENALTY' },\n\t\t\t\t\t\t{ id: 'owngoal', name: 'OWN_GOAL' },\n\t\t\t\t\t\t{ id: 'yellowcard', name: 'YELLOW_CARD' },\n\t\t\t\t\t\t{ id: 'redcard', name: 'RED_CARD' },\n\t\t\t\t\t\t{ id: 'missedpenalty', name: 'MISSED_PENALTY' },\n\t\t\t\t\t\t{ id: 'substitution', name: 'SUBSTITUTION' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'yellowredcard', name: 'YELLOW_RED_CARD' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar event = $.data;\n\n\t\t\t\tswitch(event.event){\n\t\t\t\t\tcase 'GOAL'\t :\n\t\t\t\t\t\t$.send('goal', event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'GOAL_PENALTY' :\n\t\t\t\t\t\t$.send('goalpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'OWN_GOAL' :\n\t\t\t\t\t\t$.send('owngoal',event);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YELLOW_CARD' :\n\t\t\t\t\t\t$.send('yellowcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RED_CARD':\n\t\t\t\t\t\t$.send('redcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ' YELLOW_RED_CARD' :\n\t\t\t\t\t\t$.send('yellowredcard',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'MISSED_PENALTY' :\n\t\t\t\t\t\t$.send('missedpenalty',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SUBSTITUTION' :\n\t\t\t\t\t\t$.send('substitution',event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',event);\n\t\t\t\t}\n\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n```\t\t[\n\t\t\t{\n                \"id\": \"10509914\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"5\",\n                \"event\": \"GOAL\",\n                \"sort\": \"0\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509915\",\n                \"match_id\": \"129180\",\n                \"player\": \"MARIAPPA ADRIAN\",\n                \"time\": \"13\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"1\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509916\",\n                \"match_id\": \"129180\",\n                \"player\": \"CAPOUE ETIENNE\",\n                \"time\": \"60\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"2\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509917\",\n                \"match_id\": \"129180\",\n                \"player\": \"DOUCOURE ABDOULAYE\",\n                \"time\": \"61\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"3\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10509918\",\n                \"match_id\": \"129180\",\n                \"player\": \"DEENEY TROY\",\n                \"time\": \"62\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"4\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10510529\",\n                \"match_id\": \"129180\",\n                \"player\": \"VARDY JAMIE\",\n                \"time\": \"75\",\n                \"event\": \"GOAL\",\n                \"sort\": \"5\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10510974\",\n                \"match_id\": \"129180\",\n                \"player\": \"PEREIRA RICARDO\",\n                \"time\": \"84\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"6\",\n                \"home_away\": \"a\"\n            },\n            {\n                \"id\": \"10511398\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"GOAL\",\n                \"sort\": \"7\",\n                \"home_away\": \"h\"\n            },\n            {\n                \"id\": \"10511625\",\n                \"match_id\": \"129180\",\n                \"player\": \"GRAY ANDRE\",\n                \"time\": \"90\",\n                \"event\": \"YELLOW_CARD\",\n                \"sort\": \"8\",\n                \"home_away\": \"h\"\n            }\n        ],\n        \"match\": {\n            \"id\": \"129180\",\n            \"date\": \"2019-03-03\",\n            \"home_name\": \"Watford\",\n            \"away_name\": \"Leicester City\",\n            \"score\": \"2 - 1\",\n            \"ht_score\": \"1 - 0\",\n            \"ft_score\": \"2 - 1\",\n            \"et_score\": \"\",\n            \"time\": \"FT\",\n            \"league_id\": \"25\",\n            \"status\": \"FINISHED\",\n            \"added\": \"2019-03-03 11:55:12\",\n            \"last_changed\": \"2019-03-03 13:58:04\",\n            \"home_id\": \"11\",\n            \"away_id\": \"6\",\n            \"competition_id\": \"2\",\n            \"location\": null,\n            \"fixture_id\": null,\n            \"scheduled\": null,\n            \"home\": {\n                \"id\": \"11\",\n                \"name\": \"Watford\",\n                \"stadium\": \"Vicarage Road Stadium\",\n                \"location\": \"Vicarage Road Stadium\"\n            },\n            \"away\": {\n                \"id\": \"6\",\n                \"name\": \"Leicester City\",\n                \"stadium\": \"King Power Stadium\",\n                \"location\": \"King Power Stadium\"\n            },\n            \"competition\": {\n                \"id\": \"2\",\n                \"name\": \"Premier League\"\n            }\n        }\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.event_header{ color : #fff; background-color :#171717;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"event_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"cl156fik0": "<script total>\n\n\texports.name = 'MatchStatusSwitch';\n\texports.icon = 'fa fa-code-branch';\n\texports.author = 'Alain Guigma';\n\texports.group = 'AcgDevs';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [\n\t\t\t\t\t\t{ id: 'notstarted', name: 'NOT STARTED' },\n\t\t\t\t\t\t{ id: 'addedtime', name: 'ADDED TIME' },\n\t\t\t\t\t\t{ id: 'halftimebreak', name: 'HALF TIME BREAK' },\n\t\t\t\t\t\t{ id: 'finished', name: 'FINISHED' },\n\t\t\t\t\t\t{ id: 'insufficientdata', name: 'INSUFFICIENT DATA' },\n\t\t\t\t\t\t{ id: 'default', name: 'DEFAULT' },\n\t\t\t\t\t\t{ id: 'inplay', name: 'IN PLAY' }\n\n\t\t\t\t\t  ];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar matchs = $.data;\n\t\t\tif(matchs.length === 0 ){\n\t\t\t\t$.send('default', 'Config last update. '+ NOW.format('HH:mm'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmatchs.forEach(function(match) {\n\t\t\t\tswitch(match.status){\n\t\t\t\t\tcase 'NOT STARTED' :\n\t\t\t\t\t\t$.send('notstarted', match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'IN PLAY' :\n\t\t\t\t\t\t$.send('inplay',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ADDED TIME' :\n\t\t\t\t\t\t$.send('addedtime',match);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HALF TIME BREAK' :\n\t\t\t\t\t\t$.send('halftimebreak',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FINISHED':\n\t\t\t\t\t\t$.send('finished',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'INSUFFICIENT DATA' :\n\t\t\t\t\t\t$.SEND('insufficientdata',match);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\t$.send('default',match);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// or $.destroy();\n\t\t};\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component will loop over the different incomming matchs and switch them according to theirs status.\n\n```js\n[\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"Stadioni Tamaz Stepania\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 3.3,\n                        \"1\": 1.65,\n                        \"2\": 5\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 1399,\n                \"score\": \"2 - 2\",\n                \"id\": 257578,\n                \"away_name\": \"FC Merani Martvili\",\n                \"time\": \"90+\",\n                \"away_id\": 5996,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Sioni Bolnisi\",\n                \"added\": \"2021-06-08 13:03:02\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=5996&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=1399\",\n                \"status\": \"ADDED TIME\",\n                \"has_lineups\": false,\n                \"ft_score\": \"\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257578\",\n                \"fixture_id\": 1433692,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": null,\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            },\n            {\n                \"scheduled\": \"13:00\",\n                \"competition_id\": 165,\n                \"ps_score\": \"\",\n                \"location\": \"\",\n                \"odds\": {\n                    \"live\": {\n                        \"X\": 4,\n                        \"1\": 1.65,\n                        \"2\": 2.1\n                    },\n                    \"pre\": {\n                        \"X\": null,\n                        \"1\": null,\n                        \"2\": null\n                    }\n                },\n                \"last_changed\": \"2021-06-08 14:53:02\",\n                \"competition_name\": \"Erovnuli Liga 2\",\n                \"home_id\": 4844,\n                \"score\": \"3 - 2\",\n                \"id\": 257579,\n                \"away_name\": \"FC Wit Georgia\",\n                \"time\": \"FT\",\n                \"away_id\": 4157,\n                \"ht_score\": \"1 - 1\",\n                \"home_name\": \"Gareji\",\n                \"added\": \"2021-06-08 13:03:03\",\n                \"h2h\": \"https:\\/\\/livescore-api.com\\/api-client\\/teams\\/head2head.json?key=piuIZbssamrwCGwT&team2_id=4157&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&team1_id=4844\",\n                \"status\": \"FINISHED\",\n                \"has_lineups\": false,\n                \"ft_score\": \"3 - 2\",\n                \"events\": \"https:\\/\\/livescore-api.com\\/api-client\\/scores\\/events.json?key=piuIZbssamrwCGwT&secret=9T4Zj1eebd0uLvhaNMTNXlf7HHEknaex&id=257579\",\n                \"fixture_id\": 1433693,\n                \"et_score\": \"\",\n                \"outcomes\": {\n                    \"half_time\": \"X\",\n                    \"full_time\": \"1\",\n                    \"extra_time\": null\n                },\n                \"info\": \"This match is only supported through the new competitions structure\"\n            }\n        ]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tNO SETTINGS\n\t</div>\n</settings>\n\n<style>\n\t.switch_header{ color : #fff; background-color :#8C42F6;}\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"switch_header\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Switch match according to status</footer>\n</body>",
			"cl156h8wk": "<script total>\n\n\texports.name = 'OpenSync';\n\texports.author = 'Peter Širka';\n\texports.group = 'External';\n\texports.icon = 'fa fa-sync';\n\texports.version = '2';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar client = null;\n\t\tvar status = { connected: 0, meta: EMPTYOBJECT };\n\n\t\tvar connect = function() {\n\t\t\tclient = OPENCLIENT(config.url, instance.id);\n\t\t\tclient.error(err => instance.throw(err));\n\n\t\t\tclient.online(function(meta) {\n\t\t\t\tstatus.connected = meta ? 1 : 0;\n\t\t\t\tstatus.meta = meta;\n\t\t\t\tinstance.status(status);\n\t\t\t});\n\n\t\t\tclient.message(function(msg) {\n\t\t\t\tinstance.newmessage(msg).send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.url) {\n\t\t\t\tconnect();\n\t\t\t} else {\n\t\t\t\tif (client) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tclient = null;\n\t\t\t\t}\n\t\t\t\tinstance.status({ connected: 0 });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (client) {\n\t\t\t\tclient.close();\n\t\t\t\tclient = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 8px; font-size: 12px; }\n\t.CLASS footer i { width: 12px; text-align: center; margin-right: 5px; }\n</style>\n\n<readme>\nThis component receives a data from the [OpenSync](https://docs.totaljs.com/opensync/) app. Data example:\n\n```js\n{\n\tid: String,              // Internal ID\n\ttype: String,            // Parsed content-type (can be empty with the \"GET\" method)\n\tchannel: String,         // Channel\n\tip: String,              // Host IP address\n\tmethod: String,          // HTTP method (upper-case)\n\theaders: Object,         // Key:value\n\tquery: Object,           // Key:value\n\tbody: Object,            // JSON/key:value/String\n\tua: String,              // Parsed user-agent\n\tfiles: [Object Array]    // Uploaded files { filename: String, extension: String, type: String, size: Number, url: String, width: Number, height: Number }\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__required:1;camouflage:1\">URL address + token</div>\n\t\t<div class=\"help\">Enter URL address + token to the OpenSync server. This component will connect to the OpenSync via WebSocket.</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\"><i class=\"fa fa-globe\"></i>{{ if value.meta }}{{value.meta.name }}{{ else }}---{{ fi }}</div>\n\t\t\t\t<div><i class=\"fa fa-circle {{ if value.connected }}green{{ else }}red{{ fi }}\"></i>{{ if value.connected }}Connected{{ else }}Disconnected{{ fi }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156ie4d": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl156j8px": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Peter Širka';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cl156k5gy": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>\n",
			"cl156kztn": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156lyyy": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156nhyy": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tinstance.io(function(err, response) {\n\t\t\t\tvar arr = [];\n\t\t\t\tfor (var flow of response) {\n\t\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.quicksort('name');\n\t\t\t\tanswer(arr);\n\t\t\t});\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"cl156ovuq": "<script total>\n\n\texports.name = 'MQTT Broker';\n\texports.icon = 'fa fa-exchange-alt';\n\texports.group = 'MQTT';\n\texports.config = { hostname: 'localhost', port: 1883, secure: false };\n\texports.outputs = [{ id: 'output', name: 'Messages' }, { id: 'error', name: 'Errors' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.npm = ['mqtt'];\n\n\texports.make = function(instance, config) {\n\n\t\tconst mqtt = require('mqtt');\n\t\tvar client;\n\n\t\tconst state = () => {\n\t\t\tvar obj;\n\t\t\tif (!client) {\n\t\t\t\tobj = { connected: false, connecting: false, disconnected: true, disconnnecting: false, status: 'disconnected' };\n\t\t\t} else {\n\t\t\t\tconst { connected, disconnecting, reconnecting } = client;\n\t\t\t\tobj = { connecting: client.stream ? client.stream.connecting : false, connected, disconnecting, reconnecting };\n\t\t\t\tconst current = Object.keys(obj).filter(s => obj[s]);\n\t\t\t\tobj.status = current.length ? current[0] : 'disconnected';\n\t\t\t}\n\n\t\t\tinstance.state = { status: obj.status, name: config.hostname + ':' + config.port };\n\t\t\tinstance.status(instance.state);\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tdisconnect(connect);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tdisconnect(NOOP);\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction disconnect(callback) {\n\t\t\tif (!client)\n\t\t\t\treturn callback && callback();\n\n\t\t\tif (client.end)\n\t\t\t\tclient.end(true, cb);\n\t\t\telse\n\t\t\t\tcb();\n\n\t\t\tfunction cb() {\n\t\t\t\tclient.removeAllListeners();\n\t\t\t\tclient = null;\n\t\t\t\tcallback && callback();\n\t\t\t};\n\t\t};\n\n\t\tfunction connect() {\n\n\t\t\tstate();\n\n\t\t\tvar broker = config.secure ? 'mqtts://' : 'mqtt://' + config.hostname + ':' + config.port;\n\n\t\t\tclient = mqtt.connect(broker, config);\n\n\t\t\tclient.on('connect', function() {\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('reconnect', function() {\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('message', function(topic, message) {\n\t\t\t\tmessage = message.toString();\n\t\t\t\tif (message[0] === '{')\n\t\t\t\t\tmessage = message.parseJSON(true);\n\n\t\t\t\tonmessage(topic, message);\n\t\t\t});\n\n\t\t\tclient.on('close', function(err) {\n\t\t\t\tif (err && err.toString().indexOf('Error')) {\n\t\t\t\t}\n\t\t\t\tstate();\n\t\t\t});\n\n\t\t\tclient.on('error', function(err) {\n\t\t\t\tstate();\n\t\t\t});\n\t\t};\n\n\t\tfunction onmessage(topic, message) {\n\t\t\tconsole.log('Broker.onmessage', topic, message);\n\t\t\tfor (let sub in subscribtions) {\n\t\t\t\tvar match = mqttWildcard(topic, sub);\n\t\t\t\tif (match) {\n\t\t\t\t\tfor (const comid of sub) {\n\t\t\t\t\t\tconst com = instance.main.find(comid);\n\t\t\t\t\t\tcom && com.onmessage(topic, message, match);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinstance.publish = function(topic, message, options) {\n\t\t\tconsole.log('Broker.publish', topic, message, options);\n\t\t\tclient && client.publish(topic, message, options, function(err){\n\t\t\t\tif (err)\n\t\t\t\t\tconsole.log('error', err);\n\t\t\t});\n\t\t};\n\n\t\tconst subscribtions = {};\n\n\t\tinstance.subscribe = function(componentid, topic) {\n\t\t\tvar self = this;\n\t\t\tsubscribtions[topic] = subscribtions[topic] || [];\n\t\t\tif (subscribtions[topic].indexOf(componentid) > -1)\n\t\t\t\treturn;\n\n\t\t\tconsole.log('Broker.subscribe', topic);\n\t\t\tclient.subscribe(topic);\n\t\t\tsubscribtions[topic].push(componentid);\n\t\t};\n\n\t\tinstance.unsubscribe = function(componentid, topic) {\n\t\t\tvar self = this;\n\t\t\tvar sub = subscribtions[topic];\n\t\t\tif (sub) {\n\t\t\t\tsubscribtions[topic] = sub.remove(componentid);\n\t\t\t\tclient.connected && !subscribtions[topic].length && client.unsubscribe(topic);\n\t\t\t}\n\t\t};\n\n\t\t// https://github.com/hobbyquaker/mqtt-wildcard\n\t\tfunction mqttWildcard(topic, wildcard) {\n\t\t\tif (topic === wildcard) {\n\t\t\t\treturn [];\n\t\t\t} else if (wildcard === '#') {\n\t\t\t\treturn [topic];\n\t\t\t}\n\n\t\t\tvar res = [];\n\n\t\t\tvar t = String(topic).split('/');\n\t\t\tvar w = String(wildcard).split('/');\n\n\t\t\tvar i = 0;\n\t\t\tfor (var lt = t.length; i < lt; i++) {\n\t\t\t\tif (w[i] === '+') {\n\t\t\t\t\tres.push(t[i]);\n\t\t\t\t} else if (w[i] === '#') {\n\t\t\t\t\tres.push(t.slice(i).join('/'));\n\t\t\t\t\treturn res;\n\t\t\t\t} else if (w[i] !== t[i]) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (w[i] === '#') {\n\t\t\t\ti += 1;\n\t\t\t}\n\n\t\t\treturn (i === w.length) ? res : null;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tMQTT Broker\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.hostname__placeholder:test.mosquitto.org;required:1\">Hostname</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.port__type:number;required:1\">Port</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.name }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156pxep": "<script total>\n\n\texports.name = 'MQTT Publish';\n\texports.icon = 'fa fa-sign-out';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.inputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\tvar broker = instance.main.find(config.broker);\n\t\t\tif (!broker)\n\t\t\t\treturn;\n\n\t\t\tbroker.publish($.data.topic, $.data.message);\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tvar arr = [];\n\n\t\t\tvar instances = instance.main.instances();\n\n\t\t\tinstances = instances.filter(i => i.module.name === 'MQTT Broker');\n\t\t\tfor (let com of instances)\n\t\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\t\t\tconsole.log(arr);\n\t\t\tanswer(arr);\n\t\t};\n\t};\n</script>\n\n<readme>\nMQTT Publish\n\nInput:\n```javascript\n{\n\ttopic: 'some/topic',\n\tmessage: { some: 'data' },\n\t// optional\n\toptions: {\n\t\tqos: 0|1|2,\n\t\tretain: true|false\n\t}\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer>div>div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<script>\n\tON('configure_mqttpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\"\n\t\t\t\t\tclass=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156qoz3": "<script total>\n\n\texports.name = 'MQTT Subscribe';\n\texports.icon = 'fa fa-sign-in';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.outputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar subscribed = false;\n\t\tvar broker, topic;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscribe(instance.id, topic);\n\n\t\t\ttopic = config.topic;\n\n\t\t\tinstance.status({ status: 'Not configured', topic });\n\t\t\tbroker = instance.main.find(config.broker);\n\n\t\t\tif (broker) {\n\t\t\t\tbroker.subscribe(instance.id, topic);\n\t\t\t\tsubscribed = true;\n\t\t\t\tinstance.status({ status: 'Subscribed', topic });\n\t\t\t} else {\n\t\t\t\tinstance.status({ status: 'Broker not found', topic });\n\t\t\t}\n\t\t};\n\n\t\tinstance.onmessage = function(topic, message, match) {\n\t\t\tinstance.send('message', { topic, message, match });\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscibe(instance.id, topic);\n\t\t};\n\n\t\tsetTimeout(instance.configure, 2000);\n\n\t\tinstance.call = function(data, answer) {\n\t\t\tvar arr = [];\n\n\t\t\tvar instances = instance.main.instances();\n\n\t\t\tinstances = instances.filter(i => i.module.name === 'MQTT Broker');\n\t\t\tfor (let com of instances)\n\t\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\n\t\t\tanswer(arr);\n\t\t};\n\t};\n</script>\n\n<readme>\nMQTT Subscribe\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<script>\n\tON('configure_mqttsubscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t});\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\" class=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.topic__placeholder:devices/status;required:1\" class=\"m\"><b>Topic</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<p>\n\t\t\t\t\t<b>The topic supports wildcards like:</b><br>\n\t\t\t\t\t- devices/+/status -> devices/1/status or devices/123456/status etc.<br>\n\t\t\t\t\t- devices/#        -> any topic begining with devices/.......\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t\t<div><b>{{ value.topic }}</b>Topic</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl156rfye": "<script total>\n\texports.name = 'RPIgpio';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['rpi-gpio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar RPI = require('rpi-gpio');\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet bit = $.data;\n\n\t\t\tif (config.read_write && config.gpiokey) {\n\n\t\t\t\tswitch (config.read_write) {\n\t\t\t\t\tcase 'write':\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\n\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tcase 'read':\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\n\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.destroy();\n\n\t\t};\n\t};\n</script>\n\n<readme>\n# GPIO\n\n__Write mode__:\n\n- Select the GPIO you want\n- Set the read/write option to write\n- Send true to the component to set the GPIO to HIGH\n- Send false to the component to set the GPIO to LOW\n\n__Read mode__:\n\n- Select the GPIO you want\n- Set the read/write option to write\n- Send true to the node so read the state of the gpio\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\n\t</header>\n</body>",
			"cl156shpm": "<script total>\n\n\texports.name = 'RPIgpioPWM';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['rpi-gpio'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar RPI = require('rpi-gpio');\n\n\t\tvar handler = function(duration) {\n\t\t\tinstance.pwmHandlerCount++;\n\t\t\tif (instance.pwmHandlerCount < duration * 10) {\n\t\t\t\tRPI.write(config.gpiokey, true, function(err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t});\n\t\t\t} else if (instance.pwmHandlerCount < 10) {\n\t\t\t\tRPI.write(config.gpiokey, false, function(err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.pwmHandlerCount = -1;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (config.gpiokey) {\n\t\t\t\tlet duration = $.data ? parseFloat($.data) : 0.0;\n\t\t\t\tinstance.pwmHandler && clearInterval(instance.pwmHandler);\n\t\t\t\tinstance.pwmHandlerCount = -1;\n\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE)\n\t\t\t\t$.send('output', { pin: config.gpiokey, value: duration });\n\t\t\t\tif (duration != 0.0)\n\t\t\t\t\tinstance.pwmHandler = setInterval(handler, 10, duration);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinstance.pwmHandler && clearInterval(instance.pwmHandler);\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# GPIO PWM\n\n- send number with the uptime duration to the component.\n- 0 (zero) is 0%\n- 1 (one) is 100%.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry GPIO PWM\n\t</header>\n</body>",
			"cl156u0qn": "<script total>\n\texports.name = 'RPIi2cRead';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar BCD2D = function(Wert) {\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar i2c1 = I2C.openSync(1);\n\n\t\t\tif (config.presensor) {\n\t\t\t\tswitch (config.sensor) {\n\t\t\t\t\tcase 'DS1307':\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\n\n\t\t\t\t//send msg\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\n\t\t\t\t$.send('output', rbuf.toString());\n\t\t\t}\n\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Read\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `readLength`: The length of how many bits will be read\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\n\t\t</div>\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\n\t</header>\n</body>",
			"cl156xrgb": "<script total>\n\texports.name = 'RPIi2cRead';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar BCD2D = function(Wert) {\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar i2c1 = I2C.openSync(1);\n\n\t\t\tif (config.presensor) {\n\t\t\t\tswitch (config.sensor) {\n\t\t\t\t\tcase 'DS1307':\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\n\n\t\t\t\t//send msg\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\n\t\t\t\t$.send('output', rbuf.toString());\n\t\t\t}\n\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Read\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `readLength`: The length of how many bits will be read\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\n\t\t</div>\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\n\t</header>\n</body>",
			"cl1571l5w": "<script total>\n\texports.name = 'RPIi2cWrite';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['i2c-bus'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar I2C = require('i2c-bus');\n\t\tvar stringtonumber = c => parseInt(c);\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet address, register, bytes;\n\n\t\t\ttry {\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\n\t\t\t} catch (err) {\n\t\t\t\t$.send('output', err + '');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Send msg\n\t\t\tlet i2c1 = I2C.openSync(1);\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\n\t\t\t$.send('output', { data: bytes });\n\t\t\ti2c1.closeSync();\n\t\t};\n\t};\n\n</script>\n\n<readme>\n# I2C Write\n\nParameters, can be transmitted to the component, or directly set as setting.\n\n- `address`: The I2C address of the device\n- `register`: The (starting) register\n- `bytes`: The bytes which will be written\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.address\">Address</div>\n\t\t<div data---=\"input__?.register\">Register</div>\n\t\t<div data---=\"input__?.bytes\">Data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\n\t</header>\n</body>",
			"cl1573cau": "<script total>\n\texports.name = 'RPIuart';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = { port:'/dev/ttyUSB0' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['serialport'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar SerialPort = require('serialport')\n\t\tvar sp;\n\n\t\tinstance.openConnectionUart = function(){\n\n\t\t\tsp = new SerialPort(config.port, {\n\t\t\t\tbaudRate: parseInt(config.baudrate),\n\t\t\t\tdataBits: parseInt(config.databits),\n\t\t\t\tparity: config.parity,\n\t\t\t\tstopBits: parseInt(config.stopbits),\n\t\t\t\tflowControl: false,\n\t\t\t\tautoOpen: false\n\t\t\t});\n\n\t\t\tsp.on('open', function() {\n\t\t\t\tinstance.status({ open: true });\n\t\t\t});\n\n\t\t\tsp.on('close', function() {\n\t\t\t\tinstance.status({ open: false });\n\t\t\t});\n\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\n\t\t\t\tinstance.send('output', data);\n\t\t\t});\n\n\t\t\tsp.open(function (err) {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\n\t\t\t});\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tlet bytes = $.data;\n\n\t\t\t//check if sp is open\n\t\t\tif (!sp)\n\t\t\t\tinstance.openConnectionUart();\n\n\t\t\t//send msg\n\t\t\tsp.write(bytes);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tsp && sp.close(NOOP);\n\t\t}\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\n</style>\n\n<readme>\n# UART\n\n- send a string directly to a port\n- when device from a port sends data to the host, it will be send to the output of the component\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200||115200,128000|128000;required:1\">Baudrate</div>\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry UART\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\n\t\t\t{{ if value.open }}\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\n\t\t\t{{ else }}\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\n\t\t\t{{ fi }}\n\t\t</div>\n\t</footer>\n</body>",
			"cl1574vgz": "<script total>\n\texports.name = 'RPIuartDevices';\n\texports.author = 'Thecoolpeople';\n\texports.group = 'Raspberry';\n\texports.icon = 'fab fa-raspberry-pi';\n\texports.version = '1';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['serialport'];\n\n\texports.make = function(instance, config) {\n\t\tvar SerialPort = new require('serialport');\n\t\tinstance.trigger = async function() {\n\t\t\tawait SerialPort.list().then(function(ports) {\n\t\t\t\tinstance.send('output', ports);\n\t\t\t});\n\t\t}\n\t};\n\n</script>\n\n<readme>\n# UART\n\nGet all devices which are possible to send\n</readme>\n\n<script>\n\tFUNC.frpiuartdevices_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\n\t</div>\n</body>",
			"cl1575p5d": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-binoculars';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tvar doc = MAIN.flowstream.db[instance.main.id];\n\t\t\tmsg.schema = doc.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || doc.url || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.app\">App name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.reference\">Reference</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.url\">URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.message__required:1;maxlength:200\">Message</div>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cl15768bg": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Peter Širka';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cl1576sj0": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Peter Širka';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cl1577pl2": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.version = '1';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <span data-bind=\"CONFIG.url__text\"></span></div>\n\t</footer>\n</body>",
			"cl1578aes": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"inputy__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"cl1578tyk": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Peter Širka';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"coh6ob13": "<script total>\n\n\texports.name = 'Switch';\n\texports.icon = 'fa fa-sitemap fa-rotate-270';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<div data---=\"input__?.source__dirsource:REPO.switch_datasources__'data'\"></div>\n\t\t\t<div data---=\"input__?.path\"></div>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.conditions__template:.switch-condition -> data-index\" data---=\"movable__?.conditions__selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].operator__dirsource:REPO.switch_operators\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t<div data-bind=\"?.conditions[{{ $index }}].operator__hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty'__.switch-input-group:value!=='expression'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].type__dirsource:REPO.switch_valuetypes\" data-bind=\"?.conditions[{{ $index }}].operator__hide:value==='expression'\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].value__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].name\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"il155hgek": {
				"id": "il155hgek",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": true,
					"interval": 20000
				},
				"x": -45,
				"y": 233,
				"component": "cl155eca6",
				"connections": {
					"output": [
						{
							"id": "il155j1lu",
							"index": "input"
						},
						{
							"id": "il32vpzov",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "AcgDevs",
					"name": "Trigger2",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155j1lu": {
				"id": "il155j1lu",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t};\n});"
				},
				"x": 273,
				"y": 216,
				"note": "VERIFY POWER ON/OFF",
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155o411",
							"index": "input"
						},
						{
							"id": "il16evdo0",
							"index": "input"
						},
						{
							"id": "il1c0pw4v",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155o411": {
				"id": "il155o411",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','bj').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 532.9375,
				"y": 181.96875,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155p8pv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155p8pv": {
				"id": "il155p8pv",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 790.9942626953125,
				"y": 191.98863220214844,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il155q3wb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155q3wb": {
				"id": "il155q3wb",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'https://api.pray.zone/v2/times/today.json?longitude={0}&latitude={1}&elevation={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,200);\n\nopt.callback = function (err,res){\n\tvar obj = { name : region.name };\n\tobj.data = res.body.parseJSON(true).results.datetime[0].times;\n$.send('output',obj);\n};\nREQUEST(opt);"
				},
				"x": 1066.988525390625,
				"y": 201.98863220214844,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1581scl",
							"index": "input"
						},
						{
							"id": "il1mbbgu3",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il155s0wf": {
				"id": "il155s0wf",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1856.46875,
				"y": 117.71875,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1581scl": {
				"id": "il1581scl",
				"config": {
					"template": "***HEURES DE PRIERE @{model.name}*** \n***@{NOW.format('dd MMMM yyyy','date')}*** \nImsak @{model.data.Imsak}\nLeverSoleil @{model.data.Sunrise}\nFajr @{model.data.Fajr}\nDhuhr @{model.data.Dhuhr}\nAsr @{model.data.Asr}\nCoucheSoleil @{model.data.Sunset}\nMaghrib @{model.data.Maghrib}\nIsha @{model.data.Isha}\nMinuit @{model.data.Midnight}\n\n\n"
				},
				"x": 1407,
				"y": 205.46875,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il155s0wf",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16evdo0": {
				"id": "il16evdo0",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','bf').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 593,
				"y": 379,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16ew1l0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ew1l0": {
				"id": "il16ew1l0",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 839,
				"y": 357,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16ewu6c",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ewu6c": {
				"id": "il16ewu6c",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'https://api.pray.zone/v2/times/today.json?longitude={0}&latitude={1}&elevation={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,200);\n\nopt.callback = function (err,res){\n\tvar obj = { name : region.name };\n\t//obj.data = res.body.parseJSON(true).results.datetime[0].times;\n\tobj.data = res.body.parseJSON(true);\n$.send('output',obj);\n};\nREQUEST(opt);"
				},
				"x": 1128.25,
				"y": 380.75,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il16exjjt",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16exjjt": {
				"id": "il16exjjt",
				"config": {
					"template": "***HEURES DE PRIERE @{model.name}*** \n***@{NOW.format('dd MMMM yyyy','date')}*** \nImsak @{model.data.Imsak}\nLeverSoleil @{model.data.Sunrise}\nFajr @{model.data.Fajr}\nDhuhr @{model.data.Dhuhr}\nAsr @{model.data.Asr}\nCoucheSoleil @{model.data.Sunset}\nMaghrib @{model.data.Maghrib}\nIsha @{model.data.Isha}\nMinuit @{model.data.Midnight}\n\n\n"
				},
				"x": 1389.96875,
				"y": 420.78125,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il16ey27x",
							"index": "input"
						},
						{
							"id": "il300qrjw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il16ey27x": {
				"id": "il16ey27x",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1905.125,
				"y": 426.03125,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1c0pw4v": {
				"id": "il1c0pw4v",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').find().where('country','ml').callback(function(err,regions) {\n\tif(regions.length > 0){\n\t$.send('output',regions)\n\t}\n})"
				},
				"x": 528.25,
				"y": 557.125,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0pyt1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0pyt1": {
				"id": "il1c0pyt1",
				"config": {
					"outputs": 1,
					"code": "var regions = data;\nregions.forEach(function(region) {\n$.send('output',region);\n});"
				},
				"x": 820.9375,
				"y": 617.90625,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0q26m",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0q26m": {
				"id": "il1c0q26m",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'https://api.pray.zone/v2/times/today.json?longitude={0}&latitude={1}&elevation={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,200);\n\nopt.callback = function (err,res){\n\tvar obj = { name : region.name };\n\tobj.data = res.body.parseJSON(true).results.datetime[0].times;\n$.send('output',obj);\n};\nREQUEST(opt);"
				},
				"x": 1062.8125,
				"y": 617.78125,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1c0q8qu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0q8qu": {
				"id": "il1c0q8qu",
				"config": {
					"template": "***HEURES DE PRIERE @{model.name}*** \n***@{NOW.format('dd MMMM yyyy','date')}*** \nImsak @{model.data.Imsak}\nLeverSoleil @{model.data.Sunrise}\nFajr @{model.data.Fajr}\nDhuhr @{model.data.Dhuhr}\nAsr @{model.data.Asr}\nCoucheSoleil @{model.data.Sunset}\nMaghrib @{model.data.Maghrib}\nIsha @{model.data.Isha}\nMinuit @{model.data.Midnight}\n\n\n"
				},
				"x": 1392.25,
				"y": 579.125,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il1c0qaie",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1c0qaie": {
				"id": "il1c0qaie",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1754.875,
				"y": 618.6875,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1g9pvwe": {
				"id": "il1g9pvwe",
				"config": {
					"url": "/apimeteo/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "custom"
				},
				"x": -20.5,
				"y": 682.5,
				"component": "cl1577pl2",
				"connections": {
					"output": [
						{
							"id": "il1g9rasb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1g9rasb": {
				"id": "il1g9rasb",
				"config": {
					"outputs": 1,
					"code": "NOSQL('regions').one().where('sc',(data.query.sc || '')).callback(function(err,region) {\n\tif(region){\n\t$.send('output',region)\n\t}\n});"
				},
				"x": 481,
				"y": 809,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1garlct",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1g9v9ju": {
				"id": "il1g9v9ju",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1522.15625,
				"y": 781.78125,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il1garlct": {
				"id": "il1garlct",
				"config": {
					"outputs": 1,
					"code": "var region = data;\nvar api_key = 'ab44dbf29c0522727ec58b0e27f1f0ac';\nvar url = 'http://api.openweathermap.org/data/2.5/weather?lat={1}&lon={0}&units=metric&lang=fr&appid={2}'\nvar opt = {};\nopt.url = url.format(region.long,region.lat,api_key);\n\nopt.callback = function (err,res){\n\n$.send('output',res.body.parseJSON(true));\n};\nREQUEST(opt);"
				},
				"x": 929.3125,
				"y": 735.1875,
				"component": "cl155f3k4",
				"connections": {
					"output": [
						{
							"id": "il1gart7f",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1gart7f": {
				"id": "il1gart7f",
				"config": {
					"template": "***Meteo Aujourd hui @{NOW.format('dd MMMM yyyy','date')}*** \n***@{model.name}*** \nTemps : @{model.weather[0].description}\nTempMax : @{model.main.temp_max} deg C \nTempMin : @{model.main.temp_min} deg C \nVitesseVent : @{((model.wind.speed * 18)/5).round(2)}km/h \nLeverSoleil @{(model.sys.sunrise * 1000).parseDate().format('HH:mm')} \nCouchersoleil @{(model.sys.sunset * 1000).parseDate().format('HH:mm')}"
				},
				"x": 1222.125,
				"y": 826.125,
				"component": "cl155wjan",
				"connections": {
					"output": [
						{
							"id": "il1g9v9ju",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "AcgDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il1mbbgu3": {
				"id": "il1mbbgu3",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2573.522705078125,
				"y": 88.49432373046875,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il300qrjw": {
				"id": "il300qrjw",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1852,
				"y": 308,
				"component": "cl155gk2e",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il32vpzov": {
				"id": "il32vpzov",
				"config": {},
				"x": 233,
				"y": 507,
				"component": "cl155fspr",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"paused": {
				"input__il155j1lu__input": 1
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://192.168.0.171:8000",
		"dtcreated": "2022-05-10T10:31:54.949Z",
		"size": 162498,
		"variables2": {}
	},
	"fpnvk001aj41d": {
		"paused": true,
		"id": "fpnvk001aj41d",
		"reference": "",
		"author": "",
		"group": "Actualite",
		"icon": "fa fa-volleyball-ball",
		"color": "#61C83B",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Actu SPORT",
		"components": {
			"cgq0f971dd": "<script total>\n\n\texports.name = 'Macro';\n\texports.icon = 'fa fa-scroll';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { code: 'RETURN DATA' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\t\tvar temp = {};\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar val = fn({ data: $.data, temp: temp });\n\t\t\t\t$.send('output', val === undefined ? $.data : val);\n\t\t\t} else\n\t\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tfn = config.code ? NEWMACRO(config.code) : null;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe macro component uses Total.js Macro language that allows you to write much simple code like in JavaScript. Macros are targeted for small data transformation.\n\n- you don't need to solve Upper/Lower case\n- `return EXPRESSION` will return data and send them next\n- `data` keyword contains a message data\n- `temp` keyword can contain a persistent temporary data\n\n__Example__:\n\n```text\nIF DATA>20 AND DATA<35\n\tRETURN DATA * 5\nFI\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear temporary data</div>\n\t\t<div data---=\"codemirror__?.code__type:text;minheight:300;parent:auto;margin:90;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><a href=\"https://docs.totaljs.com/total4/pahk001pr41d/\" target=\"_blank\"><i class=\"fa fa-book mr5\"></i>Documentation</a></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgmxl1055e": "<script total>\n\n\texports.id = 'qrgenerator';\n\texports.name = 'QR generator';\n\texports.icon = 'fa fa-qrcode';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['awesome-qr'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tconst { AwesomeQR } = require(\"awesome-qr\");\n\t\tconst { writeFile, readFile } = require('fs').promises;\n\t\tconst filename = PATH.tmp(instance.id + 'qrcode.png');\n\t\tvar bgready = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tgenerate(data.text, function(err, buf){\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.end();\n\t\t\t\tif ($.data.filename)\n\t\t\t\t\tF.Fs.writeFile($.data.filename, buf, function(err){\n\t\t\t\t\t\tif (err) instance.throw(err);\n\t\t\t\t\t});\n\t\t\t\t$.data._qrcode = buf.toString('base64');\n\t\t\t\t$.send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t/*// \"config\" is changed\n\t\t\tif (config.background) {\n\t\t\t\twriteFile(filename, Buffer.from(config.background.split(';base64,')[1], 'base64'))\n\t\t\t\t\t.then(_ => { console.log('OK'); bgready = true; })\n\t\t\t\t\t.catch(err => { console.log('FAILED', err); bgready = false; });\n\t\t\t} else\n\t\t\t\tbgready = false;*/\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function generate(text, cb) {\n\t\t\tvar bg;\n\n\t\t\tif (bgready) {\n\t\t\t\ttry {\n\t\t\t\t\tbg = await readFile(filename);\n\t\t\t\t} catch(e) {\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar obj = {\n\t\t\t\ttext,\n\t\t\t\tsize: 600\n\t\t\t}\n\n\t\t\tif (bg)\n\t\t\t\tobj.backgroundImage = bg;\n\t\t\tvar buffer;\n\n\t\t\tnew AwesomeQR(obj).draw().then(buf => {\n\t\t\t\tcb(null, buf);\n\t\t\t}).catch(err => {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\ttext: 'text to write to qr code',\n\tfilename: '/public/img/', // optionaly writes the file to filesystem\n\t...\n}\n```\n## Output\n```js\n{\n\ttext: 'text to write to qr code',\n\t...\n\t_qrcode: 'base64 encoded buffer'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<!--Please use <a href=\"https://www.base64-image.de/\" target=\"_blank\">base64-image.de</a> to turn the background image to Base64 and place the text \"data:image/png;ba....\" bellow.\n\t\t<div data---=\"input__?.background\">Background Image data (optional)</div>-->\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ch5c79dcc2": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"ch9ub95918": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"chdmwfcabd": "<script total>\n\n\texports.name = 'Workflow';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Name', code: 'success();', clear: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1400 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar repo = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn($, repo);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tvar code = config.code;\n\t\t\t\tif (code) {\n\n\t\t\t\t\tvar builder = ['var controller=$.refs.controller||EMPTYOBJECT'];\n\n\t\t\t\t\tif (code.indexOf('headers') !== -1)\n\t\t\t\t\t\tbuilder.push('headers=controller.headers||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('params') !== -1)\n\t\t\t\t\t\tbuilder.push('params=controller.params||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('query') !== -1)\n\t\t\t\t\t\tbuilder.push('query=controller.query||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('respond') !== -1)\n\t\t\t\t\t\tbuilder.push('respond=(data)=>$.send(\\'output\\',data)');\n\n\t\t\t\t\tif (code.indexOf('success') !== -1)\n\t\t\t\t\t\tbuilder.push('success=(data)=>$.send(\\'output\\',{success:true,value:data})');\n\n\t\t\t\t\tif (code.indexOf('invalid') !== -1)\n\t\t\t\t\t\tbuilder.push('invalid=(err)=>$.send(\\'error\\',[{error:err.toString()}])');\n\n\t\t\t\t\tif (code.indexOf('user') !== -1)\n\t\t\t\t\t\tbuilder.push('user=controller.user');\n\n\t\t\t\t\tif (code.indexOf('ip') !== -1)\n\t\t\t\t\t\tbuilder.push('ip=controller.ip||\\'\\'');\n\n\t\t\t\t\tif (code.indexOf('model') !== -1)\n\t\t\t\t\t\tbuilder.push('model=$.data');\n\n\t\t\t\t\tvar AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t\t\t\t\tvar body = builder.join(',') + ';try{' + code + '}catch(e){$.instance.status({error:e.message});$.destroy();}';\n\n\t\t\t\t\tfn = code.indexOf('await ') === -1 ? new Function('$', 'repo', body) : new AsyncFunction('$', 'repo', body);\n\n\t\t\t\t\tif (config.clear)\n\t\t\t\t\t\trepo = {};\n\n\t\t\t\t} else\n\t\t\t\t\tfn = null;\n\n\t\t\t\tinstance.status(EMPTYOBJECT);\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.status({ error: e.message });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t\trepo = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component simulates Total.js Schema Workflow operation. It can process data and store/read them into the database.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Workflow name</div>\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear repository object</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:185;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><i class=\"fa fa-book\"></i><span class=\"link exec\" data-exec=\"comworkflowsettingshelp\">Documentation</span></div>\n\t</div>\n</settings>\n\n<script>\nTOUCH(function(instance) {\n\n\tW.comworkflowsettingshelp = function() {\n\tvar md = `\n__Properties__:\n- \\`$ {Message}\\`\n- \\`controller {Object}\\` A controller instance\n- \\`user {Object}\\` A user instance if exists\n- \\`headers {Object}\\` Request headers\n- \\`query {Object}\\` URL query arguments\n- \\`params {Object}\\` A dynamic URL params\n- \\`ip {String}\\` IP address\n\n__Functions__:\n- \\`respond(data {Object})\\` Responds with data\n- \\`success(data {Object}\\` optional) Response with success object\n- \\`invalid(error {String})\\` Error handling`;\n\t\tFUNC.readme('Documentation: Workflow', md);\n\t};\n\n\tinstance.settings = function() {\n\t\tif (!W.comworkflowsettingsskip) {\n\t\t\tW.comworkflowsettingsskip = true;\n\t\t\tW.comworkflowsettingshelp();\n\t\t}\n\t};\n});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text\"></b>\n\t</header>\n\t<footer data-bind=\"STATUS.error__text span__show\" style=\"padding:10px\" class=\"fs12 red\"><i class=\"fa fa-bug mr5\"></i><b>ERROR:</b> <span></span></footer>\n</body>",
			"chim37758d": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { payload: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + value.substring(1)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"chkct9f685": "<script total>\n\n\texports.name = 'Token Auth';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:1\">Token</div>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.header__required:1;type:lower\">Header</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.error__required:1\">Error message</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div data---=\"input__?.ddos__required:1;type:number\">DDOS protection</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.code__text\" class=\"code\"></span> <span data-bind=\"CONFIG.header__text\"></span></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
			"chm2b0c2fc": "<script total>\n\n\texports.name = 'Remember';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-save';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'remember', name: 'Remember' }, { id: 'request', name: 'Request' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache;\n\n\t\tinstance.message = function($) {\n\n\t\t\tif ($.input === 'remember') {\n\t\t\t\tcache = $.data;\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar val = cache;\n\n\t\t\tif (val == null)\n\t\t\t\tval = null;\n\n\t\t\tif (config.path)\n\t\t\t\tU.set($.data, config.path, val);\n\t\t\telse\n\t\t\t\t$.data = val;\n\n\t\t\t$.send('response');\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe primary goal of this component is to remember data. The component contains two inputs:\n\n- Remember input for remembering data\n- Request input as a trigger for obtaining data, then remembered data would extend the request message (its data), and the component will send it to the Response output\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property\">Set remembered data to the specific property/field</div>\n\t\t<div class=\"help\">If you don't enter the property, the remembered data will replace data on the Request input.</div>\n\t</div>\n</settings>",
			"chnzlb085c": "<script total>\n\n\texports.name = 'API PostgreSQL';\n\texports.icon = 'fa fa-cubes';\n\texports.author = 'Total.js';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.config = { name: 'default', url: '', pooling: 2 };\n\texports.outputs = [{ id: 'error', name: 'Error' }];\n\texports.npm = ['querybuilderpg'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar QB = require('querybuilderpg');\n\t\tvar init = false;\n\t\tvar conf;\n\n\t\tinstance.configure = function() {\n\n\t\t\tinit && QB.init(conf.name);\n\t\t\tconf = instance.replace(config);\n\n\t\t\tif (conf.url) {\n\t\t\t\tQB.init(conf.name, conf.url, config.pooling, function(err, data) {\n\t\t\t\t\tvar msg = instance.newmessage([{ error: err + ' --> ' + data.query }]);\n\t\t\t\t\tmsg.send('error');\n\t\t\t\t});\n\t\t\t\tinit = true;\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tconf && require('querybuilderpg').init(conf.name);\n\t\t\tconf = null;\n\t\t\tinit = false;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component initializes QueryBuilder for PostgreSQL database. So you will able to use `API Database` component. Every connection must be separated by the alias.\n\n__Usage in API Database__:\n\n- `tbl_user` is targeted to the `default/tbl_user` alias connection\n- `anotherserver/tbl_user` will use `anotherserver` alias connection\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Alias</div>\n\t\t\t\t<div class=\"help\">The alias separates various DB connections</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.url__required:1;camouflage:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">Example: postgresql://user:pass@localhost:5432/database_name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.pooling__required:1;type:number\">Pooling</div>\n\t\t\t\t<div class=\"help\">How many connections can it keep?</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\tAlias: <b class=\"monospace\" data-bind=\"CONFIG.name__text\"></b>\n\t</footer>\n</body>",
			"chpq6c0445": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tcompiled = {};\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{dynamic_arg_1}/{dynamic_arg_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n__Output data:__ will be same data extendend by adding new properties:\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"chsvy615c5": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\" class=\"code\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</footer>\n</body>",
			"chuxx5941c": "<script total>\n\n\texports.name = 'API Database';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-database';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', tab: 'list', listtable: '', listfilter: [], listwhere: [], listlimit: 100, listsort: '', listpath: '', createtable: '', createerror: '', readtable: '', readfields: '*', readwhere: [], readpath: '', readsort: '', readerror: '', createtable: '', createpath: '', updatetable: '', updateerror: '', updatepath: '', updatewhere: [], removetable: '', removepath: '', removeerror: '', removewhere: [] };\n\texports.inputs = [{ id: 'list', name: 'List' }, { id: 'create', name: 'Create' }, { id: 'read', name: 'Read' }, { id: 'update', name: 'Update' }, { id: 'remove', name: 'Delete' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar builder = null;\n\t\t\tvar is = false;\n\t\t\tvar data = $.data;\n\t\t\tvar params = data.params || EMPTYOBJECT;\n\t\t\tvar query = data.query || EMPTYOBJECT;\n\t\t\tvar user = data.user || EMPTYOBJECT;\n\n\t\t\tdata = data.data || data.body;\n\n\t\t\tswitch ($.input) {\n\t\t\t\tcase 'create':\n\t\t\t\t\tif (config.createtable)\n\t\t\t\t\t\tbuilder = DB().insert(config.createtable, data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\n\t\t\t\t\tif (config.updatetable) {\n\t\t\t\t\t\tbuilder = DB().update(config.updatetable, data);\n\t\t\t\t\t\tcache.update && cache.update(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.updateerror && builder.error(config.updateerror);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remove':\n\t\t\t\t\tif (config.removetable) {\n\t\t\t\t\t\tbuilder = DB().remove(config.removetable);\n\t\t\t\t\t\tcache.remove && cache.remove(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.removeerror && builder.error(config.removeerror);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'read':\n\t\t\t\t\tif (config.readtable) {\n\t\t\t\t\t\tbuilder = DB().read(config.readtable);\n\t\t\t\t\t\tcache.read && cache.read(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.readerror && builder.error(config.readerror);\n\t\t\t\t\t\tif (cache.readsort) {\n\t\t\t\t\t\t\tfor (var m of cache.readsort)\n\t\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'list':\n\t\t\t\t\tif (config.listtable) {\n\t\t\t\t\t\tbuilder = DB().list(config.listtable);\n\t\t\t\t\t\tbuilder.autoquery(query, cache.listfields, cache.listsort ? (cache.listsort[0] + '_' + cache.listsort[1]) : null, config.listlimit || 100);\n\t\t\t\t\t\tcache.list && cache.list(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (builder) {\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t$.send('error', [{ error: err + '' }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar path = config[$.input + 'path'];\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\tU.set($.data, path, response);\n\t\t\t\t\t\t\t$.send('output');\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\t$.send('error', [{ error: 'Not configured' }]);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tconfig.tab = 'list';\n\n\t\t\tvar types = ['list', 'update', 'read', 'remove'];\n\t\t\tvar builder;\n\t\t\tvar tmp;\n\n\t\t\tfor (var key of types) {\n\n\t\t\t\tbuilder = [];\n\n\t\t\t\tfor (var item of config[key + 'where']) {\n\t\t\t\t\tvar val = 'null';\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase '1':\n\t\t\t\t\t\t\tval = item.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '2':\n\t\t\t\t\t\t\tval = '\\'' + item.value.replace(/'/g, '\\\\\\'') + '\\'';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\tval = item.value.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === '1' || item.value === 'true' || val === 'on';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === 'now' ? 'new Date()' : item.value.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '6':\n\t\t\t\t\t\t\tval = 'null';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbuilder.push('where(\\'{0}\\', \\'{1}\\', {2})'.format(item.name, item.comparer, val));\n\t\t\t\t}\n\n\t\t\t\tcache[key] = builder.length ? new Function('params', 'data', 'query', 'user', 'refs', '$', 'builder', 'builder.' + builder.join('.')) : null;\n\t\t\t}\n\n\t\t\ttypes = ['list', 'read'];\n\n\t\t\tfor (var key of types) {\n\t\t\t\tvar k = key + 'sort';\n\t\t\t\tif (config[k]) {\n\t\t\t\t\tcache[k] = [];\n\t\t\t\t\ttmp = config[k].split(/,|;/);\n\t\t\t\t\tfor (var m of tmp) {\n\t\t\t\t\t\tm = m.trim().split(' ');\n\t\t\t\t\t\tm[1] = (m[1] || '').toLowerCase() === 'asc';\n\t\t\t\t\t\tcache[k].push(m);\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tcache[k] = null;\n\t\t\t}\n\n\t\t\tcache.listfields = '';\n\n\t\t\tfor (var item of config.listfilter) {\n\t\t\t\ttmp = 'string';\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase '3':\n\t\t\t\t\t\ttmp = 'number';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '4':\n\t\t\t\t\t\ttmp = 'boolean';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '5':\n\t\t\t\t\t\ttmp = 'date';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcache.listfields += (cache.listfields ? ',' : '') + item.name + ':' + tmp;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component can perform some operations on a database with the help of Total.js QueryBuilder. First, you must initialize the connection string for the database via QueryBuilder initialization.\n\n__Input data__:\n\n- `data {Object}` or `body {Object}` optional - payload\n- `query {Object}` optional - query data, key/value must be string\n- `params {Object}` optional - dynamic values, key/value must be string\n- `user {Object}` optional - a user instance\n\n__Output__:\n\n- `insert` returns Number\n- `update` returns Number\n- `remove` returns Number\n- `query` returns Array of Objects\n- `read` returns Object\n- `list` returns:\n\n```json\n{\n\titems: Array,\n\tpage: Number,\n\tpages: Number,\n\tcount: Number\n}\n```\n\nQuery parameters for the `List` operation can contain the below fields which can affect filtering according to the values defined in the dynamic filter.\n\n- `sort {String}` can contain field name with `_asc` or `_desc` value\n- `fields {String}` can return only specified fields separated by comma\n- `page {Number}` page number\n- `limit {Number}` max. items per page (default: max. limit)\n- `column_name=VALUE` enables dynamic filtering\n\n---\n\n__Good to know__: If the `data` (payload) can contain special key names in the form:\n\n- `+key` increments a value\n- `-key` decrements a value\n- `!key` performs toggle for boolean values\n- `>key` stores only greater value\n- `<key` stores only lower value\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings .item { padding: 7px 10px; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\n\t<script type=\"text/html\" class=\"apidatabasestaticfilter\">\n\t\t<div data---=\"listform__?.TYPEwhere__autofocus:1;empty:You do not have defined any rules\">\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} {{ comparer }} <b>{{ if type == '6' }}null{{ else }}{{ value }}{{ fi }}</b></div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'id'\">Name</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.comparer__required:1;align:1;dirsource:tmpcruddb.comparers__'='\">Comparer</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types__'1'\">Type</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.value__monospace:1;align:1__''\" data-bind=\"?.type__enable:value!=='6'\">Value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"help\"><b>Expression</b> supports these commands <code>params {Object}</code>, <code>query {Object}</code>, <code>data {Object}</code>, <code>user {Object}</code>. A value for date field can contain <code>now</code> with the current date/time.</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t</SCR>\n\t\t</div>\n\t</script>\n\n\t<div class=\"CLASS-settings\">\n\n\t\t<div class=\"padding bg-smoke\">\n\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\n\t\t\t<ul class=\"tabmenu\" data---=\"tabmenu__?.tab__null__'list'\">\n\t\t\t\t<li data-value=\"list\">List</li>\n\t\t\t\t<li data-value=\"read\">Read</li>\n\t\t\t\t<li data-value=\"create\">Create</li>\n\t\t\t\t<li data-value=\"update\">Update</li>\n\t\t\t\t<li data-value=\"remove\">Delete</li>\n\t\t\t</ul>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding npt\">\n\n\t\t\t<div data-bind=\"?.tab__show:value==='list'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-list\"></i>List input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listlimit__type:number;required:1;monospace:1\">Max. limit</div>\n\t\t\t\t\t\t<div class=\"help\">Max. records to output</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=list\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel\">\n\t\t\t\t\t<label class=\"bg-smoke\">Dynamic filter</label>\n\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t<div data---=\"listform__?.listfilter__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} <b>{{ type | tmpapidatabasetype }}</b></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'dtcreated'\">Name</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types2__'5'\">Type</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='read'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-glasses\"></i>Read input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<hr />\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readfields__monospace:1\"><b>Read fields</b></div>\n\t\t\t\t\t\t<div class=\"help\">Seperate them by the comma. Empty value or <code>*</code> returns all fields (columns).</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=read\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='create'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-plus-circle\"></i>Create input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='update'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-pencil\"></i>Update input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updateerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=update\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='remove'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-trash-alt\"></i>Delete input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removeerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=remove\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmpapidatabase;\n\n\t\t\tif (!tmp) {\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.commands = [];\n\t\t\t\ttmp.commands.push({ id: 'list', name: 'List' });\n\t\t\t\ttmp.commands.push({ id: 'read', name: 'Read' });\n\t\t\t\ttmp.commands.push({ id: 'insert', name: 'Insert' });\n\t\t\t\ttmp.commands.push({ id: 'update', name: 'Update' });\n\t\t\t\ttmp.commands.push({ id: 'delete', name: 'Delete' });\n\t\t\t\ttmp.comparers = [];\n\t\t\t\ttmp.comparers.push({ id: '=', name: '=' });\n\t\t\t\ttmp.comparers.push({ id: '>', name: '>' });\n\t\t\t\ttmp.comparers.push({ id: '>=', name: '>=' });\n\t\t\t\ttmp.comparers.push({ id: '<', name: '<' });\n\t\t\t\ttmp.comparers.push({ id: '<=', name: '<=' });\n\t\t\t\ttmp.comparers.push({ id: '<>', name: '<>' });\n\n\t\t\t\ttmp.types = [];\n\t\t\t\ttmp.types.push({ id: '1', name: 'Expression' });\n\t\t\t\ttmp.types.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types.push({ id: '5', name: 'Date' });\n\t\t\t\ttmp.types.push({ id: '6', name: 'NULL' });\n\n\t\t\t\ttmp.types2 = [];\n\t\t\t\ttmp.types2.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types2.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types2.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types2.push({ id: '5', name: 'Date' });\n\n\t\t\t\tThelpers.tmpapidatabasetype = function(val) {\n\t\t\t\t\treturn tmp.types2.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapidatabase = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"chvhr9eb24": "<script total>\n\n\texports.name = 'CORS';\n\texports.group = 'REST API';\n\texports.icon = 'fab fa-html5';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\t\tvar route = CORS();\n\t\tinstance.close = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\troute = null;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component enables Cross-Origin Resource Sharing `CORS`, so the web browser will be able to communicate directly with the REST API. The functionality will work only with a defined Proxy endpoint for this Flow.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"fa-3x fab fa-html5\" style=\"color:#BD6B27\"></i>\n\t\t<div class=\"mt10 fs12\">CORS enabled</div>\n\t</div>\n</body>",
			"chxs92d30e": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"chyqe6dd66": "<script total>\n\n\texports.id = 'date';\n\texports.name = 'Date';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-calendar';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t\tinstance.configure = function configure() {\n\t\t\tinstance.status(config.format || 'yyyy-MM-dd HH:mm:ss');\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.trigger = function trigger() {\n\t\t\tinstance.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.format__placeholder:yyyy-MM-dd HH\\:mm\\:ss\">Date format</div>\n\t\t<p>\n\t\t\td - day e.g. 1<br>\n\t\t\tdd - day e.g. 01<br>\n\t\t\tddd - day (named). MO<br>\n\t\t\tdddd - day (named). Monday<br>\n\t\t\tM - month e.g. 1<br>\n\t\t\tMM - month e.g. 01<br>\n\t\t\tMMM - month (named). Jan<br>\n\t\t\tMMMM - month (named). January<br>\n\t\t\tyy - year e.g. 16<br>\n\t\t\tyyyy - year e.g. 2016<br>\n\t\t\tw - week number e.g. 1<br>\n\t\t\tww - week number e.g. 01<br>\n\t\t\tH - hour e.g. 1<br>\n\t\t\tHH - hour e.g. 01<br>\n\t\t\tm - minute e.g. 1<br>\n\t\t\tmm - minute e.g. 01<br>\n\t\t\ts - second e.g. 1<br>\n\t\t\tss - second e.g. 01<br>\n\t\t\ta - AM/PM\n\t\t</p>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci0a550362": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"ci0v4e844c": "<script total>\n\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data;' + builder.join('') + '$.destroy();');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sort data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > div { padding: 10px; font-size: 12px; }\n\t.CLASS footer .newbie { display: none; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASSsettings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASSsettings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASSsettings\">\n\t\t<div data---=\"listform__?.conditions__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"fa fa-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1__''\" class=\"m\">Name</div>\n\t\t\t\t\t<div data---=\"input__?.if__required:1__'value != null'\">Condition</div>\n\t\t\t\t\t<div class=\"help m\"><i class=\"fa fa-exclamation-triangle\"></i><code>value</code> represents a message data. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<div data---=\"validate__?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__text__show\" class=\"red\"></div>\n\t\t<div class=\"newbie\"><i class=\"fa fa-clock-o mr5\"></i>Waits for applying</div>\n\t</footer>\n</body>",
			"ci1cf7fe31": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci21rf35b4": "<script total>\n\texports.id = 'middleware_exec';\n\texports.name = 'Middleware Exec';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { id: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function message($) {\n\t\t\tif (!config.id) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar com = instance.main.instances().findItem('id', config.id);\n\n\t\t\tif (!com || !com.execute) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcom.execute($, function(err, data){\n\t\t\t\tif (err)\n\t\t\t\t\t$.send('error', err);\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function call(data, callback) {\n\t\tvar coms = this.instances().filter(ins => ins.component === 'middleware_function' && ins.config.name).map(ins => ({ id: ins.id, name: ins.config.name }));\n\t\tcallback(coms);\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\t\texports.settings = function(meta) {\n\t\t\tmeta.call(function(response) {\n\t\t\t\tSET('%functions', response);\n\t\t\t}, true);\n\t\t};\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%functions;dirraw:1;placeholder:Select middleware function;dirempty:No functions;required:1\" class=\"m\">Name</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci2ol4a50c": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci39e1e50f": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? Buffer.from(value, item.convert.substring(4)) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.path && config.rewrite)\n\t\t\t\tU.set($.data, config.path, obj);\n\n\t\t\t$.send('output', obj);\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"ci40w50cc5": "<script total>\n\n\texports.name = 'Server extension';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-flag-checkered';\n\texports.author = 'Total.js';\n\texports.config = { name: 'My extension', install: '', uninstall: '', icon: exports.icon };\n\n\texports.make = function(instance, config) {\n\n\t\tvar install = null;\n\t\tvar uninstall = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (uninstall) {\n\t\t\t\tuninstall.call(instance, instance, require);\n\t\t\t\tuninstall = null;\n\t\t\t\tsetTimeout(instance.configure, 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tinstall = config.install ? new Function('instance', 'require', config.install) : null;\n\t\t\t\tuninstall = config.uninstall ? new Function('instance', 'require', config.uninstall) : null;\n\t\t\t} catch (e) {\n\t\t\t\tinstall = null;\n\t\t\t\tuninstall = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\n\t\t\tinstall && install.call(instance, instance, require);\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tuninstall && uninstall.call(instance, instance, require);\n\t\t\tuninstall = null;\n\t\t\tinstall = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component installs Total.js server-side extension. In other words: it can evaluate JavaScript code when the component is initialized or the component settings is changed.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:e.g. Database\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Installation code:</div>\n\t\t<div data---=\"codemirror__?.install__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help m\">The code will be executed when the configuration is changed or the component instance is initialized.</div>\n\t\t<div class=\"ui-input-label\">Uninstallation code:</div>\n\t\t<div data---=\"codemirror__?.uninstall__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">The code above will be executed when the configuration is changed or the component instance is removed.</div>\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\" data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<i class=\"fa-2x {{ value.icon }}\"></i>\n\t\t\t<div class=\"mt10 fs12\">{{ value.name }}</div>\n\t\t\t<div class=\"help npt nmt\">Server extension</div>\n\t\t</script>\n\t</div>\n</body>",
			"ci4i028e45": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ci4yb31396": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ci5lsa7a49": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; min-width: 150px; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec button hidden\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__hide\">Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci6662d511": "<script total>\n\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true, name: 'Debug' };\n\texports.inputs = [{ id: 'input', name: 'Log window' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status({ name: config.name, date: new Date(), data: output });\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name\" class=\"m\">Name</div>\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"far fa-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<div data---=\"box__common.$debug__if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:fa fa-bug;zindex:5\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"fa fa-trash-alt\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></div>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"fa fa-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(data.data, '\\t'))));\n\t\t};\n\n\t});\n\n</script>",
			"ci6sh4b21d": "<script total>\n\texports.id = 'middleware_function';\n\texports.name = 'Middleware Function';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// callback(...);' };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tfn = new Function('instance', '$', 'data', 'repo', 'require', 'vars', 'callback', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tinstance.status(config.name);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.execute = function execute($, callback) {\n\t\t\tif (!fn)\n\t\t\t\tcallback();\n\t\t\telse\n\t\t\t\tfn(instance, $, $.data, $.repo, require, instance.variables, callback);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThe code defined in this component can be executed by multiple `Middleware Exec`.\n**Example:**\n```js\n// available arguments\n// instance {FlowStreamComponent}\n// $        {FlowStreamMessage}\n// data     reference to $.data\n// repo     reference to $.repo\n// vars     reference to instance.main.variables\n\nif (data.headers['x-token'] === instance.main.variables.token)\n\t// data will be send to `Output` output of `Middleware Exec` component\n\tcallback(null, data);\nelse\n\t// data will be send to `Error` output of `Middleware Exec` component\n\tcallback('an error occured');\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t<div class=\"ui-input-label\">Code</div>\n\t\t<div data---=\"codemirror__?.code__required:1;type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci79kc8f4a": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci82ffd82e": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ciai4ea3c7": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cib2305565": "<script total>\n\n\texports.name = 'Map array';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar arr, newarr = [];\n\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tarr = get(config.path);\n\t\t\t\t} catch(e) {}\n\t\t\t} else {\n\t\t\t\tarr = $.data;\n\t\t\t}\n\n\t\t\tif (!config.map)\n\t\t\t\treturn instance.throw('No configuration');\n\t\t\tif (!Array.isArray(arr))\n\t\t\t\treturn instance.throw('Input data is not an array');\n\n\t\t\tvar len = arr.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvar item = arr[i];\n\t\t\t\t\tif (typeof(item) !== 'object' || Array.isArray(item))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar val = getNewObj(arr[i], config.map);\n\t\t\t\t\tnewarr[i] = val;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data = newarr;\n\t\t\t$.send('output', );\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\n\t\t};\n\n\t\tinstance.configure();\n\t\t// from obj to result -> obj.name to result.name\n\t\tconst getNewObj = (obj, map) => {\n\t\t\tvar result = config.array ? [] : {};\n\t\t\tvar len = map.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvar paths = map[i]; // { source: 'path.to.value', target: 'new.path.to.value' }\n\t\t\t\tvar val = get(obj, paths.source);\n\n\t\t\t\tif (val) {\n\t\t\t\t\tif (config.array) {\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!paths.target)// no path, ignore it\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (paths.target === '...') // keep the same path\n\t\t\t\t\t\tpaths.target = paths.source;\n\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\telse\n\t\t\t\t\t\tset(result, paths.target, val);\n\t\t\t\t} else {\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n## The input must be an array of objects !!\n\nThis component can iterate over an array and only take properties listed in the configuration.\n### Example data:\n```js\n\t[\n\t\t{ sensor: { temperature: 25, humidity: 50, ... some more properties }},\n\t\t{ sensor: { temperature: 24, humidity: 55, ... some more properties }},\n\t\t{ sensor: { temperature: 23, humidity: 60, ... some more properties }}\n\t]\n```\n### Example configuration:\n`sensor.temperature` -> `temp`\n`sensor.humidity` -> `hum`\n\n### Example output:\n```js\n\t[\n\t\t{ temp: 25, hum: 50 },\n\t\t{ temp: 24, hum: 55 },\n\t\t{ temp: 23, hum: 60 }\n\t]\n```\n\nIf `Return an Array of Arrays` is checked then\neach of the Map properties will be pushed to a new array, see example bellow\n\n### Example given the data above and this configuration:\n`Return an Array of Arrays` -> **checked**\n**Map**\n`sensor.temperature`\n`sensor.humidity`\n\n### Example output:\n```js\n\t[\n\t\t[25, 50],\n\t\t[24, 55],\n\t\t[23, 60],\n\t]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.array__type:checkbox\" class=\"m\">Return an Array of Arrays (Default: Array of Objects)</div>\n\t\t<section class=\"maparray-section m\">\n\t\t\t<label>Map</label>\n\t\t\t<!--<div data---=\"keyvalue___?.map__placeholderkey:Type a path to property;placeholdervalue:Type a new path to a property\" class=\"maparray-keyvalue\"></div>-->\n\n\t\t\t<div data-bind=\"?.map__template:.maparray-item -> data-index\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach item in value }}\n\t\t\t\t\t<div class=\"maparray-item\" data-index=\"{{ $index }}\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"\" data-bind=\"?.array__.col-md-11:value__.col-md-5:!value\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].source\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div class=\"m\" style=\"line-height: 35px;\">--&gt;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-5\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].target\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.maparray_remove_item\" data-index=\"{{ $index }}\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\" data-bind=\"?.array__hide\">You can use 3 dots(...) in the right field to keep the same path.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.maparray_add_item\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.maparray_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.maparray_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.maparray_add_item = function(el) {\n\t\tconsole.log('ADDING', el);\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.map', { source: '', target: '' });\n\t};\n\n\tFUNC.maparray_remove_item = function(el) {\n\t\tconsole.log('REMOVING', el);\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.attrd('index');\n\t\tconfig.map.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.CLASS .button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.CLASS .button-add:hover { background-color: #F8F8F8; }\n\t.CLASS .button-add:active { background-color: #E0E0E0; }\n\n\t.CLASS .ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.CLASS .ui-dark .button-add:hover { background-color: #303030; }\n\t.CLASS .ui-dark .button-add:active { background-color: #404040; }\n\n\t.maparray-section > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n\t.maparray-section { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.maparray-keyvalue .ui-keyvalue-item-key { width: 50% !important; }\n\t.maparray-keyvalue .ui-keyvalue-item-value { margin: 0 32px 0 50% !important; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cicbpc77a1": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"cie527e4": "<script total>\n\n\texports.name = 'Downloader';\n\texports.icon = 'fa fa-download';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tconst { unlink } = require('fs').promises;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tconst urlpath = config.urlpath || 'url';\n\n\t\t\tconst url = get(data, urlpath);\n\t\t\tif (!url)\n\t\t\t\treturn;\n\n\t\t\tconst filename = 'tmp/{0}.{1}'.format(UID(), U.getExtension(url));\n\n\t\t\tDOWNLOAD(data.url, filename, function(err, response){\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst { filename, body, origin, status, headers } = response;\n\t\t\t\t$.send('output', { filename, body, origin, status, headers });\n\t\t\t\t$.on('terminate', () => {\n\t\t\t\t\tunlink(PATH.root(filename)).catch(e => console.log('[Downloader] Failed to unlink file: ' + filename  + ' | ' + e.message));\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\turl: 'https://example.com/file.jpg', // file url\n}\n```\n\n## Output\nA response object as returned by [DOWNLOAD()](https://docs.totaljs.com/total4/407ff001jy51c/#88aab001hd51c) function.\n```js\n{\n\tfilename: '/tmp/xyz.ext',\n\t...\n}\n```\nThe file will be automaticaly deleted once the message is destroyed.\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.urlpath\">Path to URL in the incomming object (default 'url')</div>\n\t\t<div class=\"help m\">Supports dot notation like so: \"path.to.url\" or \"arr.0.url\" if the \"arr\" is an array. \"arr[0].url\" is not supported</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cif9193b72": "<script total>\n\n\texports.id = 'cron';\n\texports.name = 'Cron';\n\texports.icon = 'fa fa-clock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { jobs: [] };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['node-schedule'];\n\n\texports.make = function(instance, config) {\n\t\tvar schedule = require('node-schedule');\n\n\t\tvar startup = true;\n\t\tvar jobs = [];\n\n\t\tinstance.configure = function() {\n\t\t\tstartJobs(config.jobs);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tjobs.length && jobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t\tif (!job)\n\t\t\t\t\tconsole.log('no job', jobs);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction startJobs(newjobs) {\n\n\t\t\tjobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t});\n\n\t\t\tjobs = [];\n\n\t\t\tnewjobs.forEach(function(job){\n\t\t\t\tjob = job.split('|').trim();\n\n\t\t\t\tif (job[0] === '@startup' && startup) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tinstance.send('output', job[1]);\n\t\t\t\t\t}, 5000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar j = schedule.scheduleJob(job[0], function(){\n\n\t\t\t\t\tvar value = job[1];\n\n\t\t\t\t\tif (job[1] === '@ts')\n\t\t\t\t\t\tvalue = Date.now();\n\n\t\t\t\t\tinstance.send('output', value);\n\t\t\t\t});\n\n\t\t\t\tjobs.push(j);\n\t\t\t});\n\n\t\t\tinstance.status(newjobs.length || '0');\n\n\t\t\tstartup = false;\n\t\t}\n\n\t};\n\n</script>\n\n<readme>\n[node-schedule](https://www.npmjs.com/package/node-schedule) on npmjs.com\n\nSyntax:\n`cron string | data (only string supported) | comment`\n\n## Cron string:\n`* * * * * *`\nMeaning of each `*` explained bellow, in order from left to right\nsecond (0 - 59, OPTIONAL)\nminute (0 - 59)\nhour (0 - 23)\nday of month (1 - 31)\nmonth (1 - 12)\nday of week (0 - 7) (0 or 7 is Sun)\n\nor\n`@startup` to run once at the start or restart of an app (after 5 seconds)\n\n### Examples of cron string:\n```\n0 16 * * *      -> trigger every day at 16:00\n* 0 16 * * *    -> trigger at 16:00 every day and it will keep triggering every second until 16:01\n20,40 19 * * *  -> every day at 19:20 and 19:40\n*/5 * * * *     -> trigger every 5 seconds\n0 20 * * 1      -> every monday at 20:00\n@startup        -> runs once at startup\n```\n\n### Full example:\n```\n* 0 16 * * * | hello data | this is hello comment\n@startup | start\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textboxlist__?.jobs__maxlength:50;placeholder:enter value like '* 1 * * * * | day' and hit enter\" class=\"m\">Cron jobs</div>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.cron_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.cron_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; font-weight: bold; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><span data-bind=\"!STATUS__text\"></span>Number of jobs:</footer>\n</body>",
			"cifpxfc971": "<script total>\n\n\texports.id = 'kill';\n\texports.name = 'Kill';\n\texports.color = '#E73323';\n\texports.icon = 'fa fa-skull';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.main.kill();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nBe careful because this component will kill the current Flow instance. It's targeted only for exceptional cases.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cig7rda52b": "<script total>\n\texports.id = 'modify';\n\texports.name = 'Modify';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tfor (let i = 0; i < Rules.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { getValue, setValue } = Rules[i];\n\n\t\t\t\t\tvar data = getValue($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\t\t\t\t\tsetValue(data, $, instance, set);\n\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.rules || !config.rules.length)\n\t\t\t\treturn;\n\n\t\t\tconst rules = config.rules;\n\t\t\tRules = [];\n\n\t\t\trules.forEach(function eachCondition(cond, index){\n\n\t\t\t\tconst { rule, source, sourcepath, target, targetpath } = cond;\n\t\t\t\tvar getValue, setValue;\n\n\t\t\t\tif (rule === 'remove') {\n\n\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t\tif (!targetpath) {\n\t\t\t\t\t\tif (is$) // set $.data or $.repo to null\n\t\t\t\t\t\t\tsetValue = (d, $) => { $[target] = null; };\n\t\t\t\t\t\telse // ignore variables or variables2\n\t\t\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', 'set({0}, {1}, null);'.format(base, sourcepath));\n\t\t\t\t\t}\n\n\t\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rule === 'set' || rule === 'move') {\n\n\t\t\t\t\tif (source === 'expression')\n\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', sourcepath.indexOf('return') > -1 ? sourcepath : 'return ' + sourcepath + ';');\n\t\t\t\t\telse if (source === 'string')\n\t\t\t\t\t\tgetValue = () => sourcepath; // sourcepath is the actual string value\n\t\t\t\t\telse if (source === 'number') {\n\t\t\t\t\t\tgetValue = () => Number(sourcepath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar str = 'if ({0}) return {1}; if (typeof {1} !== \\'object\\' || {1} == null) return; return {2};'.format(sourcepath ? 'false' : 'true', source, sourcepath ? 'get({0}, \\'{1}\\')'.format(source, sourcepath) : sourcepath);\n\t\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\t\t\tconsole.error(str);\n\t\t\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar str;\n\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t// targetpath => data | repo | variables | variables2\n\t\t\t\tif (!targetpath)\n\t\t\t\t\tstr = base + ' = data;';\n\t\t\t\telse\n\t\t\t\t\tstr = 'if (typeof {0} !== \\'object\\' || {0} == null) {0} = {1}; set({0}, \\'{2}\\', data);'.format(base, isNaN(targetpath[0]) ? '{}' : '[]', targetpath);\n\n\t\t\t\tif (rule === 'move' && sourcepath) {\n\t\t\t\t\tvar is$2 = source === 'data' || source === 'repo';\n\t\t\t\t\tvar base2 = (is$2 ? '$.' : 'instance.main.') + source;\n\t\t\t\t\t// don't delete source if the target is within the same path: source $.data.device --> target $.data.device.data\n\t\t\t\t\tif (base !== base2 || !targetpath.startsWith(sourcepath))\n\t\t\t\t\t\tstr += ' set({0}, \\'{1}\\', null);'.format(base2, sourcepath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t};\n\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t});\n\t\t};\n\n\t\ttry {\n\t\t\tinstance.configure();\n\t\t} catch (e) { console.error(e);}\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tThis component allows you to set/modify/move/remove properties of the incomming data.\n\tFor eaxample, to set the message data to a string `Hello world` select *Message data* in the rule dropdown and leave the text field empty.\n\tThen in the bellow dropdown select `string` and enter the desired string in the text field.\n\tResult:\n\t- before: $.data -> 'Hello world'\n\t- after:  $.data -> 'New string'\n\n\t## Expression\n\tAvailable params are: `data`, `repo`, `variables` ,`variables2`\n\tWhere data is message.data, repo is message.repo --> [Documentation](https://docs.totaljs.com/total4/40844001ni51c)\n\tAnd variables are local variables which can be set in the Variables dialog accessible on the main toolbar(the button between Plus icon and Bug icon)\n\tFor example, we want message data to be the value of (data.value + variables.offset)\n\tResult:\n\t- before: $.data --> `{ value: 100 }` / variables --> `{ offset: 20, ... many other properties }`\n\t- after:  $.data -> `{ value: 120 }`\n\tThe expression: `data.value + variables.offset`\n\n\t### Important\n\t- `Remove` -> `Message data / Message repo` -> `<empty path>` will set `Message data / Message repo` to `null`;\n\t- `Remove` -> `Local variables / Global variables` -> `<empty path>` will be ignored but `Remove` -> `Local variables / Global variables` -> `myVar` will work.\n\t- `Set` -> `Message data` -> `some.path` to: `Message data` -> `some.other.path` will add another property to the incoming data and rest of the data will remain untouched\n\t- `Set` -> `Message data` -> `<empty path>` to: `Message data` -> `some.path` will essentialy overwrite the incomming data, after this there's no longer access to original data(same goes for repo)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<section class=\"modify-rules m\">\n\t\t\t<label>Rules</label>\n\t\t\t<div data-bind=\"?.rules__template:.modify-rule -> data-index\" data---=\"movable__?.rules__selector:.dragme;exec:FUNC.modify_rule_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach rule in value }}\n\t\t\t\t\t<div class=\"modify-rule dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].rule__dirsource:REPO.modify_rules\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<div class=\"m\">--&gt;</div>\n\t\t\t\t\t\t\t\t<div data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">to:</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-7\">\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].target__dirsource:REPO.modify_targets\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].targetpath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group\" data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].source__dirsource:REPO.modify_sources\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].sourcepath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.modify_remove_rule\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each rule will be applied in the order from top to bottom.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.modify_add_rule\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.modify_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.modify_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.modify_add_rule = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.rules', { rule: 'set', source: '', sourcetype: '', target: '', targettype: '' });\n\t};\n\n\tFUNC.modify_remove_rule = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.modify_rule').attrd('index');\n\t\tconfig.rules.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_rule_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.rules.splice(dragged_index, 1)[0];\n\t\tconfig.rules.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.modify_sources = 'string|String,number|Number,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_targets = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_rules = 'set|Set,remove|Remove,move|Move'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.modify-input-group { clear: both; height: 36px; }\n\t.modify-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.modify-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.modify-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.modify-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.modify-rules { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.modify-rule { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.modify-rule > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.modify-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.modify-thead { padding: 8px; margin-bottom:4px; }\n\t.modify-rules > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cigr3c2577": "<script total>\n\n\texports.name = 'Switch';\n\texports.icon = 'fa fa-sitemap fa-rotate-270';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<div data---=\"input__?.source__dirsource:REPO.switch_datasources__'data'\"></div>\n\t\t\t<div data---=\"input__?.path\"></div>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.conditions__template:.switch-condition -> data-index\" data---=\"movable__?.conditions__selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].operator__dirsource:REPO.switch_operators\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t<div data-bind=\"?.conditions[{{ $index }}].operator__hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty'__.switch-input-group:value!=='expression'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].type__dirsource:REPO.switch_valuetypes\" data-bind=\"?.conditions[{{ $index }}].operator__hide:value==='expression'\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].value__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].name\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cihawfaa1c": "<script total>\n\n\texports.name = 'Test';\n\texports.icon = 'fa fa-info';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', 'Hello world output');\n\t\t\t$.send('dynamic', 'Hello world dynamic');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = config.outputs;\n\t\t\tinstance.save();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\tTest\n</readme>\n\n<settings>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cihxm4ad07": "<script total>\n\n\texports.id = 'range';\n\texports.name = 'Range';\n\texports.icon = 'fa fa-arrows-h';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tvar inmin, inmax, outmin, outmax;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar val = parseFloat(typeof(data) === 'object' ? U.get(data, config.property) : data);\n\n\t\t\tif (!val || typeof val !== 'number') {\n\t\t\t\tinstance.throw('Value \"{0}\" is not a number'.format(val.toString().substring(0, 20)));\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (val < inmin) {\n\t\t\t\t$.data = inmin;\n\t\t\t} else if (val > inmax)\n\t\t\t\t$.data = inmax;\n\t\t\telse {\n\t\t\t\tdata = outmin + (outmax - outmin) * (val - inmin) / (inmax - inmin);\n\t\t\t\t$.data = config.round ? Math.round(data) : data;\n\t\t\t}\n\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinmin = parseFloat(config.input_min || 0);\n\t\t\tinmax = parseFloat(config.input_max || 1023);\n\t\t\toutmin = parseFloat(config.output_min || 0);\n\t\t\toutmax = parseFloat(config.output_max || 100);\n\t\t\tinstance.status(`${inmin} - ${inmax} --> ${outmin} - ${outmax}`);\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.property__placeholder:e.g. path.to.property\" class=\"m\">Property (unless the data is the value itself)</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_min__type:number\" class=\"m\">Input min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_max__type:number\" class=\"m\">Input max (defaults to 1023)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_min__type:number\" class=\"m\">Output min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_max__type:number\" class=\"m\">Output max (defaults to 100)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.round__type:checkbox\">Round output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cikxlfe14d": "<script total>\n\n\texports.name = 'Stopwatch';\n\texports.group = 'Stats';\n\texports.version = '3';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Stopwatch', delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Counter' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar max = 9;\n\t\tvar results = [];\n\t\tvar timeout;\n\t\tvar count = 0;\n\t\tvar ts;\n\n\t\tvar flush = function() {\n\t\t\tvar diff = Date.now() - ts;\n\t\t\ttimeout = null;\n\t\t\tif (results.unshift({ date: new Date(), duration: (diff / 1000).floor(3), count: count }) > max)\n\t\t\t\tresults.pop();\n\t\t\tcount = 0;\n\t\t\tinstance.status(results, 1000);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\t$.destroy();\n\n\t\t\tif (timeout)\n\t\t\t\tclearTimeout(timeout);\n\t\t\telse\n\t\t\t\tts = Date.now();\n\n\t\t\tcount++;\n\t\t\ttimeout = setTimeout(flush, config.delay);\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\t\t\tresults = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tresults = [];\n\t\t\tinstance.status(results);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\tif (results.length)\n\t\t\t\tresults = [];\n\n\t\t\tcount = 0;\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; width: 220px; }\n\t.CLASS .result { height: 22px; font-size: 11px; border-top: 1px solid #E0E0E0; line-height: 22px; }\n\t.CLASS .result .ts { margin-right: 100px; }\n\t.CLASS .result .duration { float: right; width: 100px; text-align: right; }\n\t.ui-dark .CLASS .result { border-top-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-8 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1;align:1;ricon:!ms\">Idle time delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component runs a simple stopwatch for incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button></div>\n\t\t<div data-bind=\"STATUS__template__show:value && value.length\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ foreach m in value }}\n\t\t\t\t<div class=\"result\">\n\t\t\t\t\t<span class=\"duration\">{{ m.duration | format(3) }} sec</span>\n\t\t\t\t\t<div class=\"ts\" title=\"{{ m.date | format('[ts]') }}\">{{ m.date | format('[time]') }} ({{ m.count }})</div>\n\t\t\t\t</div>\n\t\t\t\t{{ end }}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cilkhc268b": "<script total>\n\n\texports.name = 'Duration';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = {};\n\n\t\tstats.min = null;\n\t\tstats.max = null;\n\t\tstats.avg = 0;\n\t\tstats.last = 0;\n\t\tstats.count = 0;\n\n\t\tinstance.trigger = function() {\n\t\t\tstats.min = null;\n\t\t\tstats.avg = 0;\n\t\t\tstats.max = null;\n\t\t\tstats.last = null;\n\t\t\tstats.count = 0;\n\t\t\tinstance.status(stats);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar duration = ((Date.now() - $.duration) / 1000).floor(3);\n\n\t\t\tif (stats.min === null || stats.min > duration)\n\t\t\t\tstats.min = duration;\n\n\t\t\tif (stats.max === null || stats.max < duration)\n\t\t\t\tstats.max = duration;\n\n\t\t\tstats.avg = ((stats.max + stats.min) / 2).floor(3);\n\t\t\tstats.last = duration;\n\t\t\tstats.count++;\n\n\t\t\tinstance.status(stats, 500);\n\t\t\t$.send('output', stats);\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component counts message duration. All values except `count` are defined in seconds.\n\n__Output__:\n\n```js\n{\n\tmin: Number,\n\tmax: Number,\n\tavg: Number,\n\tlast: Number,\n\tcount: Number\n}\n```\n</readme>\n\n<style>\n\t.CLASS .keyvalue > span { width: 60px; }\n\t.CLASS .keyvalue > div { margin-left: 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer style=\"padding:10px;width:180px\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<div data-bind=\"STATUS__template__.keyvalue\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Min</span>\n\t\t\t\t\t<div class=\"right\">{{ value.min | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Max</span>\n\t\t\t\t\t<div class=\"right\">{{ value.max | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Avg</span>\n\t\t\t\t\t<div class=\"right\">{{ value.avg | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Last</span>\n\t\t\t\t\t<div class=\"right\">{{ value.last | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Count</span>\n\t\t\t\t\t<div class=\"right b\">{{ value.count | format(0) | empty }}</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cim4f4e8f2": "<script total>\n\n\texports.id = 'dataset';\n\texports.name = 'CSV Dataset';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.config = { name: '', unit: '', icon: '', color: '', decimals: 2, type: 'daily', sum: 0 };\n\texports.inputs = [{ id: 'input', name: 'Value' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar uid = (instance.main.id + '_' + instance.id).makeid();\n\t\tvar filename_meta = PATH.private('dataset_' + uid + '.meta');\n\t\tvar filename_data = PATH.private('dataset_' + uid + '.csv');\n\t\tvar meta = {};\n\n\t\tvar updatestatus = function() {\n\t\t\tinstance.status({ id: uid, keys: meta.keys });\n\t\t};\n\n\t\tF.Fs.readFile(filename_meta, function(err, response) {\n\t\t\tmeta = response ? response.toString('utf8').parseJSON(true) : CLONE(config);\n\t\t\tif (!meta.keys)\n\t\t\t\tmeta.keys = {};\n\t\t\tmeta.id = uid;\n\t\t\tupdatestatus();\n\t\t\tF.Fs.lstat(filename_data, function(err) {\n\t\t\t\tif (err)\n\t\t\t\t\tF.Fs.appendFile(filename_data, 'key,value,min,max,sum,count,tshour,tsday,tsweek,tsmonth,tsyear\\n', NOOP);\n\t\t\t});\n\t\t});\n\n\t\tinstance.close = function(removed) {\n\t\t\tif (removed) {\n\t\t\t\tF.Fs.unlink(filename_meta, NOOP);\n\t\t\t\tF.Fs.unlink(filename_data, NOOP);\n\t\t\t\tdb = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.insert = function(data) {\n\n\t\t\tvar writer = null;\n\t\t\tvar write = false;\n\t\t\tvar key = data.key || data.id || 'Value';\n\n\t\t\tif (!meta.keys[key])\n\t\t\t\tmeta.keys[key] = {};\n\n\t\t\tvar tmp = meta.keys[key];\n\n\t\t\tif (tmp.count && config.type !== 'lastvalue' && config.type !== 'logger') {\n\t\t\t\tvar date = tmp.date;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'hourly':\n\t\t\t\t\t\twrite = date.getHours() !== NOW.getHours();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'daily':\n\t\t\t\t\t\twrite = date.getDate() !== NOW.getDate();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'monthly':\n\t\t\t\t\t\twrite = date.getMonth() !== NOW.getMonth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'weekly':\n\t\t\t\t\t\twrite = date.format('w') !== NOW.format('w');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'yearly':\n\t\t\t\t\t\twrite = date.getFullYear() !== NOW.getFullYear();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (write) {\n\t\t\t\twriter = {};\n\t\t\t\twriter.key = key;\n\t\t\t\twriter.value = tmp.value;\n\t\t\t\twriter.min = tmp.min;\n\t\t\t\twriter.max = tmp.max;\n\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\twriter.count = tmp.count;\n\t\t\t\twriter.date = tmp.date;\n\t\t\t}\n\n\t\t\ttmp.date = NOW;\n\t\t\ttmp.value = data.value;\n\n\t\t\tif (writer) {\n\n\t\t\t\ttmp.min = tmp.value;\n\t\t\t\ttmp.max = tmp.value;\n\t\t\t\ttmp.count = 0;\n\n\t\t\t\tif (config.sum) {\n\t\t\t\t\tif (config.sum === 1)\n\t\t\t\t\t\ttmp.sum = tmp.value;\n\t\t\t\t\telse\n\t\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif (tmp.min == null || tmp.value < tmp.min)\n\t\t\t\t\ttmp.min = tmp.value;\n\n\t\t\t\tif (tmp.max == null || tmp.value > tmp.max)\n\t\t\t\t\ttmp.max = tmp.value;\n\n\t\t\t\tif (config.sum)\n\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\n\t\t\t\tif (config.type === 'logger') {\n\t\t\t\t\twriter = {};\n\t\t\t\t\twriter.key = key;\n\t\t\t\t\twriter.value = tmp.value;\n\t\t\t\t\twriter.min = tmp.min;\n\t\t\t\t\twriter.max = tmp.max;\n\t\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\t\twriter.count = (tmp.count || 0) + 1;\n\t\t\t\t\twriter.date = tmp.date;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp.count = (tmp.count || 0) + 1;\n\n\t\t\tupdatestatus();\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\n\t\t\tif (!writer)\n\t\t\t\treturn;\n\n\t\t\tvar values = [];\n\n\t\t\t// 0 key\n\t\t\t// 1 value\n\t\t\t// 2 min\n\t\t\t// 3 max\n\t\t\t// 4 sum\n\t\t\t// 5 count\n\t\t\t// 6 tsh\n\t\t\t// 7 tsd\n\t\t\t// 8 tsw\n\t\t\t// 9 tsm\n\t\t\t// 10 tsy\n\n\t\t\tvar ts = writer.date.format('yyyyMMddHH');\n\n\t\t\tvalues.push(writer.key);\n\t\t\tvalues.push(writer.value + '');\n\t\t\tvalues.push((writer.min != null ? writer.min : '') + '');\n\t\t\tvalues.push((writer.max != null ? writer.max : '') + '');\n\t\t\tvalues.push((writer.sum != null ? writer.sum : '') + '');\n\t\t\tvalues.push((writer.count != null ? writer.count : '') + '');\n\t\t\tvalues.push(ts);\n\t\t\tvalues.push(ts.substring(0, 8));\n\t\t\tvalues.push(writer.date.format('yyyyww'));\n\t\t\tvalues.push(ts.substring(0, 6));\n\t\t\tvalues.push(ts.substring(0, 4));\n\n\t\t\tF.Fs.appendFile(filename_data, values.join(',') + '\\n', NOOP);\n\t\t};\n\n\t\tvar updatefile = function(fn) {\n\t\t\tF.Fs.readFile(filename_data, function(err, data) {\n\t\t\t\tvar lines = data.toString('utf8').split('\\n');\n\t\t\t\tfn(lines);\n\t\t\t\tF.Fs.writeFile(filename_data, lines.join('\\n'), NOOP);\n\t\t\t});\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'remove') {\n\t\t\t\t// msg.key\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines.splice(counter, 1);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (msg.type === 'rename') {\n\t\t\t\t// msg.key\n\t\t\t\t// msg.name\n\t\t\t\tmeta.keys[msg.name] = meta.keys[msg.key];\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines[counter] = msg.name + ',' + line.substring(key.length);\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar type = typeof(data);\n\n\t\t\tif (type === 'number')\n\t\t\t\tdata = { value: data };\n\n\t\t\tinstance.insert(CLONE(data));\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tCOPY(config, meta);\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS hr { margin: 10px 0; }\n\t.CLASS [contenteditable] { outline: 0 }\n\t.CLASS .padding { padding: 10px; font-size: 12px; }\n\t.CLASS .padding .meta { height: 16px; font-size: 11px; }\n\t.CLASS .padding .meta span { color: #888; margin-right: 5px; width: 30px; float: left; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:Dataset name\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:lastvalue|Last value only,logger|Logger,hourly|Hourly,daily|Daily,weekly|Weeekly,monthly|Monthly,yearly|Yearly;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.sum__dirsource:0|Disabled,1|Periodical sum,2|Total sum;type:number\">Calculate the sum</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.unit__align:1\">Unit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.decimals__align:1;type:number__2\">Decimals</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t</div>\n</settings>\n\n<readme>\nThe component stores data as CSV Dataset for e.g. Dashboard application. Dataset is stored in `/private/` path that is available with the help of the Flow access token.\n\nCSV file contains only processed values, which aren't closed and stored in the `.meta` file.\n\n```js\n{\n\tkey: String,    // optional, e.g. device_id | device_name\n\tvalue: Number   // measured value\n}\n```\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar laststatus;\n\n\t\texports.configure = function(config, isinit) {\n\t\t\tif (!isinit) {\n\t\t\t\texports.status(laststatus);\n\t\t\t\texports.rebind('status');\n\t\t\t}\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t\tif (status) {\n\t\t\t\tstatus.type = exports.config.type;\n\t\t\t\tfor (var key in status.keys)\n\t\t\t\t\tstatus.keys[key].unit = exports.config.unit;\n\t\t\t}\n\t\t};\n\n\t\texports.rename = function(meta, next) {\n\n\t\t\tvar id = ATTRD(meta.element);\n\t\t\tvar value = meta.value.replace(/\\\"|\\,/g, '');\n\n\t\t\tif (id !== value) {\n\t\t\t\tnext(false);\n\t\t\t\t// Due to \"enter\" key\n\t\t\t\tsetTimeout(ASETTER('approve/show', 'Are you sure you want to rename \"{0}\" to <b>\"{1}\"</b>?'.format(id, value), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\t\texports.trigger({ type: 'rename', key: id, name: value });\n\t\t\t\t\tnext(value);\n\t\t\t\t}), 200);\n\t\t\t} else\n\t\t\t\tnext(false);\n\n\t\t};\n\n\t\texports.click = function(el) {\n\t\t\tvar id = ATTRD(el);\n\t\t\tSETTER('approve/show', 'Are you sure you want to remove selected key <b>\"{0}\"</b>?'.format(id.encode()), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\texports.trigger({ type: 'remove', key: id });\n\t\t\t});\n\t\t};\n\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"padding\">\n\t\t\t<div data-bind=\"CONFIG__template\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<span class=\"badge badge-medium badge-color mr5\">{{ value.type }}</span> {{ if value.icon }}<i class=\"{{ value.icon }} mr5\"></i>{{ fi }}<b>{{ value.name }}</b>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div data-bind=\"STATUS__template__show\" class=\"keys hidden\">\n\t\t\t\t<script type=\"text/html\">\n\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t\t<div class=\"meta mt5\">\n\t\t\t\t\t\t\t<span>Meta:</span><div>dataset_{{ value.id }}.meta</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ if value.type !== 'lastvalue' }}\n\t\t\t\t\t\t<div class=\"meta\">\n\t\t\t\t\t\t\t<span>Data:</span><div>dataset_{{ value.id }}.csv</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ fi }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t{{ foreach m in value.keys }}\n\t\t\t\t\t\t<div class=\"keyvalue small\" data-id=\"{{ m.key }}\">\n\t\t\t\t\t\t\t<span><i class=\"fa fa-trash-alt red clickable\"></i><b class=\"edit\" data-edit=\"required:1;offsetWidth:150;exec:TOUCH.rename\" data-id=\"{{ m.key }}\">{{ m.key }}</b></span>\n\t\t\t\t\t\t\t<div class=\"right\">{{ m.value.value }} {{ m.value.unit }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t\t</div>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"cimm26e413": "<script total>\n\n\texports.name = 'Data parser';\n\texports.icon = 'fa fa-compress-arrows-alt';\n\texports.group = 'Transformations';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { type: '1', convert: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar streamer = null;\n\t\tvar reg = /,|;/;\n\n\t\tvar newmessage = function(data) {\n\n\t\t\tif (config.convert) {\n\t\t\t\tif (config.type === '1') {\n\t\t\t\t\tvar m = data.match(reg);\n\t\t\t\t\tdata = data.parseCSV(m ? m[0] : ',');\n\t\t\t\t} else\n\t\t\t\t\tdata = data.parseXML(true);\n\t\t\t}\n\n\t\t\tinstance.newmessage(data).send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (typeof(data) === 'string')\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\n\t\t\t$.destroy();\n\t\t\tdata && streamer && streamer(data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase '1':\n\t\t\t\t\tstreamer = U.streamer('\\n', newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstreamer = U.streamer(config.beg, config.end, newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstreamer = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can parse newline data or begin/end phrases in the buffer or string. In addition, it can help with parsing XML or CSV files.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"choose__?.type__selector:div\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\">\n\t\t\t\t<i class=\"fa fa-level-down-alt fa-rotate-90\"></i>\n\t\t\t\t<span>CSV</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\">\n\t\t\t\t<i class=\"fa fa-code\"></i>\n\t\t\t\t<span>XML</span>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.convert__type:checkbox\">Convert parsed value to the object</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div data-bind=\"?.type__show:value==='2'\" class=\"padding hidden\">\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"fa fa-cog\"></i>Advanced settings</label>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.beg__required:1;placeholder:&lt;PRODUCT&gt;\">Begin phrase</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.end__required:1;placeholder:&lt;/PRODUCT&gt;\">End phrase</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; text-align: center; }\n\t.CLASS footer span { font-family: var(--monospace); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div>{{ if value.type === '1' }}New line{{ else }}<span>{{ value.beg }}</span> - <span>{{ value.end }}</span>{{ fi }}</div>\n\t\t</script>\n\t</footer>\n</body>",
			"cin5ifb433": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'fab fa-wpforms';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\treturn val.parseDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Model name</div>\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"far fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"far fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name > div:first-child { font-weight: bold; outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.04); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), name: 'name', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 1) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"cink02be8f": "<script total>\n\n\texports.name = 'RSS reader';\n\texports.group = 'Transformations';\n\texports.version = '1';\n\texports.icon = 'fa fa-rss';\n\texports.author = 'Total.js';\n\texports.config = { url: '', type: 'a' };\n\texports.inputs = [{ id: 'input', name: 'Trigger' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\n\t\tvar cache = [];\n\t\tvar cachelimit = 50;\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tif (!config.url)\n\t\t\t\treturn;\n\n\t\t\tvar opt = {};\n\t\t\topt.method = 'GET';\n\t\t\topt.custom = true;\n\t\t\topt.url = config.url;\n\n\t\t\tvar output = config.type === 'a' || config.type === 'b' ? [] : null;\n\n\t\t\tREQUEST(opt, function(err, response) {\n\t\t\t\tresponse.stream.on('data', U.streamer('<item>', '</item>', function(xml) {\n\t\t\t\t\tvar item = xml.parseXML(true);\n\t\t\t\t\tif (item) {\n\n\t\t\t\t\t\tvar obj = {};\n\t\t\t\t\t\tobj.title = item.item_title;\n\t\t\t\t\t\tobj.id = obj.title.makeid();\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'd') {\n\t\t\t\t\t\t\tif (cache.indexOf(obj.id) !== -1)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tif (cache.unshift(obj.id) > cachelimit)\n\t\t\t\t\t\t\t\tcache.pop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj.description = item.item_description;\n\t\t\t\t\t\tobj.link = item.item_link;\n\n\t\t\t\t\t\tif (item.item_image_url)\n\t\t\t\t\t\t\tobj.image = item.item_image_url;\n\t\t\t\t\t\telse if (item['item_enclosure__'])\n\t\t\t\t\t\t\tobj.image = item['item_enclosure__'].url;\n\n\t\t\t\t\t\tvar date = item.item_pubDate || item.item_pubdate;\n\t\t\t\t\t\tif (date)\n\t\t\t\t\t\t\tobj.date = new Date(date);\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'c')\n\t\t\t\t\t\t\tinstance.newmessage().send('output', obj);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\toutput.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tresponse.stream.on('end', function() {\n\t\t\t\t\toutput && output.length && instance.newmessage().send('output', output);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.trigger();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS footer { padding: 5px 10px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__type:url;required:1\">URL address</div>\n\t\t<div class=\"help m\">Example: <code>https://blog.totaljs.com/rss/</code></div>\n\t\t<div data---=\"input__?.type__dirsource:a|Send all items,b|Send only new items,c|Send every item separately,d|Send only new items separately\">Output</div>\n\t</div>\n</settings>\n\n<readme>\nThe component downloads every item from the RSS source. A message on to this `Trigger` input starts downloading RSS data.\n\n__Example__:\n```js\n{\n\ttitle: String,\n\tdescription: String,\n\tlink: String,\n\timage: String, // optional\n\tdate: Date // optional\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Download</button>\n\t</div>\n\t<footer data-bind=\"CONFIG.url__text__show\"></footer>\n</body>",
			"cip1k9ce15": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"cipimebbe7": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cipzv710a6": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ciqgwb764e": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"cirsg24067": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Total.js';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ciscz7ac32": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"civadc808d": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tif (typeof(data.data) === 'object') {\n\t\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\t\tnosql.insert(data.data).callback(function(err) {\n\t\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\t$.send('output', { success: false, error: 'invalid data' });\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tif (!filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cj1id7ec88": "<script total>\n\n\texports.name = 'SQLite3';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.npm = ['better-sqlite3'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst Database = require('better-sqlite3');\n\t\tvar db, file;\n\t\tvar fns = ['run', 'get', 'all', 'exec'];\n\n\t\tinstance.message = function($) {\n\t\t\tif (!db) {\n\t\t\t\t$.send('error', { error: 'db not ready' });\n\t\t\t\treturn instance.throw('SQLite3 not ready');\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.prepare || !data.fn) {\n\t\t\t\tinstance.throw('No `prepare` or `op` provided');\n\t\t\t\treturn $.send('error', { error: 'invalid input data' });;\n\t\t\t}\n\n\t\t\tif (fns.indexOf(data.fn) < 0) {\n\t\t\t\tinstance.throw('Unsupported function: ' + data.fn);\n\t\t\t\treturn $.send('error', { error: 'unsupported function' });\n\t\t\t}\n\n\t\t\tif (data.fn === 'exec') {\n\t\t\t\tlet result = db.exec(data.prepare);\n\t\t\t\treturn $.send('output2', result);\n\t\t\t}\n\n\t\t\tlet stmt = db.prepare(data.prepare);\n\t\t\tlet result = data.data ? stmt[data.fn](data.data) : stmt[data.fn]();\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tlet newfile = PATH.databases(config.filename || `${instance.id}.sqlite`);\n\t\t\tif (file === newfile)\n\t\t\t\treturn;\n\n\t\t\tfile = newfile;\n\n\t\t\tlet tmp = exports.DBS[file];\n\t\t\tif (tmp) {\n\t\t\t\tdb = tmp.db;\n\t\t\t\ttmp.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdb = new Database(file, { verbose: console.log });\n\t\t\texports.DBS[file] = {\n\t\t\t\tdb,\n\t\t\t\tcount: 1\n\t\t\t};\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (file && db) {\n\t\t\t\texports.DBS[file].count--;\n\t\t\t\tif (exports.DBS[file].count === 0) {\n\t\t\t\t\tdb && db.close();\n\t\t\t\t\tdb = null;\n\t\t\t\t\tdelete exports.DBS[file];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nSQLite3 [Documentation](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md)\n\n```js\n{\n\t// query\n\tprepare: 'INSERT INTO cats (name, age) VALUES (?, ?)',\n\n\t// function name: run, get, all, exec\n\tfn: 'run',\n\n\t// data, optional\n\tdata: ['Joey', 2] // string/number or array\n\n}\n```\n\nFunctions:\n\t- [run](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#runbindparameters---object)\n\t- [get](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#getbindparameters---row)\n\t- [all](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#allbindparameters---array-of-rows)\n\t- [exec](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#execstring---this)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.filename__placeholder:mydatabase\">Filename (optional)</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cjordb9d5c": "<script total>\n\n\texports.id = 'rabbitmqconsume';\n\texports.name = 'RabbitMQ Consume';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar channel, Manager, ManagerState;\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tinstance.status('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tinstance.status('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinstance.status(ManagerState.title, 1000);\n\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel instance.\n\t\t\t\t\tvar qname = instance.replace(config.queuename);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tchan.assertQueue(qname, { consumerTag: 'consumer-' + qname }),\n\t\t\t\t\t\tchan.consume(qname, function(msg) {\n\t\t\t\t\t\t\tif (msg !== null) {\n\t\t\t\t\t\t\t\tvar data = {\n\t\t\t\t\t\t\t\t\tqueuename: qname,\n\t\t\t\t\t\t\t\t\tpayload: msg.content.toString(),\n\t\t\t\t\t\t\t\t\tmsg: { fields: msg.fields }\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tinstance.send('output', data);\n\t\t\t\t\t\t\t\tchan.ack(msg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t]);\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tconsole.log(config.manager, man);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\tON('configure_rabbitmqconsume', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cjoepce58d": "<script total>\n\n\texports.id = 'rabbitmqconnection';\n\texports.name = 'RabbitMQ Connection';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [];\n\texports.flags = ['rabbitmq'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\t\tvar Manager;\n\t\tvar states = { connected: 'Connected', disconnected: 'Disconnected', connecting: 'Connecting ...', connectionfailed: 'Connection failed' };\n\n\t\tinstance.state = { id: 'disconnected', title: states.disconnected };\n\t\tvar setState = (state) => {\n\t\t\tinstance.state = { id: state, title: states[state] };\n\n\t\t\tinstance.status(states[state], 1000);\n\t\t\tnotifyDeps(state, states[state]);\n\t\t};\n\n\t\tvar notifyDeps = (type) => {\n\t\t\tvar instances = instance.main.instances().filter(i => i.module.flags && i.module.flags.includes('rabbitmq-dep') > -1 && i.config.manager === instance.id);\n\t\t\tfor (let com of instances)\n\t\t\t\tcom.configure(type);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.close(true);\n\n\t\t\tif (!config.hostname) // queue name is optional in some cases, not supported here\n\t\t\t\treturn instance.status('Not configured');\n\n\t\t\tsetState('connecting');\n\t\t\tinstance.status(states.connecting);\n\n\t\t\tconfig.port = config.port || 5672;\n\t\t\tconfig.vhost = config.vhost || '/';\n\t\t\tif (config.vhost[0] !== '/')\n\t\t\t\tconfig.vhost = '/' + config.vhost;\n\n\t\t\tvar credentials = '';\n\t\t\tif (config.username)\n\t\t\t\tcredentials += config.username;\n\t\t\tif (config.password)\n\t\t\t\tcredentials += ':' + config.password;\n\t\t\tif (credentials)\n\t\t\t\tcredentials += '@';\n\n\t\t\tvar conString = `${config.protocol}://${credentials}${config.hostname}:${config.port}${config.vhost}`;\n\n\t\t\t// Create a new connection manager\n\t\t\tManager = amqp.connect([conString]);\n\t\t\tManager.on('connect', function(){\n\t\t\t\tinstance.Manager = Manager;\n\t\t\t\tsetState('connected');\n\t\t\t});\n\n\t\t\tManager.on('connectFailed', function(){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('connectionfailed');\n\t\t\t\t// notifyDeps('connectfailed'); // this does not happen after connect so the deps should be disconnected\n\t\t\t});\n\n\t\t\tManager.on('disconnect', function(e){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('disconnected');\n\t\t\t});\n\n\t\t\tManager.on('error', function(e){\n\t\t\t\tconsole.log('Rabbit Error', e);\n\t\t\t\tif (!Manager.isConnected()) {\n\t\t\t\t\tsetState('disconnected');\n\t\t\t\t\tinstance.Manager = null;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(silent) {\n\t\t\tManager && Manager.close();\n\t\t\tinstance.Manager = null;\n\t\t\t!silent && notifyDeps('removed');\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.hostname__placeholder:localhost;required:1\" class=\"m\">Hostname or IP address</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.port__type:number;placeholder:5672__5672\" class=\"m\">Port (default: 5672)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.protocol__dirsource:amqp|amqp,amqps|amqps__'amqp'\" class=\"m\">Protocol</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.vhost__placeholder:/\" class=\"m\">Virtual host</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.username\" class=\"m\">Username</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.password__type:password\" class=\"m\">Password</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__show__text\"></footer>\n</body>",
			"cjphx755c8": "<script total>\n\n\texports.id = 'rabbitmqpublish';\n\texports.name = 'RabbitMQ Publish';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\n\t\tvar Manager, channel, ManagerState;\n\t\tvar stats = { ack: 0, nack: 0 };\n\n\t\t// initialy the stack is paused\n\t\tvar stack = new Stack(instance.id, function(data, next){\n\t\t\tif (!channel) {\n\t\t\t\treturn next(false);\n\t\t\t}\n\n\t\t\tchannel\n\t\t\t\t.sendToQueue(config.queuename, Buffer.from(data))\n\t\t\t\t.then(function () {\n\t\t\t\t\tnext(true);\n\t\t\t\t\tif (stats.ack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.ack = 0;\n\t\t\t\t\tstats.ack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tnext(false);\n\t\t\t\t\tif (stats.nack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.nack = 0;\n\t\t\t\t\tstats.nack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t});\n\t\t});\n\n\t\tinstance.message = function($) {\n\t\t\tvar d = $.data;\n\t\t\tvar type = typeof(d);\n\t\t\tif (type !== 'buffer' && type !== 'string')\n\t\t\t\td = JSON.stringify(d);\n\n\t\t\tstack.push(d);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tfunction setStatus(str, timeout) {\n\t\t\tinstance.status({\n\t\t\t\tstate: str || ManagerState.title,\n\t\t\t\tstats\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tsetStatus('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\tsetStatus('Disconnected', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tsetStatus('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetStatus(ManagerState.title, 1000);\n\n\t\t\tchannel && channel.close && channel.close();\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\t// Ask the connection manager for a ChannelWrapper.  Specify a setup function to\n\t\t\t// run every time we reconnect to the broker.\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel wrapper instance.\n\t\t\t\t\tsetTimeout(_ => { stack && stack.next(); }, 1000);\n\t\t\t\t\treturn chan.assertQueue(config.queuename, { durable: true });\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tstack.destroy();\n\t\t\tstack = null;\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction Stack(id, callback) {\n\t\t\tvar self = this;\n\t\t\tself.dbname = 'amqp_stack_' + id;\n\t\t\tself.index = 0;\n\t\t\tself.callback = callback;\n\t\t\tself.busy = false;\n\t\t\tself.db = NOSQL(self.dbname);\n\t\t\t//NOSQLMEMORY(self.dbname);\n\t\t};\n\n\t\tStack.prototype.destroy = function() {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.busy = true;\n\t\t\tthis.callback = () => {};\n\t\t\tthis.data = null;\n\t\t};\n\n\t\tStack.prototype.next = function() {\n\t\t\tvar self = this;\n\t\t\tif (self.busy)\n\t\t\t\treturn;\n\t\t\tself.busy = true;\n\t\t\tif (self.timeout) {\n\t\t\t\tclearTimeout(self.timeout);\n\t\t\t\tself.timeout = null;\n\t\t\t}\n\n\t\t\tself.db.find().first().callback(function(err, data){\n\t\t\t\tif (data) {\n\t\t\t\t\tvar id = data.id;\n\t\t\t\t\tvar data = data.data;\n\t\t\t\t\tself.callback(data, function(ok){\n\t\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t\tself.db.remove().where('id', id).callback(function(){\n\t\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\tself.timeout = setTimeout(function(){\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\tself.busy = false;\n\t\t\t});\n\t\t};\n\n\t\tStack.prototype.push = function(data) {\n\t\t\tthis.db.insert({ id: this.index++, data: data }).callback((err, result, meta) => {\n\t\t\t\tthis.next();\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; }\n</style>\n\n<script>\n\tON('configure_rabbitmqpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.state__text\"></div>\n\t\t<div>Ack: <span data-bind=\"STATUS.stats.ack__text\"></span></div>\n\t\t<div>Nack: <span data-bind=\"STATUS.stats.nack__text\"></span></div>\n\t</footer>\n</body>",
			"cjue1ca74d": "<script total>\n\n\texports.name = 'Split';\n\texports.icon = 'fa fa-random';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? U.get(config.path, $.data) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"meno\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"meno\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"meno\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"meno\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"meno\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"meno\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
			"ck5id8291c": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8ij9c0cd": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8zl7724b": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '3';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck9jk93551": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"c28uo6c48a": "<script total>\r\n\texports.name = 'RPIgpio';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['rpi-gpio'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar RPI = require('rpi-gpio');\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bit = $.data;\r\n\r\n\t\t\tif (config.read_write && config.gpiokey) {\r\n\r\n\t\t\t\tswitch (config.read_write) {\r\n\t\t\t\t\tcase 'write':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tcase 'read':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$.destroy();\r\n\r\n\t\t};\r\n\t};\r\n</script>\r\n\r\n<readme>\r\n# GPIO\r\n\r\n__Write mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the component to set the GPIO to HIGH\r\n- Send false to the component to set the GPIO to LOW\r\n\r\n__Read mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the node so read the state of the gpio\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\r\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\r\n\t</header>\r\n</body>",
			"c2pro15472": "<script total>\r\n\texports.name = 'RPIi2cWrite';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar stringtonumber = c => parseInt(c);\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet address, register, bytes;\r\n\r\n\t\t\ttry {\r\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\r\n\t\t\t} catch (err) {\r\n\t\t\t\t$.send('output', err + '');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Send msg\r\n\t\t\tlet i2c1 = I2C.openSync(1);\r\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\r\n\t\t\t$.send('output', { data: bytes });\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Write\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `bytes`: The bytes which will be written\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.address\">Address</div>\r\n\t\t<div data---=\"input__?.register\">Register</div>\r\n\t\t<div data---=\"input__?.bytes\">Data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\r\n\t</header>\r\n</body>",
			"c2qxlf79f2": "<script total>\r\n\texports.name = 'RPIuartDevices';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tvar SerialPort = new require('serialport');\r\n\t\tinstance.trigger = async function() {\r\n\t\t\tawait SerialPort.list().then(function(ports) {\r\n\t\t\t\tinstance.send('output', ports);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# UART\r\n\r\nGet all devices which are possible to send\r\n</readme>\r\n\r\n<script>\r\n\tFUNC.frpiuartdevices_exec = function(el) {\r\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\r\n\t</div>\r\n</body>",
			"c2qgscea9": "<script total>\r\n\texports.name = 'RPIi2cRead';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar BCD2D = function(Wert) {\r\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\r\n\t\t};\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar i2c1 = I2C.openSync(1);\r\n\r\n\t\t\tif (config.presensor) {\r\n\t\t\t\tswitch (config.sensor) {\r\n\t\t\t\t\tcase 'DS1307':\r\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\r\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\r\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t$.destroy();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\r\n\r\n\t\t\t\t//send msg\r\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\r\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\r\n\t\t\t\t$.send('output', rbuf.toString());\r\n\t\t\t}\r\n\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Read\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `readLength`: The length of how many bits will be read\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\r\n\t\t</div>\r\n\t\t<hr />\r\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\r\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\r\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\r\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\r\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\r\n\t</header>\r\n</body>",
			"c2rhca784d": "<script total>\r\n\texports.name = 'RPIuart';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = { port:'/dev/ttyUSB0' };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar SerialPort = require('serialport')\r\n\t\tvar sp;\r\n\r\n\t\tinstance.openConnectionUart = function(){\r\n\r\n\t\t\tsp = new SerialPort(config.port, {\r\n\t\t\t\tbaudRate: parseInt(config.baudrate),\r\n\t\t\t\tdataBits: parseInt(config.databits),\r\n\t\t\t\tparity: config.parity,\r\n\t\t\t\tstopBits: parseInt(config.stopbits),\r\n\t\t\t\tflowControl: false,\r\n\t\t\t\tautoOpen: false\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('open', function() {\r\n\t\t\t\tinstance.status({ open: true });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('close', function() {\r\n\t\t\t\tinstance.status({ open: false });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\r\n\t\t\t\tinstance.send('output', data);\r\n\t\t\t});\r\n\r\n\t\t\tsp.open(function (err) {\r\n\t\t\t\tif (err)\r\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bytes = $.data;\r\n\r\n\t\t\t//check if sp is open\r\n\t\t\tif (!sp)\r\n\t\t\t\tinstance.openConnectionUart();\r\n\r\n\t\t\t//send msg\r\n\t\t\tsp.write(bytes);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.close = function(){\r\n\t\t\tsp && sp.close(NOOP);\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\r\n</style>\r\n\r\n<readme>\r\n# UART\r\n\r\n- send a string directly to a port\r\n- when device from a port sends data to the host, it will be send to the output of the component\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\r\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200|115200,128000|128000;required:1\">Baudrate</div>\r\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\r\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\r\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\r\n\t\t\t{{ if value.open }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\r\n\t\t\t{{ else }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\r\n\t\t\t{{ fi }}\r\n\t\t</div>\r\n\t</footer>\r\n</body>",
			"c2ugtc105d": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Total.js';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cf8ga6bf53": "<script total>\n\n\texports.name = 'Throttle';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { limit: 1, delay: 0 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Outputs' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar pending = [];\n\t\tvar running = 0;\n\n\t\tvar check = function() {\n\t\t\tif (running < config.limit) {\n\n\t\t\t\tvar diff = config.limit - running;\n\t\t\t\tvar items = pending.splice(0, diff);\n\n\t\t\t\trunning += items.length;\n\n\t\t\t\tif (config.delay) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\t\titem.send('output');\n\t\t\t\t\t}, config.delay);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\titem.send('output');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinstance.status(pending.length, 500);\n\t\t};\n\n\t\tvar end = function() {\n\t\t\trunning--;\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.on('end', end);\n\t\t\tpending.push($);\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tvar item = pending.shift();\n\t\t\tif (item) {\n\t\t\t\trunning++;\n\t\t\t\titem.send('output');\n\t\t\t}\n\t\t\tcheck();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component sends only limited count of messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number\">Limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.delay__required:0;align:1;type:number;ricon:!ms\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"button exec\" data-exec=\"FUNC.trigger\">Send</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"coob8a3971": "<script total>\n\n\texports.name = 'code';\n\texports.group = 'ACGDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cu343d9d6": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'ACGDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"il304cv4v": {
				"id": "il304cv4v",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"interval": 12000
				},
				"x": -46.5625,
				"y": 525.8125,
				"component": "ciqgwb764e",
				"connections": {
					"output": [
						{
							"id": "il34hy3gy",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Triggers",
					"name": "Timer",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il305osq5": {
				"id": "il305osq5",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_mondial').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 465,
				"y": 359,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31auzem",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31auzem": {
				"id": "il31auzem",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_mondial').callback(function(err,response) {\n\tif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 703,
				"y": 343,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31cefls",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31cefls": {
				"id": "il31cefls",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 974.8959350585938,
				"y": 352.91668701171875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31e9qdk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31doouu": {
				"id": "il31doouu",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2779.965576171875,
				"y": 147.98611450195312,
				"component": "ci2ol4a50c",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il31e9qdk": {
				"id": "il31e9qdk",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1242.8126831054688,
				"y": 362.91668701171875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h3pxt",
							"index": "input"
						},
						{
							"id": "il3vovew3",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h3pxt": {
				"id": "il31h3pxt",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','translate').callback(function(err,response) {\n\tdata.translateconfigs = response;\n\t$.send('output',data);\n})"
				},
				"x": 1527.9515380859375,
				"y": 124.96528625488281,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h85ev",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h85ev": {
				"id": "il31h85ev",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nvar configs = data.translateconfigs;\nopt.method = 'POST';\nopt.url = configs.baseurl+\"?\"+configs.value;\nopt.headers = configs.headers;\n\nopt.body = '[{\"Text\":\"'+data.title+\"||\"+data.description+'\"}]';\nopt.callback = function(err,response) {\n    response = response.body.parseJSON(true);\n\tif(response){\n\t\tdata.translated = response[0]['translations'][0]['text'];\n\t\t$.send('output', data);\n\t}\n\n}\n\nREQUEST(opt);"
				},
				"x": 1754.9654541015625,
				"y": 125.97222900390625,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31j3ew8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31j3ew8": {
				"id": "il31j3ew8",
				"config": {
					"outputs": 1,
					"code": "var doc = { id : 'actualite_sports_mondial'};\ndoc.original = data;\ndoc.date = F.datetime.format('HH:mm');\n$.send('output',doc);"
				},
				"x": 2051.9793701171875,
				"y": 152.95140075683594,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31ku6kw",
							"index": "input"
						},
						{
							"id": "il31doouu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31ku6kw": {
				"id": "il31ku6kw",
				"config": {
					"template": "<h3>Hello World!</h3>"
				},
				"x": 2391.9793701171875,
				"y": 80.97222900390625,
				"component": "cu343d9d6",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345fxjo": {
				"id": "il345fxjo",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_can').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 470,
				"y": 489,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345jzxv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345jzxv": {
				"id": "il345jzxv",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_can').callback(function(err,response) {\nif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 698,
				"y": 533,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345ltgb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345ltgb": {
				"id": "il345ltgb",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\nREQUEST(opt);"
				},
				"x": 968.8635864257812,
				"y": 543.8636169433594,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345n14s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345n14s": {
				"id": "il345n14s",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1216,
				"y": 545,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vosqn8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34hy3gy": {
				"id": "il34hy3gy",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 178.9488525390625,
				"y": 577.897705078125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i3g9e",
							"index": "input"
						},
						{
							"id": "il305osq5",
							"index": "input"
						},
						{
							"id": "il345fxjo",
							"index": "input"
						},
						{
							"id": "il38lmcrg",
							"index": "input"
						},
						{
							"id": "il38o3p25",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i3g9e": {
				"id": "il34i3g9e",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_euro').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 477.9375,
				"y": 665.9375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i43j5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i43j5": {
				"id": "il34i43j5",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_euro').callback(function(err,response) {\n\tif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 692.9544982910156,
				"y": 666.9601440429688,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i4n1l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i4n1l": {
				"id": "il34i4n1l",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 938.9203987121582,
				"y": 674.9431457519531,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i5ak9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i5ak9": {
				"id": "il34i5ak9",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1193,
				"y": 708,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3voq2o0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lmcrg": {
				"id": "il38lmcrg",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_champions_league').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 472.98289489746094,
				"y": 923.9772338867188,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lnt4b",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lnt4b": {
				"id": "il38lnt4b",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_champions_league').callback(function(err,response) {\nif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 710.9943084716797,
				"y": 910.9942932128906,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lobu4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lobu4": {
				"id": "il38lobu4",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 963.9772338867188,
				"y": 910.9942932128906,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lorsj",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lorsj": {
				"id": "il38lorsj",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1206.9885864257812,
				"y": 905.9658813476562,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3veutme",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lpnms": {
				"id": "il38lpnms",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1760.0625,
				"y": 999.9375,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il38o3p25": {
				"id": "il38o3p25",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_national').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 472.98289489746094,
				"y": 1144.9715576171875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38ob1r9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38ob1r9": {
				"id": "il38ob1r9",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_national').callback(function(err,response) {\nif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 713.8635711669922,
				"y": 1148.8067626953125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38obor9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38obor9": {
				"id": "il38obor9",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 975.9089965820312,
				"y": 1153.9487915039062,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38od5fh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38od02l": {
				"id": "il38od02l",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1456.5906982421875,
				"y": 1292.67041015625,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il38od5fh": {
				"id": "il38od5fh",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1240.7669677734375,
				"y": 1168.8919677734375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38od02l",
							"index": "input"
						},
						{
							"id": "il3vnxhrv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3veutme": {
				"id": "il3veutme",
				"config": {
					"template": "***ACTUALITE CHAMPIONS LEAGUE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1471.4202880859375,
				"y": 918.3521728515625,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il38lpnms",
							"index": "input"
						},
						{
							"id": "il3vg4bxm",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vg4bxm": {
				"id": "il3vg4bxm",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1733.875,
				"y": 825.34375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vh3l7f",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vh3l7f": {
				"id": "il3vh3l7f",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2013.4942626953125,
				"y": 880.6533203125,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3vnxhrv": {
				"id": "il3vnxhrv",
				"config": {
					"template": "***ACTUALITE CHAMPIONS LEAGUE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1477.783935546875,
				"y": 1168.6646728515625,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3vnxqr3",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vnxqr3": {
				"id": "il3vnxqr3",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1762.8126220703125,
				"y": 1168.3334045410156,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vny7p5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vny7p5": {
				"id": "il3vny7p5",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2038.9771728515625,
				"y": 1149.26123046875,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3voq2o0": {
				"id": "il3voq2o0",
				"config": {
					"template": "***ACTUALITE COUPE D'EUROPE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1434.791748046875,
				"y": 728.6805725097656,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3voqjyo",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3voqjyo": {
				"id": "il3voqjyo",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : new Date(), contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : new Date().format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1727.71875,
				"y": 696.625,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3voqw8d",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3voqw8d": {
				"id": "il3voqw8d",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1998.90625,
				"y": 632.5,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3vosqn8": {
				"id": "il3vosqn8",
				"config": {
					"template": "***ACTUALITE COUPE D'AFRIQUE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1458.5765380859375,
				"y": 555.3472595214844,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3voszkl",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3voszkl": {
				"id": "il3voszkl",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1719.75,
				"y": 550.5,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vot9ev",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vot9ev": {
				"id": "il3vot9ev",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2031.8125,
				"y": 518,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"paused": {
				"input__il31h3pxt__input": 1,
				"output__il34hy3gy__output": 1
			},
			"il3vovew3": {
				"id": "il3vovew3",
				"config": {
					"template": "***ACTUALITE COUPE DU MONDE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1502.0625,
				"y": 361.4375,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3vovtgz",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vovtgz": {
				"id": "il3vovtgz",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1765.5,
				"y": 278,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vow7wk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vow7wk": {
				"id": "il3vow7wk",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2020.625,
				"y": 374.9375,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://localhost:8000",
		"dtcreated": "2022-05-12T10:43:55.935Z",
		"size": 303177,
		"variables2": {}
	},
	"fpsh3001aj41d": {
		"paused": true,
		"id": "fpsh3001aj41d",
		"reference": "",
		"author": "",
		"group": "Actualite",
		"icon": "fab fa-themeisle",
		"color": "#61C83B",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Actu THEMATIQUE",
		"components": {
			"cgq0f971dd": "<script total>\n\n\texports.name = 'Macro';\n\texports.icon = 'fa fa-scroll';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { code: 'RETURN DATA' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\t\tvar temp = {};\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar val = fn({ data: $.data, temp: temp });\n\t\t\t\t$.send('output', val === undefined ? $.data : val);\n\t\t\t} else\n\t\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tfn = config.code ? NEWMACRO(config.code) : null;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe macro component uses Total.js Macro language that allows you to write much simple code like in JavaScript. Macros are targeted for small data transformation.\n\n- you don't need to solve Upper/Lower case\n- `return EXPRESSION` will return data and send them next\n- `data` keyword contains a message data\n- `temp` keyword can contain a persistent temporary data\n\n__Example__:\n\n```text\nIF DATA>20 AND DATA<35\n\tRETURN DATA * 5\nFI\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear temporary data</div>\n\t\t<div data---=\"codemirror__?.code__type:text;minheight:300;parent:auto;margin:90;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><a href=\"https://docs.totaljs.com/total4/pahk001pr41d/\" target=\"_blank\"><i class=\"fa fa-book mr5\"></i>Documentation</a></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgmxl1055e": "<script total>\n\n\texports.id = 'qrgenerator';\n\texports.name = 'QR generator';\n\texports.icon = 'fa fa-qrcode';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['awesome-qr'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tconst { AwesomeQR } = require(\"awesome-qr\");\n\t\tconst { writeFile, readFile } = require('fs').promises;\n\t\tconst filename = PATH.tmp(instance.id + 'qrcode.png');\n\t\tvar bgready = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tgenerate(data.text, function(err, buf){\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.end();\n\t\t\t\tif ($.data.filename)\n\t\t\t\t\tF.Fs.writeFile($.data.filename, buf, function(err){\n\t\t\t\t\t\tif (err) instance.throw(err);\n\t\t\t\t\t});\n\t\t\t\t$.data._qrcode = buf.toString('base64');\n\t\t\t\t$.send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t/*// \"config\" is changed\n\t\t\tif (config.background) {\n\t\t\t\twriteFile(filename, Buffer.from(config.background.split(';base64,')[1], 'base64'))\n\t\t\t\t\t.then(_ => { console.log('OK'); bgready = true; })\n\t\t\t\t\t.catch(err => { console.log('FAILED', err); bgready = false; });\n\t\t\t} else\n\t\t\t\tbgready = false;*/\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function generate(text, cb) {\n\t\t\tvar bg;\n\n\t\t\tif (bgready) {\n\t\t\t\ttry {\n\t\t\t\t\tbg = await readFile(filename);\n\t\t\t\t} catch(e) {\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar obj = {\n\t\t\t\ttext,\n\t\t\t\tsize: 600\n\t\t\t}\n\n\t\t\tif (bg)\n\t\t\t\tobj.backgroundImage = bg;\n\t\t\tvar buffer;\n\n\t\t\tnew AwesomeQR(obj).draw().then(buf => {\n\t\t\t\tcb(null, buf);\n\t\t\t}).catch(err => {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\ttext: 'text to write to qr code',\n\tfilename: '/public/img/', // optionaly writes the file to filesystem\n\t...\n}\n```\n## Output\n```js\n{\n\ttext: 'text to write to qr code',\n\t...\n\t_qrcode: 'base64 encoded buffer'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<!--Please use <a href=\"https://www.base64-image.de/\" target=\"_blank\">base64-image.de</a> to turn the background image to Base64 and place the text \"data:image/png;ba....\" bellow.\n\t\t<div data---=\"input__?.background\">Background Image data (optional)</div>-->\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ch5c79dcc2": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"ch9ub95918": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"chdmwfcabd": "<script total>\n\n\texports.name = 'Workflow';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Name', code: 'success();', clear: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1400 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar repo = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn($, repo);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tvar code = config.code;\n\t\t\t\tif (code) {\n\n\t\t\t\t\tvar builder = ['var controller=$.refs.controller||EMPTYOBJECT'];\n\n\t\t\t\t\tif (code.indexOf('headers') !== -1)\n\t\t\t\t\t\tbuilder.push('headers=controller.headers||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('params') !== -1)\n\t\t\t\t\t\tbuilder.push('params=controller.params||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('query') !== -1)\n\t\t\t\t\t\tbuilder.push('query=controller.query||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('respond') !== -1)\n\t\t\t\t\t\tbuilder.push('respond=(data)=>$.send(\\'output\\',data)');\n\n\t\t\t\t\tif (code.indexOf('success') !== -1)\n\t\t\t\t\t\tbuilder.push('success=(data)=>$.send(\\'output\\',{success:true,value:data})');\n\n\t\t\t\t\tif (code.indexOf('invalid') !== -1)\n\t\t\t\t\t\tbuilder.push('invalid=(err)=>$.send(\\'error\\',[{error:err.toString()}])');\n\n\t\t\t\t\tif (code.indexOf('user') !== -1)\n\t\t\t\t\t\tbuilder.push('user=controller.user');\n\n\t\t\t\t\tif (code.indexOf('ip') !== -1)\n\t\t\t\t\t\tbuilder.push('ip=controller.ip||\\'\\'');\n\n\t\t\t\t\tif (code.indexOf('model') !== -1)\n\t\t\t\t\t\tbuilder.push('model=$.data');\n\n\t\t\t\t\tvar AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t\t\t\t\tvar body = builder.join(',') + ';try{' + code + '}catch(e){$.instance.status({error:e.message});$.destroy();}';\n\n\t\t\t\t\tfn = code.indexOf('await ') === -1 ? new Function('$', 'repo', body) : new AsyncFunction('$', 'repo', body);\n\n\t\t\t\t\tif (config.clear)\n\t\t\t\t\t\trepo = {};\n\n\t\t\t\t} else\n\t\t\t\t\tfn = null;\n\n\t\t\t\tinstance.status(EMPTYOBJECT);\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.status({ error: e.message });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t\trepo = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component simulates Total.js Schema Workflow operation. It can process data and store/read them into the database.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Workflow name</div>\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear repository object</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:185;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><i class=\"fa fa-book\"></i><span class=\"link exec\" data-exec=\"comworkflowsettingshelp\">Documentation</span></div>\n\t</div>\n</settings>\n\n<script>\nTOUCH(function(instance) {\n\n\tW.comworkflowsettingshelp = function() {\n\tvar md = `\n__Properties__:\n- \\`$ {Message}\\`\n- \\`controller {Object}\\` A controller instance\n- \\`user {Object}\\` A user instance if exists\n- \\`headers {Object}\\` Request headers\n- \\`query {Object}\\` URL query arguments\n- \\`params {Object}\\` A dynamic URL params\n- \\`ip {String}\\` IP address\n\n__Functions__:\n- \\`respond(data {Object})\\` Responds with data\n- \\`success(data {Object}\\` optional) Response with success object\n- \\`invalid(error {String})\\` Error handling`;\n\t\tFUNC.readme('Documentation: Workflow', md);\n\t};\n\n\tinstance.settings = function() {\n\t\tif (!W.comworkflowsettingsskip) {\n\t\t\tW.comworkflowsettingsskip = true;\n\t\t\tW.comworkflowsettingshelp();\n\t\t}\n\t};\n});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text\"></b>\n\t</header>\n\t<footer data-bind=\"STATUS.error__text span__show\" style=\"padding:10px\" class=\"fs12 red\"><i class=\"fa fa-bug mr5\"></i><b>ERROR:</b> <span></span></footer>\n</body>",
			"chim37758d": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { payload: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + value.substring(1)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"chkct9f685": "<script total>\n\n\texports.name = 'Token Auth';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:1\">Token</div>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.header__required:1;type:lower\">Header</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.error__required:1\">Error message</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div data---=\"input__?.ddos__required:1;type:number\">DDOS protection</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.code__text\" class=\"code\"></span> <span data-bind=\"CONFIG.header__text\"></span></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
			"chm2b0c2fc": "<script total>\n\n\texports.name = 'Remember';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-save';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'remember', name: 'Remember' }, { id: 'request', name: 'Request' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache;\n\n\t\tinstance.message = function($) {\n\n\t\t\tif ($.input === 'remember') {\n\t\t\t\tcache = $.data;\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar val = cache;\n\n\t\t\tif (val == null)\n\t\t\t\tval = null;\n\n\t\t\tif (config.path)\n\t\t\t\tU.set($.data, config.path, val);\n\t\t\telse\n\t\t\t\t$.data = val;\n\n\t\t\t$.send('response');\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe primary goal of this component is to remember data. The component contains two inputs:\n\n- Remember input for remembering data\n- Request input as a trigger for obtaining data, then remembered data would extend the request message (its data), and the component will send it to the Response output\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property\">Set remembered data to the specific property/field</div>\n\t\t<div class=\"help\">If you don't enter the property, the remembered data will replace data on the Request input.</div>\n\t</div>\n</settings>",
			"chnzlb085c": "<script total>\n\n\texports.name = 'API PostgreSQL';\n\texports.icon = 'fa fa-cubes';\n\texports.author = 'Total.js';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.config = { name: 'default', url: '', pooling: 2 };\n\texports.outputs = [{ id: 'error', name: 'Error' }];\n\texports.npm = ['querybuilderpg'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar QB = require('querybuilderpg');\n\t\tvar init = false;\n\t\tvar conf;\n\n\t\tinstance.configure = function() {\n\n\t\t\tinit && QB.init(conf.name);\n\t\t\tconf = instance.replace(config);\n\n\t\t\tif (conf.url) {\n\t\t\t\tQB.init(conf.name, conf.url, config.pooling, function(err, data) {\n\t\t\t\t\tvar msg = instance.newmessage([{ error: err + ' --> ' + data.query }]);\n\t\t\t\t\tmsg.send('error');\n\t\t\t\t});\n\t\t\t\tinit = true;\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tconf && require('querybuilderpg').init(conf.name);\n\t\t\tconf = null;\n\t\t\tinit = false;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component initializes QueryBuilder for PostgreSQL database. So you will able to use `API Database` component. Every connection must be separated by the alias.\n\n__Usage in API Database__:\n\n- `tbl_user` is targeted to the `default/tbl_user` alias connection\n- `anotherserver/tbl_user` will use `anotherserver` alias connection\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Alias</div>\n\t\t\t\t<div class=\"help\">The alias separates various DB connections</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.url__required:1;camouflage:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">Example: postgresql://user:pass@localhost:5432/database_name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.pooling__required:1;type:number\">Pooling</div>\n\t\t\t\t<div class=\"help\">How many connections can it keep?</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\tAlias: <b class=\"monospace\" data-bind=\"CONFIG.name__text\"></b>\n\t</footer>\n</body>",
			"chpq6c0445": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tcompiled = {};\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{dynamic_arg_1}/{dynamic_arg_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n__Output data:__ will be same data extendend by adding new properties:\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"chsvy615c5": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\" class=\"code\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</footer>\n</body>",
			"chuxx5941c": "<script total>\n\n\texports.name = 'API Database';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-database';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', tab: 'list', listtable: '', listfilter: [], listwhere: [], listlimit: 100, listsort: '', listpath: '', createtable: '', createerror: '', readtable: '', readfields: '*', readwhere: [], readpath: '', readsort: '', readerror: '', createtable: '', createpath: '', updatetable: '', updateerror: '', updatepath: '', updatewhere: [], removetable: '', removepath: '', removeerror: '', removewhere: [] };\n\texports.inputs = [{ id: 'list', name: 'List' }, { id: 'create', name: 'Create' }, { id: 'read', name: 'Read' }, { id: 'update', name: 'Update' }, { id: 'remove', name: 'Delete' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar builder = null;\n\t\t\tvar is = false;\n\t\t\tvar data = $.data;\n\t\t\tvar params = data.params || EMPTYOBJECT;\n\t\t\tvar query = data.query || EMPTYOBJECT;\n\t\t\tvar user = data.user || EMPTYOBJECT;\n\n\t\t\tdata = data.data || data.body;\n\n\t\t\tswitch ($.input) {\n\t\t\t\tcase 'create':\n\t\t\t\t\tif (config.createtable)\n\t\t\t\t\t\tbuilder = DB().insert(config.createtable, data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\n\t\t\t\t\tif (config.updatetable) {\n\t\t\t\t\t\tbuilder = DB().update(config.updatetable, data);\n\t\t\t\t\t\tcache.update && cache.update(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.updateerror && builder.error(config.updateerror);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remove':\n\t\t\t\t\tif (config.removetable) {\n\t\t\t\t\t\tbuilder = DB().remove(config.removetable);\n\t\t\t\t\t\tcache.remove && cache.remove(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.removeerror && builder.error(config.removeerror);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'read':\n\t\t\t\t\tif (config.readtable) {\n\t\t\t\t\t\tbuilder = DB().read(config.readtable);\n\t\t\t\t\t\tcache.read && cache.read(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.readerror && builder.error(config.readerror);\n\t\t\t\t\t\tif (cache.readsort) {\n\t\t\t\t\t\t\tfor (var m of cache.readsort)\n\t\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'list':\n\t\t\t\t\tif (config.listtable) {\n\t\t\t\t\t\tbuilder = DB().list(config.listtable);\n\t\t\t\t\t\tbuilder.autoquery(query, cache.listfields, cache.listsort ? (cache.listsort[0] + '_' + cache.listsort[1]) : null, config.listlimit || 100);\n\t\t\t\t\t\tcache.list && cache.list(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (builder) {\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t$.send('error', [{ error: err + '' }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar path = config[$.input + 'path'];\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\tU.set($.data, path, response);\n\t\t\t\t\t\t\t$.send('output');\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\t$.send('error', [{ error: 'Not configured' }]);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tconfig.tab = 'list';\n\n\t\t\tvar types = ['list', 'update', 'read', 'remove'];\n\t\t\tvar builder;\n\t\t\tvar tmp;\n\n\t\t\tfor (var key of types) {\n\n\t\t\t\tbuilder = [];\n\n\t\t\t\tfor (var item of config[key + 'where']) {\n\t\t\t\t\tvar val = 'null';\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase '1':\n\t\t\t\t\t\t\tval = item.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '2':\n\t\t\t\t\t\t\tval = '\\'' + item.value.replace(/'/g, '\\\\\\'') + '\\'';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\tval = item.value.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === '1' || item.value === 'true' || val === 'on';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === 'now' ? 'new Date()' : item.value.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '6':\n\t\t\t\t\t\t\tval = 'null';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbuilder.push('where(\\'{0}\\', \\'{1}\\', {2})'.format(item.name, item.comparer, val));\n\t\t\t\t}\n\n\t\t\t\tcache[key] = builder.length ? new Function('params', 'data', 'query', 'user', 'refs', '$', 'builder', 'builder.' + builder.join('.')) : null;\n\t\t\t}\n\n\t\t\ttypes = ['list', 'read'];\n\n\t\t\tfor (var key of types) {\n\t\t\t\tvar k = key + 'sort';\n\t\t\t\tif (config[k]) {\n\t\t\t\t\tcache[k] = [];\n\t\t\t\t\ttmp = config[k].split(/,|;/);\n\t\t\t\t\tfor (var m of tmp) {\n\t\t\t\t\t\tm = m.trim().split(' ');\n\t\t\t\t\t\tm[1] = (m[1] || '').toLowerCase() === 'asc';\n\t\t\t\t\t\tcache[k].push(m);\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tcache[k] = null;\n\t\t\t}\n\n\t\t\tcache.listfields = '';\n\n\t\t\tfor (var item of config.listfilter) {\n\t\t\t\ttmp = 'string';\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase '3':\n\t\t\t\t\t\ttmp = 'number';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '4':\n\t\t\t\t\t\ttmp = 'boolean';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '5':\n\t\t\t\t\t\ttmp = 'date';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcache.listfields += (cache.listfields ? ',' : '') + item.name + ':' + tmp;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component can perform some operations on a database with the help of Total.js QueryBuilder. First, you must initialize the connection string for the database via QueryBuilder initialization.\n\n__Input data__:\n\n- `data {Object}` or `body {Object}` optional - payload\n- `query {Object}` optional - query data, key/value must be string\n- `params {Object}` optional - dynamic values, key/value must be string\n- `user {Object}` optional - a user instance\n\n__Output__:\n\n- `insert` returns Number\n- `update` returns Number\n- `remove` returns Number\n- `query` returns Array of Objects\n- `read` returns Object\n- `list` returns:\n\n```json\n{\n\titems: Array,\n\tpage: Number,\n\tpages: Number,\n\tcount: Number\n}\n```\n\nQuery parameters for the `List` operation can contain the below fields which can affect filtering according to the values defined in the dynamic filter.\n\n- `sort {String}` can contain field name with `_asc` or `_desc` value\n- `fields {String}` can return only specified fields separated by comma\n- `page {Number}` page number\n- `limit {Number}` max. items per page (default: max. limit)\n- `column_name=VALUE` enables dynamic filtering\n\n---\n\n__Good to know__: If the `data` (payload) can contain special key names in the form:\n\n- `+key` increments a value\n- `-key` decrements a value\n- `!key` performs toggle for boolean values\n- `>key` stores only greater value\n- `<key` stores only lower value\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings .item { padding: 7px 10px; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\n\t<script type=\"text/html\" class=\"apidatabasestaticfilter\">\n\t\t<div data---=\"listform__?.TYPEwhere__autofocus:1;empty:You do not have defined any rules\">\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} {{ comparer }} <b>{{ if type == '6' }}null{{ else }}{{ value }}{{ fi }}</b></div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'id'\">Name</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.comparer__required:1;align:1;dirsource:tmpcruddb.comparers__'='\">Comparer</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types__'1'\">Type</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.value__monospace:1;align:1__''\" data-bind=\"?.type__enable:value!=='6'\">Value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"help\"><b>Expression</b> supports these commands <code>params {Object}</code>, <code>query {Object}</code>, <code>data {Object}</code>, <code>user {Object}</code>. A value for date field can contain <code>now</code> with the current date/time.</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t</SCR>\n\t\t</div>\n\t</script>\n\n\t<div class=\"CLASS-settings\">\n\n\t\t<div class=\"padding bg-smoke\">\n\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\n\t\t\t<ul class=\"tabmenu\" data---=\"tabmenu__?.tab__null__'list'\">\n\t\t\t\t<li data-value=\"list\">List</li>\n\t\t\t\t<li data-value=\"read\">Read</li>\n\t\t\t\t<li data-value=\"create\">Create</li>\n\t\t\t\t<li data-value=\"update\">Update</li>\n\t\t\t\t<li data-value=\"remove\">Delete</li>\n\t\t\t</ul>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding npt\">\n\n\t\t\t<div data-bind=\"?.tab__show:value==='list'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-list\"></i>List input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listlimit__type:number;required:1;monospace:1\">Max. limit</div>\n\t\t\t\t\t\t<div class=\"help\">Max. records to output</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=list\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel\">\n\t\t\t\t\t<label class=\"bg-smoke\">Dynamic filter</label>\n\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t<div data---=\"listform__?.listfilter__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} <b>{{ type | tmpapidatabasetype }}</b></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'dtcreated'\">Name</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types2__'5'\">Type</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='read'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-glasses\"></i>Read input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<hr />\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readfields__monospace:1\"><b>Read fields</b></div>\n\t\t\t\t\t\t<div class=\"help\">Seperate them by the comma. Empty value or <code>*</code> returns all fields (columns).</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=read\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='create'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-plus-circle\"></i>Create input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='update'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-pencil\"></i>Update input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updateerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=update\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='remove'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-trash-alt\"></i>Delete input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removeerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=remove\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmpapidatabase;\n\n\t\t\tif (!tmp) {\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.commands = [];\n\t\t\t\ttmp.commands.push({ id: 'list', name: 'List' });\n\t\t\t\ttmp.commands.push({ id: 'read', name: 'Read' });\n\t\t\t\ttmp.commands.push({ id: 'insert', name: 'Insert' });\n\t\t\t\ttmp.commands.push({ id: 'update', name: 'Update' });\n\t\t\t\ttmp.commands.push({ id: 'delete', name: 'Delete' });\n\t\t\t\ttmp.comparers = [];\n\t\t\t\ttmp.comparers.push({ id: '=', name: '=' });\n\t\t\t\ttmp.comparers.push({ id: '>', name: '>' });\n\t\t\t\ttmp.comparers.push({ id: '>=', name: '>=' });\n\t\t\t\ttmp.comparers.push({ id: '<', name: '<' });\n\t\t\t\ttmp.comparers.push({ id: '<=', name: '<=' });\n\t\t\t\ttmp.comparers.push({ id: '<>', name: '<>' });\n\n\t\t\t\ttmp.types = [];\n\t\t\t\ttmp.types.push({ id: '1', name: 'Expression' });\n\t\t\t\ttmp.types.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types.push({ id: '5', name: 'Date' });\n\t\t\t\ttmp.types.push({ id: '6', name: 'NULL' });\n\n\t\t\t\ttmp.types2 = [];\n\t\t\t\ttmp.types2.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types2.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types2.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types2.push({ id: '5', name: 'Date' });\n\n\t\t\t\tThelpers.tmpapidatabasetype = function(val) {\n\t\t\t\t\treturn tmp.types2.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapidatabase = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"chvhr9eb24": "<script total>\n\n\texports.name = 'CORS';\n\texports.group = 'REST API';\n\texports.icon = 'fab fa-html5';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\t\tvar route = CORS();\n\t\tinstance.close = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\troute = null;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component enables Cross-Origin Resource Sharing `CORS`, so the web browser will be able to communicate directly with the REST API. The functionality will work only with a defined Proxy endpoint for this Flow.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"fa-3x fab fa-html5\" style=\"color:#BD6B27\"></i>\n\t\t<div class=\"mt10 fs12\">CORS enabled</div>\n\t</div>\n</body>",
			"chxs92d30e": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"chyqe6dd66": "<script total>\n\n\texports.id = 'date';\n\texports.name = 'Date';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-calendar';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t\tinstance.configure = function configure() {\n\t\t\tinstance.status(config.format || 'yyyy-MM-dd HH:mm:ss');\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.trigger = function trigger() {\n\t\t\tinstance.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.format__placeholder:yyyy-MM-dd HH\\:mm\\:ss\">Date format</div>\n\t\t<p>\n\t\t\td - day e.g. 1<br>\n\t\t\tdd - day e.g. 01<br>\n\t\t\tddd - day (named). MO<br>\n\t\t\tdddd - day (named). Monday<br>\n\t\t\tM - month e.g. 1<br>\n\t\t\tMM - month e.g. 01<br>\n\t\t\tMMM - month (named). Jan<br>\n\t\t\tMMMM - month (named). January<br>\n\t\t\tyy - year e.g. 16<br>\n\t\t\tyyyy - year e.g. 2016<br>\n\t\t\tw - week number e.g. 1<br>\n\t\t\tww - week number e.g. 01<br>\n\t\t\tH - hour e.g. 1<br>\n\t\t\tHH - hour e.g. 01<br>\n\t\t\tm - minute e.g. 1<br>\n\t\t\tmm - minute e.g. 01<br>\n\t\t\ts - second e.g. 1<br>\n\t\t\tss - second e.g. 01<br>\n\t\t\ta - AM/PM\n\t\t</p>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci0a550362": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"ci0v4e844c": "<script total>\n\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data;' + builder.join('') + '$.destroy();');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sort data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > div { padding: 10px; font-size: 12px; }\n\t.CLASS footer .newbie { display: none; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASSsettings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASSsettings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASSsettings\">\n\t\t<div data---=\"listform__?.conditions__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"fa fa-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1__''\" class=\"m\">Name</div>\n\t\t\t\t\t<div data---=\"input__?.if__required:1__'value != null'\">Condition</div>\n\t\t\t\t\t<div class=\"help m\"><i class=\"fa fa-exclamation-triangle\"></i><code>value</code> represents a message data. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<div data---=\"validate__?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__text__show\" class=\"red\"></div>\n\t\t<div class=\"newbie\"><i class=\"fa fa-clock-o mr5\"></i>Waits for applying</div>\n\t</footer>\n</body>",
			"ci1cf7fe31": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci21rf35b4": "<script total>\n\texports.id = 'middleware_exec';\n\texports.name = 'Middleware Exec';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { id: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function message($) {\n\t\t\tif (!config.id) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar com = instance.main.instances().findItem('id', config.id);\n\n\t\t\tif (!com || !com.execute) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcom.execute($, function(err, data){\n\t\t\t\tif (err)\n\t\t\t\t\t$.send('error', err);\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function call(data, callback) {\n\t\tvar coms = this.instances().filter(ins => ins.component === 'middleware_function' && ins.config.name).map(ins => ({ id: ins.id, name: ins.config.name }));\n\t\tcallback(coms);\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\t\texports.settings = function(meta) {\n\t\t\tmeta.call(function(response) {\n\t\t\t\tSET('%functions', response);\n\t\t\t}, true);\n\t\t};\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%functions;dirraw:1;placeholder:Select middleware function;dirempty:No functions;required:1\" class=\"m\">Name</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci2ol4a50c": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci39e1e50f": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? Buffer.from(value, item.convert.substring(4)) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.path && config.rewrite)\n\t\t\t\tU.set($.data, config.path, obj);\n\n\t\t\t$.send('output', obj);\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"ci40w50cc5": "<script total>\n\n\texports.name = 'Server extension';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-flag-checkered';\n\texports.author = 'Total.js';\n\texports.config = { name: 'My extension', install: '', uninstall: '', icon: exports.icon };\n\n\texports.make = function(instance, config) {\n\n\t\tvar install = null;\n\t\tvar uninstall = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (uninstall) {\n\t\t\t\tuninstall.call(instance, instance, require);\n\t\t\t\tuninstall = null;\n\t\t\t\tsetTimeout(instance.configure, 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tinstall = config.install ? new Function('instance', 'require', config.install) : null;\n\t\t\t\tuninstall = config.uninstall ? new Function('instance', 'require', config.uninstall) : null;\n\t\t\t} catch (e) {\n\t\t\t\tinstall = null;\n\t\t\t\tuninstall = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\n\t\t\tinstall && install.call(instance, instance, require);\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tuninstall && uninstall.call(instance, instance, require);\n\t\t\tuninstall = null;\n\t\t\tinstall = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component installs Total.js server-side extension. In other words: it can evaluate JavaScript code when the component is initialized or the component settings is changed.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:e.g. Database\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Installation code:</div>\n\t\t<div data---=\"codemirror__?.install__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help m\">The code will be executed when the configuration is changed or the component instance is initialized.</div>\n\t\t<div class=\"ui-input-label\">Uninstallation code:</div>\n\t\t<div data---=\"codemirror__?.uninstall__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">The code above will be executed when the configuration is changed or the component instance is removed.</div>\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\" data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<i class=\"fa-2x {{ value.icon }}\"></i>\n\t\t\t<div class=\"mt10 fs12\">{{ value.name }}</div>\n\t\t\t<div class=\"help npt nmt\">Server extension</div>\n\t\t</script>\n\t</div>\n</body>",
			"ci4i028e45": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ci4yb31396": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ci5lsa7a49": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; min-width: 150px; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec button hidden\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__hide\">Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci6662d511": "<script total>\n\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true, name: 'Debug' };\n\texports.inputs = [{ id: 'input', name: 'Log window' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status({ name: config.name, date: new Date(), data: output });\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name\" class=\"m\">Name</div>\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"far fa-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<div data---=\"box__common.$debug__if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:fa fa-bug;zindex:5\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"fa fa-trash-alt\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></div>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"fa fa-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(data.data, '\\t'))));\n\t\t};\n\n\t});\n\n</script>",
			"ci6sh4b21d": "<script total>\n\texports.id = 'middleware_function';\n\texports.name = 'Middleware Function';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// callback(...);' };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tfn = new Function('instance', '$', 'data', 'repo', 'require', 'vars', 'callback', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tinstance.status(config.name);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.execute = function execute($, callback) {\n\t\t\tif (!fn)\n\t\t\t\tcallback();\n\t\t\telse\n\t\t\t\tfn(instance, $, $.data, $.repo, require, instance.variables, callback);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThe code defined in this component can be executed by multiple `Middleware Exec`.\n**Example:**\n```js\n// available arguments\n// instance {FlowStreamComponent}\n// $        {FlowStreamMessage}\n// data     reference to $.data\n// repo     reference to $.repo\n// vars     reference to instance.main.variables\n\nif (data.headers['x-token'] === instance.main.variables.token)\n\t// data will be send to `Output` output of `Middleware Exec` component\n\tcallback(null, data);\nelse\n\t// data will be send to `Error` output of `Middleware Exec` component\n\tcallback('an error occured');\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t<div class=\"ui-input-label\">Code</div>\n\t\t<div data---=\"codemirror__?.code__required:1;type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci79kc8f4a": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci82ffd82e": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ciai4ea3c7": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cib2305565": "<script total>\n\n\texports.name = 'Map array';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar arr, newarr = [];\n\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tarr = get(config.path);\n\t\t\t\t} catch(e) {}\n\t\t\t} else {\n\t\t\t\tarr = $.data;\n\t\t\t}\n\n\t\t\tif (!config.map)\n\t\t\t\treturn instance.throw('No configuration');\n\t\t\tif (!Array.isArray(arr))\n\t\t\t\treturn instance.throw('Input data is not an array');\n\n\t\t\tvar len = arr.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvar item = arr[i];\n\t\t\t\t\tif (typeof(item) !== 'object' || Array.isArray(item))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar val = getNewObj(arr[i], config.map);\n\t\t\t\t\tnewarr[i] = val;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data = newarr;\n\t\t\t$.send('output', );\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\n\t\t};\n\n\t\tinstance.configure();\n\t\t// from obj to result -> obj.name to result.name\n\t\tconst getNewObj = (obj, map) => {\n\t\t\tvar result = config.array ? [] : {};\n\t\t\tvar len = map.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvar paths = map[i]; // { source: 'path.to.value', target: 'new.path.to.value' }\n\t\t\t\tvar val = get(obj, paths.source);\n\n\t\t\t\tif (val) {\n\t\t\t\t\tif (config.array) {\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!paths.target)// no path, ignore it\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (paths.target === '...') // keep the same path\n\t\t\t\t\t\tpaths.target = paths.source;\n\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\telse\n\t\t\t\t\t\tset(result, paths.target, val);\n\t\t\t\t} else {\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n## The input must be an array of objects !!\n\nThis component can iterate over an array and only take properties listed in the configuration.\n### Example data:\n```js\n\t[\n\t\t{ sensor: { temperature: 25, humidity: 50, ... some more properties }},\n\t\t{ sensor: { temperature: 24, humidity: 55, ... some more properties }},\n\t\t{ sensor: { temperature: 23, humidity: 60, ... some more properties }}\n\t]\n```\n### Example configuration:\n`sensor.temperature` -> `temp`\n`sensor.humidity` -> `hum`\n\n### Example output:\n```js\n\t[\n\t\t{ temp: 25, hum: 50 },\n\t\t{ temp: 24, hum: 55 },\n\t\t{ temp: 23, hum: 60 }\n\t]\n```\n\nIf `Return an Array of Arrays` is checked then\neach of the Map properties will be pushed to a new array, see example bellow\n\n### Example given the data above and this configuration:\n`Return an Array of Arrays` -> **checked**\n**Map**\n`sensor.temperature`\n`sensor.humidity`\n\n### Example output:\n```js\n\t[\n\t\t[25, 50],\n\t\t[24, 55],\n\t\t[23, 60],\n\t]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.array__type:checkbox\" class=\"m\">Return an Array of Arrays (Default: Array of Objects)</div>\n\t\t<section class=\"maparray-section m\">\n\t\t\t<label>Map</label>\n\t\t\t<!--<div data---=\"keyvalue___?.map__placeholderkey:Type a path to property;placeholdervalue:Type a new path to a property\" class=\"maparray-keyvalue\"></div>-->\n\n\t\t\t<div data-bind=\"?.map__template:.maparray-item -> data-index\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach item in value }}\n\t\t\t\t\t<div class=\"maparray-item\" data-index=\"{{ $index }}\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"\" data-bind=\"?.array__.col-md-11:value__.col-md-5:!value\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].source\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div class=\"m\" style=\"line-height: 35px;\">--&gt;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-5\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].target\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.maparray_remove_item\" data-index=\"{{ $index }}\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\" data-bind=\"?.array__hide\">You can use 3 dots(...) in the right field to keep the same path.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.maparray_add_item\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.maparray_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.maparray_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.maparray_add_item = function(el) {\n\t\tconsole.log('ADDING', el);\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.map', { source: '', target: '' });\n\t};\n\n\tFUNC.maparray_remove_item = function(el) {\n\t\tconsole.log('REMOVING', el);\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.attrd('index');\n\t\tconfig.map.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.CLASS .button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.CLASS .button-add:hover { background-color: #F8F8F8; }\n\t.CLASS .button-add:active { background-color: #E0E0E0; }\n\n\t.CLASS .ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.CLASS .ui-dark .button-add:hover { background-color: #303030; }\n\t.CLASS .ui-dark .button-add:active { background-color: #404040; }\n\n\t.maparray-section > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n\t.maparray-section { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.maparray-keyvalue .ui-keyvalue-item-key { width: 50% !important; }\n\t.maparray-keyvalue .ui-keyvalue-item-value { margin: 0 32px 0 50% !important; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cicbpc77a1": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"cie527e4": "<script total>\n\n\texports.name = 'Downloader';\n\texports.icon = 'fa fa-download';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tconst { unlink } = require('fs').promises;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tconst urlpath = config.urlpath || 'url';\n\n\t\t\tconst url = get(data, urlpath);\n\t\t\tif (!url)\n\t\t\t\treturn;\n\n\t\t\tconst filename = 'tmp/{0}.{1}'.format(UID(), U.getExtension(url));\n\n\t\t\tDOWNLOAD(data.url, filename, function(err, response){\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst { filename, body, origin, status, headers } = response;\n\t\t\t\t$.send('output', { filename, body, origin, status, headers });\n\t\t\t\t$.on('terminate', () => {\n\t\t\t\t\tunlink(PATH.root(filename)).catch(e => console.log('[Downloader] Failed to unlink file: ' + filename  + ' | ' + e.message));\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\turl: 'https://example.com/file.jpg', // file url\n}\n```\n\n## Output\nA response object as returned by [DOWNLOAD()](https://docs.totaljs.com/total4/407ff001jy51c/#88aab001hd51c) function.\n```js\n{\n\tfilename: '/tmp/xyz.ext',\n\t...\n}\n```\nThe file will be automaticaly deleted once the message is destroyed.\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.urlpath\">Path to URL in the incomming object (default 'url')</div>\n\t\t<div class=\"help m\">Supports dot notation like so: \"path.to.url\" or \"arr.0.url\" if the \"arr\" is an array. \"arr[0].url\" is not supported</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cif9193b72": "<script total>\n\n\texports.id = 'cron';\n\texports.name = 'Cron';\n\texports.icon = 'fa fa-clock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { jobs: [] };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['node-schedule'];\n\n\texports.make = function(instance, config) {\n\t\tvar schedule = require('node-schedule');\n\n\t\tvar startup = true;\n\t\tvar jobs = [];\n\n\t\tinstance.configure = function() {\n\t\t\tstartJobs(config.jobs);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tjobs.length && jobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t\tif (!job)\n\t\t\t\t\tconsole.log('no job', jobs);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction startJobs(newjobs) {\n\n\t\t\tjobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t});\n\n\t\t\tjobs = [];\n\n\t\t\tnewjobs.forEach(function(job){\n\t\t\t\tjob = job.split('|').trim();\n\n\t\t\t\tif (job[0] === '@startup' && startup) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tinstance.send('output', job[1]);\n\t\t\t\t\t}, 5000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar j = schedule.scheduleJob(job[0], function(){\n\n\t\t\t\t\tvar value = job[1];\n\n\t\t\t\t\tif (job[1] === '@ts')\n\t\t\t\t\t\tvalue = Date.now();\n\n\t\t\t\t\tinstance.send('output', value);\n\t\t\t\t});\n\n\t\t\t\tjobs.push(j);\n\t\t\t});\n\n\t\t\tinstance.status(newjobs.length || '0');\n\n\t\t\tstartup = false;\n\t\t}\n\n\t};\n\n</script>\n\n<readme>\n[node-schedule](https://www.npmjs.com/package/node-schedule) on npmjs.com\n\nSyntax:\n`cron string | data (only string supported) | comment`\n\n## Cron string:\n`* * * * * *`\nMeaning of each `*` explained bellow, in order from left to right\nsecond (0 - 59, OPTIONAL)\nminute (0 - 59)\nhour (0 - 23)\nday of month (1 - 31)\nmonth (1 - 12)\nday of week (0 - 7) (0 or 7 is Sun)\n\nor\n`@startup` to run once at the start or restart of an app (after 5 seconds)\n\n### Examples of cron string:\n```\n0 16 * * *      -> trigger every day at 16:00\n* 0 16 * * *    -> trigger at 16:00 every day and it will keep triggering every second until 16:01\n20,40 19 * * *  -> every day at 19:20 and 19:40\n*/5 * * * *     -> trigger every 5 seconds\n0 20 * * 1      -> every monday at 20:00\n@startup        -> runs once at startup\n```\n\n### Full example:\n```\n* 0 16 * * * | hello data | this is hello comment\n@startup | start\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textboxlist__?.jobs__maxlength:50;placeholder:enter value like '* 1 * * * * | day' and hit enter\" class=\"m\">Cron jobs</div>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.cron_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.cron_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; font-weight: bold; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><span data-bind=\"!STATUS__text\"></span>Number of jobs:</footer>\n</body>",
			"cifpxfc971": "<script total>\n\n\texports.id = 'kill';\n\texports.name = 'Kill';\n\texports.color = '#E73323';\n\texports.icon = 'fa fa-skull';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.main.kill();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nBe careful because this component will kill the current Flow instance. It's targeted only for exceptional cases.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cig7rda52b": "<script total>\n\texports.id = 'modify';\n\texports.name = 'Modify';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tfor (let i = 0; i < Rules.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { getValue, setValue } = Rules[i];\n\n\t\t\t\t\tvar data = getValue($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\t\t\t\t\tsetValue(data, $, instance, set);\n\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.rules || !config.rules.length)\n\t\t\t\treturn;\n\n\t\t\tconst rules = config.rules;\n\t\t\tRules = [];\n\n\t\t\trules.forEach(function eachCondition(cond, index){\n\n\t\t\t\tconst { rule, source, sourcepath, target, targetpath } = cond;\n\t\t\t\tvar getValue, setValue;\n\n\t\t\t\tif (rule === 'remove') {\n\n\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t\tif (!targetpath) {\n\t\t\t\t\t\tif (is$) // set $.data or $.repo to null\n\t\t\t\t\t\t\tsetValue = (d, $) => { $[target] = null; };\n\t\t\t\t\t\telse // ignore variables or variables2\n\t\t\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', 'set({0}, {1}, null);'.format(base, sourcepath));\n\t\t\t\t\t}\n\n\t\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rule === 'set' || rule === 'move') {\n\n\t\t\t\t\tif (source === 'expression')\n\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', sourcepath.indexOf('return') > -1 ? sourcepath : 'return ' + sourcepath + ';');\n\t\t\t\t\telse if (source === 'string')\n\t\t\t\t\t\tgetValue = () => sourcepath; // sourcepath is the actual string value\n\t\t\t\t\telse if (source === 'number') {\n\t\t\t\t\t\tgetValue = () => Number(sourcepath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar str = 'if ({0}) return {1}; if (typeof {1} !== \\'object\\' || {1} == null) return; return {2};'.format(sourcepath ? 'false' : 'true', source, sourcepath ? 'get({0}, \\'{1}\\')'.format(source, sourcepath) : sourcepath);\n\t\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\t\t\tconsole.error(str);\n\t\t\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar str;\n\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t// targetpath => data | repo | variables | variables2\n\t\t\t\tif (!targetpath)\n\t\t\t\t\tstr = base + ' = data;';\n\t\t\t\telse\n\t\t\t\t\tstr = 'if (typeof {0} !== \\'object\\' || {0} == null) {0} = {1}; set({0}, \\'{2}\\', data);'.format(base, isNaN(targetpath[0]) ? '{}' : '[]', targetpath);\n\n\t\t\t\tif (rule === 'move' && sourcepath) {\n\t\t\t\t\tvar is$2 = source === 'data' || source === 'repo';\n\t\t\t\t\tvar base2 = (is$2 ? '$.' : 'instance.main.') + source;\n\t\t\t\t\t// don't delete source if the target is within the same path: source $.data.device --> target $.data.device.data\n\t\t\t\t\tif (base !== base2 || !targetpath.startsWith(sourcepath))\n\t\t\t\t\t\tstr += ' set({0}, \\'{1}\\', null);'.format(base2, sourcepath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t};\n\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t});\n\t\t};\n\n\t\ttry {\n\t\t\tinstance.configure();\n\t\t} catch (e) { console.error(e);}\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tThis component allows you to set/modify/move/remove properties of the incomming data.\n\tFor eaxample, to set the message data to a string `Hello world` select *Message data* in the rule dropdown and leave the text field empty.\n\tThen in the bellow dropdown select `string` and enter the desired string in the text field.\n\tResult:\n\t- before: $.data -> 'Hello world'\n\t- after:  $.data -> 'New string'\n\n\t## Expression\n\tAvailable params are: `data`, `repo`, `variables` ,`variables2`\n\tWhere data is message.data, repo is message.repo --> [Documentation](https://docs.totaljs.com/total4/40844001ni51c)\n\tAnd variables are local variables which can be set in the Variables dialog accessible on the main toolbar(the button between Plus icon and Bug icon)\n\tFor example, we want message data to be the value of (data.value + variables.offset)\n\tResult:\n\t- before: $.data --> `{ value: 100 }` / variables --> `{ offset: 20, ... many other properties }`\n\t- after:  $.data -> `{ value: 120 }`\n\tThe expression: `data.value + variables.offset`\n\n\t### Important\n\t- `Remove` -> `Message data / Message repo` -> `<empty path>` will set `Message data / Message repo` to `null`;\n\t- `Remove` -> `Local variables / Global variables` -> `<empty path>` will be ignored but `Remove` -> `Local variables / Global variables` -> `myVar` will work.\n\t- `Set` -> `Message data` -> `some.path` to: `Message data` -> `some.other.path` will add another property to the incoming data and rest of the data will remain untouched\n\t- `Set` -> `Message data` -> `<empty path>` to: `Message data` -> `some.path` will essentialy overwrite the incomming data, after this there's no longer access to original data(same goes for repo)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<section class=\"modify-rules m\">\n\t\t\t<label>Rules</label>\n\t\t\t<div data-bind=\"?.rules__template:.modify-rule -> data-index\" data---=\"movable__?.rules__selector:.dragme;exec:FUNC.modify_rule_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach rule in value }}\n\t\t\t\t\t<div class=\"modify-rule dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].rule__dirsource:REPO.modify_rules\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<div class=\"m\">--&gt;</div>\n\t\t\t\t\t\t\t\t<div data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">to:</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-7\">\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].target__dirsource:REPO.modify_targets\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].targetpath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group\" data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].source__dirsource:REPO.modify_sources\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].sourcepath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.modify_remove_rule\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each rule will be applied in the order from top to bottom.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.modify_add_rule\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.modify_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.modify_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.modify_add_rule = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.rules', { rule: 'set', source: '', sourcetype: '', target: '', targettype: '' });\n\t};\n\n\tFUNC.modify_remove_rule = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.modify_rule').attrd('index');\n\t\tconfig.rules.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_rule_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.rules.splice(dragged_index, 1)[0];\n\t\tconfig.rules.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.modify_sources = 'string|String,number|Number,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_targets = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_rules = 'set|Set,remove|Remove,move|Move'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.modify-input-group { clear: both; height: 36px; }\n\t.modify-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.modify-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.modify-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.modify-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.modify-rules { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.modify-rule { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.modify-rule > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.modify-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.modify-thead { padding: 8px; margin-bottom:4px; }\n\t.modify-rules > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cigr3c2577": "<script total>\n\n\texports.name = 'Switch';\n\texports.icon = 'fa fa-sitemap fa-rotate-270';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<div data---=\"input__?.source__dirsource:REPO.switch_datasources__'data'\"></div>\n\t\t\t<div data---=\"input__?.path\"></div>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.conditions__template:.switch-condition -> data-index\" data---=\"movable__?.conditions__selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].operator__dirsource:REPO.switch_operators\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t<div data-bind=\"?.conditions[{{ $index }}].operator__hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty'__.switch-input-group:value!=='expression'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].type__dirsource:REPO.switch_valuetypes\" data-bind=\"?.conditions[{{ $index }}].operator__hide:value==='expression'\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].value__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].name\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cihawfaa1c": "<script total>\n\n\texports.name = 'Test';\n\texports.icon = 'fa fa-info';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', 'Hello world output');\n\t\t\t$.send('dynamic', 'Hello world dynamic');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = config.outputs;\n\t\t\tinstance.save();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\tTest\n</readme>\n\n<settings>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cihxm4ad07": "<script total>\n\n\texports.id = 'range';\n\texports.name = 'Range';\n\texports.icon = 'fa fa-arrows-h';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tvar inmin, inmax, outmin, outmax;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar val = parseFloat(typeof(data) === 'object' ? U.get(data, config.property) : data);\n\n\t\t\tif (!val || typeof val !== 'number') {\n\t\t\t\tinstance.throw('Value \"{0}\" is not a number'.format(val.toString().substring(0, 20)));\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (val < inmin) {\n\t\t\t\t$.data = inmin;\n\t\t\t} else if (val > inmax)\n\t\t\t\t$.data = inmax;\n\t\t\telse {\n\t\t\t\tdata = outmin + (outmax - outmin) * (val - inmin) / (inmax - inmin);\n\t\t\t\t$.data = config.round ? Math.round(data) : data;\n\t\t\t}\n\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinmin = parseFloat(config.input_min || 0);\n\t\t\tinmax = parseFloat(config.input_max || 1023);\n\t\t\toutmin = parseFloat(config.output_min || 0);\n\t\t\toutmax = parseFloat(config.output_max || 100);\n\t\t\tinstance.status(`${inmin} - ${inmax} --> ${outmin} - ${outmax}`);\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.property__placeholder:e.g. path.to.property\" class=\"m\">Property (unless the data is the value itself)</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_min__type:number\" class=\"m\">Input min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_max__type:number\" class=\"m\">Input max (defaults to 1023)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_min__type:number\" class=\"m\">Output min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_max__type:number\" class=\"m\">Output max (defaults to 100)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.round__type:checkbox\">Round output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cikxlfe14d": "<script total>\n\n\texports.name = 'Stopwatch';\n\texports.group = 'Stats';\n\texports.version = '3';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Stopwatch', delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Counter' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar max = 9;\n\t\tvar results = [];\n\t\tvar timeout;\n\t\tvar count = 0;\n\t\tvar ts;\n\n\t\tvar flush = function() {\n\t\t\tvar diff = Date.now() - ts;\n\t\t\ttimeout = null;\n\t\t\tif (results.unshift({ date: new Date(), duration: (diff / 1000).floor(3), count: count }) > max)\n\t\t\t\tresults.pop();\n\t\t\tcount = 0;\n\t\t\tinstance.status(results, 1000);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\t$.destroy();\n\n\t\t\tif (timeout)\n\t\t\t\tclearTimeout(timeout);\n\t\t\telse\n\t\t\t\tts = Date.now();\n\n\t\t\tcount++;\n\t\t\ttimeout = setTimeout(flush, config.delay);\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\t\t\tresults = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tresults = [];\n\t\t\tinstance.status(results);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\tif (results.length)\n\t\t\t\tresults = [];\n\n\t\t\tcount = 0;\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; width: 220px; }\n\t.CLASS .result { height: 22px; font-size: 11px; border-top: 1px solid #E0E0E0; line-height: 22px; }\n\t.CLASS .result .ts { margin-right: 100px; }\n\t.CLASS .result .duration { float: right; width: 100px; text-align: right; }\n\t.ui-dark .CLASS .result { border-top-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-8 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1;align:1;ricon:!ms\">Idle time delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component runs a simple stopwatch for incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button></div>\n\t\t<div data-bind=\"STATUS__template__show:value && value.length\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ foreach m in value }}\n\t\t\t\t<div class=\"result\">\n\t\t\t\t\t<span class=\"duration\">{{ m.duration | format(3) }} sec</span>\n\t\t\t\t\t<div class=\"ts\" title=\"{{ m.date | format('[ts]') }}\">{{ m.date | format('[time]') }} ({{ m.count }})</div>\n\t\t\t\t</div>\n\t\t\t\t{{ end }}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cilkhc268b": "<script total>\n\n\texports.name = 'Duration';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = {};\n\n\t\tstats.min = null;\n\t\tstats.max = null;\n\t\tstats.avg = 0;\n\t\tstats.last = 0;\n\t\tstats.count = 0;\n\n\t\tinstance.trigger = function() {\n\t\t\tstats.min = null;\n\t\t\tstats.avg = 0;\n\t\t\tstats.max = null;\n\t\t\tstats.last = null;\n\t\t\tstats.count = 0;\n\t\t\tinstance.status(stats);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar duration = ((Date.now() - $.duration) / 1000).floor(3);\n\n\t\t\tif (stats.min === null || stats.min > duration)\n\t\t\t\tstats.min = duration;\n\n\t\t\tif (stats.max === null || stats.max < duration)\n\t\t\t\tstats.max = duration;\n\n\t\t\tstats.avg = ((stats.max + stats.min) / 2).floor(3);\n\t\t\tstats.last = duration;\n\t\t\tstats.count++;\n\n\t\t\tinstance.status(stats, 500);\n\t\t\t$.send('output', stats);\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component counts message duration. All values except `count` are defined in seconds.\n\n__Output__:\n\n```js\n{\n\tmin: Number,\n\tmax: Number,\n\tavg: Number,\n\tlast: Number,\n\tcount: Number\n}\n```\n</readme>\n\n<style>\n\t.CLASS .keyvalue > span { width: 60px; }\n\t.CLASS .keyvalue > div { margin-left: 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer style=\"padding:10px;width:180px\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<div data-bind=\"STATUS__template__.keyvalue\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Min</span>\n\t\t\t\t\t<div class=\"right\">{{ value.min | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Max</span>\n\t\t\t\t\t<div class=\"right\">{{ value.max | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Avg</span>\n\t\t\t\t\t<div class=\"right\">{{ value.avg | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Last</span>\n\t\t\t\t\t<div class=\"right\">{{ value.last | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Count</span>\n\t\t\t\t\t<div class=\"right b\">{{ value.count | format(0) | empty }}</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cim4f4e8f2": "<script total>\n\n\texports.id = 'dataset';\n\texports.name = 'CSV Dataset';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.config = { name: '', unit: '', icon: '', color: '', decimals: 2, type: 'daily', sum: 0 };\n\texports.inputs = [{ id: 'input', name: 'Value' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar uid = (instance.main.id + '_' + instance.id).makeid();\n\t\tvar filename_meta = PATH.private('dataset_' + uid + '.meta');\n\t\tvar filename_data = PATH.private('dataset_' + uid + '.csv');\n\t\tvar meta = {};\n\n\t\tvar updatestatus = function() {\n\t\t\tinstance.status({ id: uid, keys: meta.keys });\n\t\t};\n\n\t\tF.Fs.readFile(filename_meta, function(err, response) {\n\t\t\tmeta = response ? response.toString('utf8').parseJSON(true) : CLONE(config);\n\t\t\tif (!meta.keys)\n\t\t\t\tmeta.keys = {};\n\t\t\tmeta.id = uid;\n\t\t\tupdatestatus();\n\t\t\tF.Fs.lstat(filename_data, function(err) {\n\t\t\t\tif (err)\n\t\t\t\t\tF.Fs.appendFile(filename_data, 'key,value,min,max,sum,count,tshour,tsday,tsweek,tsmonth,tsyear\\n', NOOP);\n\t\t\t});\n\t\t});\n\n\t\tinstance.close = function(removed) {\n\t\t\tif (removed) {\n\t\t\t\tF.Fs.unlink(filename_meta, NOOP);\n\t\t\t\tF.Fs.unlink(filename_data, NOOP);\n\t\t\t\tdb = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.insert = function(data) {\n\n\t\t\tvar writer = null;\n\t\t\tvar write = false;\n\t\t\tvar key = data.key || data.id || 'Value';\n\n\t\t\tif (!meta.keys[key])\n\t\t\t\tmeta.keys[key] = {};\n\n\t\t\tvar tmp = meta.keys[key];\n\n\t\t\tif (tmp.count && config.type !== 'lastvalue' && config.type !== 'logger') {\n\t\t\t\tvar date = tmp.date;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'hourly':\n\t\t\t\t\t\twrite = date.getHours() !== NOW.getHours();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'daily':\n\t\t\t\t\t\twrite = date.getDate() !== NOW.getDate();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'monthly':\n\t\t\t\t\t\twrite = date.getMonth() !== NOW.getMonth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'weekly':\n\t\t\t\t\t\twrite = date.format('w') !== NOW.format('w');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'yearly':\n\t\t\t\t\t\twrite = date.getFullYear() !== NOW.getFullYear();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (write) {\n\t\t\t\twriter = {};\n\t\t\t\twriter.key = key;\n\t\t\t\twriter.value = tmp.value;\n\t\t\t\twriter.min = tmp.min;\n\t\t\t\twriter.max = tmp.max;\n\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\twriter.count = tmp.count;\n\t\t\t\twriter.date = tmp.date;\n\t\t\t}\n\n\t\t\ttmp.date = NOW;\n\t\t\ttmp.value = data.value;\n\n\t\t\tif (writer) {\n\n\t\t\t\ttmp.min = tmp.value;\n\t\t\t\ttmp.max = tmp.value;\n\t\t\t\ttmp.count = 0;\n\n\t\t\t\tif (config.sum) {\n\t\t\t\t\tif (config.sum === 1)\n\t\t\t\t\t\ttmp.sum = tmp.value;\n\t\t\t\t\telse\n\t\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif (tmp.min == null || tmp.value < tmp.min)\n\t\t\t\t\ttmp.min = tmp.value;\n\n\t\t\t\tif (tmp.max == null || tmp.value > tmp.max)\n\t\t\t\t\ttmp.max = tmp.value;\n\n\t\t\t\tif (config.sum)\n\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\n\t\t\t\tif (config.type === 'logger') {\n\t\t\t\t\twriter = {};\n\t\t\t\t\twriter.key = key;\n\t\t\t\t\twriter.value = tmp.value;\n\t\t\t\t\twriter.min = tmp.min;\n\t\t\t\t\twriter.max = tmp.max;\n\t\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\t\twriter.count = (tmp.count || 0) + 1;\n\t\t\t\t\twriter.date = tmp.date;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp.count = (tmp.count || 0) + 1;\n\n\t\t\tupdatestatus();\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\n\t\t\tif (!writer)\n\t\t\t\treturn;\n\n\t\t\tvar values = [];\n\n\t\t\t// 0 key\n\t\t\t// 1 value\n\t\t\t// 2 min\n\t\t\t// 3 max\n\t\t\t// 4 sum\n\t\t\t// 5 count\n\t\t\t// 6 tsh\n\t\t\t// 7 tsd\n\t\t\t// 8 tsw\n\t\t\t// 9 tsm\n\t\t\t// 10 tsy\n\n\t\t\tvar ts = writer.date.format('yyyyMMddHH');\n\n\t\t\tvalues.push(writer.key);\n\t\t\tvalues.push(writer.value + '');\n\t\t\tvalues.push((writer.min != null ? writer.min : '') + '');\n\t\t\tvalues.push((writer.max != null ? writer.max : '') + '');\n\t\t\tvalues.push((writer.sum != null ? writer.sum : '') + '');\n\t\t\tvalues.push((writer.count != null ? writer.count : '') + '');\n\t\t\tvalues.push(ts);\n\t\t\tvalues.push(ts.substring(0, 8));\n\t\t\tvalues.push(writer.date.format('yyyyww'));\n\t\t\tvalues.push(ts.substring(0, 6));\n\t\t\tvalues.push(ts.substring(0, 4));\n\n\t\t\tF.Fs.appendFile(filename_data, values.join(',') + '\\n', NOOP);\n\t\t};\n\n\t\tvar updatefile = function(fn) {\n\t\t\tF.Fs.readFile(filename_data, function(err, data) {\n\t\t\t\tvar lines = data.toString('utf8').split('\\n');\n\t\t\t\tfn(lines);\n\t\t\t\tF.Fs.writeFile(filename_data, lines.join('\\n'), NOOP);\n\t\t\t});\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'remove') {\n\t\t\t\t// msg.key\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines.splice(counter, 1);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (msg.type === 'rename') {\n\t\t\t\t// msg.key\n\t\t\t\t// msg.name\n\t\t\t\tmeta.keys[msg.name] = meta.keys[msg.key];\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines[counter] = msg.name + ',' + line.substring(key.length);\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar type = typeof(data);\n\n\t\t\tif (type === 'number')\n\t\t\t\tdata = { value: data };\n\n\t\t\tinstance.insert(CLONE(data));\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tCOPY(config, meta);\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS hr { margin: 10px 0; }\n\t.CLASS [contenteditable] { outline: 0 }\n\t.CLASS .padding { padding: 10px; font-size: 12px; }\n\t.CLASS .padding .meta { height: 16px; font-size: 11px; }\n\t.CLASS .padding .meta span { color: #888; margin-right: 5px; width: 30px; float: left; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:Dataset name\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:lastvalue|Last value only,logger|Logger,hourly|Hourly,daily|Daily,weekly|Weeekly,monthly|Monthly,yearly|Yearly;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.sum__dirsource:0|Disabled,1|Periodical sum,2|Total sum;type:number\">Calculate the sum</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.unit__align:1\">Unit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.decimals__align:1;type:number__2\">Decimals</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t</div>\n</settings>\n\n<readme>\nThe component stores data as CSV Dataset for e.g. Dashboard application. Dataset is stored in `/private/` path that is available with the help of the Flow access token.\n\nCSV file contains only processed values, which aren't closed and stored in the `.meta` file.\n\n```js\n{\n\tkey: String,    // optional, e.g. device_id | device_name\n\tvalue: Number   // measured value\n}\n```\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar laststatus;\n\n\t\texports.configure = function(config, isinit) {\n\t\t\tif (!isinit) {\n\t\t\t\texports.status(laststatus);\n\t\t\t\texports.rebind('status');\n\t\t\t}\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t\tif (status) {\n\t\t\t\tstatus.type = exports.config.type;\n\t\t\t\tfor (var key in status.keys)\n\t\t\t\t\tstatus.keys[key].unit = exports.config.unit;\n\t\t\t}\n\t\t};\n\n\t\texports.rename = function(meta, next) {\n\n\t\t\tvar id = ATTRD(meta.element);\n\t\t\tvar value = meta.value.replace(/\\\"|\\,/g, '');\n\n\t\t\tif (id !== value) {\n\t\t\t\tnext(false);\n\t\t\t\t// Due to \"enter\" key\n\t\t\t\tsetTimeout(ASETTER('approve/show', 'Are you sure you want to rename \"{0}\" to <b>\"{1}\"</b>?'.format(id, value), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\t\texports.trigger({ type: 'rename', key: id, name: value });\n\t\t\t\t\tnext(value);\n\t\t\t\t}), 200);\n\t\t\t} else\n\t\t\t\tnext(false);\n\n\t\t};\n\n\t\texports.click = function(el) {\n\t\t\tvar id = ATTRD(el);\n\t\t\tSETTER('approve/show', 'Are you sure you want to remove selected key <b>\"{0}\"</b>?'.format(id.encode()), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\texports.trigger({ type: 'remove', key: id });\n\t\t\t});\n\t\t};\n\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"padding\">\n\t\t\t<div data-bind=\"CONFIG__template\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<span class=\"badge badge-medium badge-color mr5\">{{ value.type }}</span> {{ if value.icon }}<i class=\"{{ value.icon }} mr5\"></i>{{ fi }}<b>{{ value.name }}</b>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div data-bind=\"STATUS__template__show\" class=\"keys hidden\">\n\t\t\t\t<script type=\"text/html\">\n\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t\t<div class=\"meta mt5\">\n\t\t\t\t\t\t\t<span>Meta:</span><div>dataset_{{ value.id }}.meta</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ if value.type !== 'lastvalue' }}\n\t\t\t\t\t\t<div class=\"meta\">\n\t\t\t\t\t\t\t<span>Data:</span><div>dataset_{{ value.id }}.csv</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ fi }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t{{ foreach m in value.keys }}\n\t\t\t\t\t\t<div class=\"keyvalue small\" data-id=\"{{ m.key }}\">\n\t\t\t\t\t\t\t<span><i class=\"fa fa-trash-alt red clickable\"></i><b class=\"edit\" data-edit=\"required:1;offsetWidth:150;exec:TOUCH.rename\" data-id=\"{{ m.key }}\">{{ m.key }}</b></span>\n\t\t\t\t\t\t\t<div class=\"right\">{{ m.value.value }} {{ m.value.unit }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t\t</div>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"cimm26e413": "<script total>\n\n\texports.name = 'Data parser';\n\texports.icon = 'fa fa-compress-arrows-alt';\n\texports.group = 'Transformations';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { type: '1', convert: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar streamer = null;\n\t\tvar reg = /,|;/;\n\n\t\tvar newmessage = function(data) {\n\n\t\t\tif (config.convert) {\n\t\t\t\tif (config.type === '1') {\n\t\t\t\t\tvar m = data.match(reg);\n\t\t\t\t\tdata = data.parseCSV(m ? m[0] : ',');\n\t\t\t\t} else\n\t\t\t\t\tdata = data.parseXML(true);\n\t\t\t}\n\n\t\t\tinstance.newmessage(data).send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (typeof(data) === 'string')\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\n\t\t\t$.destroy();\n\t\t\tdata && streamer && streamer(data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase '1':\n\t\t\t\t\tstreamer = U.streamer('\\n', newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstreamer = U.streamer(config.beg, config.end, newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstreamer = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can parse newline data or begin/end phrases in the buffer or string. In addition, it can help with parsing XML or CSV files.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"choose__?.type__selector:div\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\">\n\t\t\t\t<i class=\"fa fa-level-down-alt fa-rotate-90\"></i>\n\t\t\t\t<span>CSV</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\">\n\t\t\t\t<i class=\"fa fa-code\"></i>\n\t\t\t\t<span>XML</span>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.convert__type:checkbox\">Convert parsed value to the object</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div data-bind=\"?.type__show:value==='2'\" class=\"padding hidden\">\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"fa fa-cog\"></i>Advanced settings</label>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.beg__required:1;placeholder:&lt;PRODUCT&gt;\">Begin phrase</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.end__required:1;placeholder:&lt;/PRODUCT&gt;\">End phrase</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; text-align: center; }\n\t.CLASS footer span { font-family: var(--monospace); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div>{{ if value.type === '1' }}New line{{ else }}<span>{{ value.beg }}</span> - <span>{{ value.end }}</span>{{ fi }}</div>\n\t\t</script>\n\t</footer>\n</body>",
			"cin5ifb433": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'fab fa-wpforms';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\treturn val.parseDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Model name</div>\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"far fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"far fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name > div:first-child { font-weight: bold; outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.04); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), name: 'name', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 1) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"cink02be8f": "<script total>\n\n\texports.name = 'RSS reader';\n\texports.group = 'Transformations';\n\texports.version = '1';\n\texports.icon = 'fa fa-rss';\n\texports.author = 'Total.js';\n\texports.config = { url: '', type: 'a' };\n\texports.inputs = [{ id: 'input', name: 'Trigger' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\n\t\tvar cache = [];\n\t\tvar cachelimit = 50;\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tif (!config.url)\n\t\t\t\treturn;\n\n\t\t\tvar opt = {};\n\t\t\topt.method = 'GET';\n\t\t\topt.custom = true;\n\t\t\topt.url = config.url;\n\n\t\t\tvar output = config.type === 'a' || config.type === 'b' ? [] : null;\n\n\t\t\tREQUEST(opt, function(err, response) {\n\t\t\t\tresponse.stream.on('data', U.streamer('<item>', '</item>', function(xml) {\n\t\t\t\t\tvar item = xml.parseXML(true);\n\t\t\t\t\tif (item) {\n\n\t\t\t\t\t\tvar obj = {};\n\t\t\t\t\t\tobj.title = item.item_title;\n\t\t\t\t\t\tobj.id = obj.title.makeid();\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'd') {\n\t\t\t\t\t\t\tif (cache.indexOf(obj.id) !== -1)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tif (cache.unshift(obj.id) > cachelimit)\n\t\t\t\t\t\t\t\tcache.pop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj.description = item.item_description;\n\t\t\t\t\t\tobj.link = item.item_link;\n\n\t\t\t\t\t\tif (item.item_image_url)\n\t\t\t\t\t\t\tobj.image = item.item_image_url;\n\t\t\t\t\t\telse if (item['item_enclosure__'])\n\t\t\t\t\t\t\tobj.image = item['item_enclosure__'].url;\n\n\t\t\t\t\t\tvar date = item.item_pubDate || item.item_pubdate;\n\t\t\t\t\t\tif (date)\n\t\t\t\t\t\t\tobj.date = new Date(date);\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'c')\n\t\t\t\t\t\t\tinstance.newmessage().send('output', obj);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\toutput.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tresponse.stream.on('end', function() {\n\t\t\t\t\toutput && output.length && instance.newmessage().send('output', output);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.trigger();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS footer { padding: 5px 10px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__type:url;required:1\">URL address</div>\n\t\t<div class=\"help m\">Example: <code>https://blog.totaljs.com/rss/</code></div>\n\t\t<div data---=\"input__?.type__dirsource:a|Send all items,b|Send only new items,c|Send every item separately,d|Send only new items separately\">Output</div>\n\t</div>\n</settings>\n\n<readme>\nThe component downloads every item from the RSS source. A message on to this `Trigger` input starts downloading RSS data.\n\n__Example__:\n```js\n{\n\ttitle: String,\n\tdescription: String,\n\tlink: String,\n\timage: String, // optional\n\tdate: Date // optional\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Download</button>\n\t</div>\n\t<footer data-bind=\"CONFIG.url__text__show\"></footer>\n</body>",
			"cip1k9ce15": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"cipimebbe7": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cipzv710a6": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ciqgwb764e": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"cirsg24067": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Total.js';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ciscz7ac32": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"civadc808d": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tif (typeof(data.data) === 'object') {\n\t\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\t\tnosql.insert(data.data).callback(function(err) {\n\t\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\t$.send('output', { success: false, error: 'invalid data' });\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tif (!filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cj1id7ec88": "<script total>\n\n\texports.name = 'SQLite3';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.npm = ['better-sqlite3'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst Database = require('better-sqlite3');\n\t\tvar db, file;\n\t\tvar fns = ['run', 'get', 'all', 'exec'];\n\n\t\tinstance.message = function($) {\n\t\t\tif (!db) {\n\t\t\t\t$.send('error', { error: 'db not ready' });\n\t\t\t\treturn instance.throw('SQLite3 not ready');\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.prepare || !data.fn) {\n\t\t\t\tinstance.throw('No `prepare` or `op` provided');\n\t\t\t\treturn $.send('error', { error: 'invalid input data' });;\n\t\t\t}\n\n\t\t\tif (fns.indexOf(data.fn) < 0) {\n\t\t\t\tinstance.throw('Unsupported function: ' + data.fn);\n\t\t\t\treturn $.send('error', { error: 'unsupported function' });\n\t\t\t}\n\n\t\t\tif (data.fn === 'exec') {\n\t\t\t\tlet result = db.exec(data.prepare);\n\t\t\t\treturn $.send('output2', result);\n\t\t\t}\n\n\t\t\tlet stmt = db.prepare(data.prepare);\n\t\t\tlet result = data.data ? stmt[data.fn](data.data) : stmt[data.fn]();\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tlet newfile = PATH.databases(config.filename || `${instance.id}.sqlite`);\n\t\t\tif (file === newfile)\n\t\t\t\treturn;\n\n\t\t\tfile = newfile;\n\n\t\t\tlet tmp = exports.DBS[file];\n\t\t\tif (tmp) {\n\t\t\t\tdb = tmp.db;\n\t\t\t\ttmp.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdb = new Database(file, { verbose: console.log });\n\t\t\texports.DBS[file] = {\n\t\t\t\tdb,\n\t\t\t\tcount: 1\n\t\t\t};\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (file && db) {\n\t\t\t\texports.DBS[file].count--;\n\t\t\t\tif (exports.DBS[file].count === 0) {\n\t\t\t\t\tdb && db.close();\n\t\t\t\t\tdb = null;\n\t\t\t\t\tdelete exports.DBS[file];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nSQLite3 [Documentation](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md)\n\n```js\n{\n\t// query\n\tprepare: 'INSERT INTO cats (name, age) VALUES (?, ?)',\n\n\t// function name: run, get, all, exec\n\tfn: 'run',\n\n\t// data, optional\n\tdata: ['Joey', 2] // string/number or array\n\n}\n```\n\nFunctions:\n\t- [run](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#runbindparameters---object)\n\t- [get](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#getbindparameters---row)\n\t- [all](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#allbindparameters---array-of-rows)\n\t- [exec](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#execstring---this)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.filename__placeholder:mydatabase\">Filename (optional)</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cjordb9d5c": "<script total>\n\n\texports.id = 'rabbitmqconsume';\n\texports.name = 'RabbitMQ Consume';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar channel, Manager, ManagerState;\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tinstance.status('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tinstance.status('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinstance.status(ManagerState.title, 1000);\n\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel instance.\n\t\t\t\t\tvar qname = instance.replace(config.queuename);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tchan.assertQueue(qname, { consumerTag: 'consumer-' + qname }),\n\t\t\t\t\t\tchan.consume(qname, function(msg) {\n\t\t\t\t\t\t\tif (msg !== null) {\n\t\t\t\t\t\t\t\tvar data = {\n\t\t\t\t\t\t\t\t\tqueuename: qname,\n\t\t\t\t\t\t\t\t\tpayload: msg.content.toString(),\n\t\t\t\t\t\t\t\t\tmsg: { fields: msg.fields }\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tinstance.send('output', data);\n\t\t\t\t\t\t\t\tchan.ack(msg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t]);\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tconsole.log(config.manager, man);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\tON('configure_rabbitmqconsume', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cjoepce58d": "<script total>\n\n\texports.id = 'rabbitmqconnection';\n\texports.name = 'RabbitMQ Connection';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [];\n\texports.flags = ['rabbitmq'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\t\tvar Manager;\n\t\tvar states = { connected: 'Connected', disconnected: 'Disconnected', connecting: 'Connecting ...', connectionfailed: 'Connection failed' };\n\n\t\tinstance.state = { id: 'disconnected', title: states.disconnected };\n\t\tvar setState = (state) => {\n\t\t\tinstance.state = { id: state, title: states[state] };\n\n\t\t\tinstance.status(states[state], 1000);\n\t\t\tnotifyDeps(state, states[state]);\n\t\t};\n\n\t\tvar notifyDeps = (type) => {\n\t\t\tvar instances = instance.main.instances().filter(i => i.module.flags && i.module.flags.includes('rabbitmq-dep') > -1 && i.config.manager === instance.id);\n\t\t\tfor (let com of instances)\n\t\t\t\tcom.configure(type);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.close(true);\n\n\t\t\tif (!config.hostname) // queue name is optional in some cases, not supported here\n\t\t\t\treturn instance.status('Not configured');\n\n\t\t\tsetState('connecting');\n\t\t\tinstance.status(states.connecting);\n\n\t\t\tconfig.port = config.port || 5672;\n\t\t\tconfig.vhost = config.vhost || '/';\n\t\t\tif (config.vhost[0] !== '/')\n\t\t\t\tconfig.vhost = '/' + config.vhost;\n\n\t\t\tvar credentials = '';\n\t\t\tif (config.username)\n\t\t\t\tcredentials += config.username;\n\t\t\tif (config.password)\n\t\t\t\tcredentials += ':' + config.password;\n\t\t\tif (credentials)\n\t\t\t\tcredentials += '@';\n\n\t\t\tvar conString = `${config.protocol}://${credentials}${config.hostname}:${config.port}${config.vhost}`;\n\n\t\t\t// Create a new connection manager\n\t\t\tManager = amqp.connect([conString]);\n\t\t\tManager.on('connect', function(){\n\t\t\t\tinstance.Manager = Manager;\n\t\t\t\tsetState('connected');\n\t\t\t});\n\n\t\t\tManager.on('connectFailed', function(){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('connectionfailed');\n\t\t\t\t// notifyDeps('connectfailed'); // this does not happen after connect so the deps should be disconnected\n\t\t\t});\n\n\t\t\tManager.on('disconnect', function(e){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('disconnected');\n\t\t\t});\n\n\t\t\tManager.on('error', function(e){\n\t\t\t\tconsole.log('Rabbit Error', e);\n\t\t\t\tif (!Manager.isConnected()) {\n\t\t\t\t\tsetState('disconnected');\n\t\t\t\t\tinstance.Manager = null;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(silent) {\n\t\t\tManager && Manager.close();\n\t\t\tinstance.Manager = null;\n\t\t\t!silent && notifyDeps('removed');\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.hostname__placeholder:localhost;required:1\" class=\"m\">Hostname or IP address</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.port__type:number;placeholder:5672__5672\" class=\"m\">Port (default: 5672)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.protocol__dirsource:amqp|amqp,amqps|amqps__'amqp'\" class=\"m\">Protocol</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.vhost__placeholder:/\" class=\"m\">Virtual host</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.username\" class=\"m\">Username</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.password__type:password\" class=\"m\">Password</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__show__text\"></footer>\n</body>",
			"cjphx755c8": "<script total>\n\n\texports.id = 'rabbitmqpublish';\n\texports.name = 'RabbitMQ Publish';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\n\t\tvar Manager, channel, ManagerState;\n\t\tvar stats = { ack: 0, nack: 0 };\n\n\t\t// initialy the stack is paused\n\t\tvar stack = new Stack(instance.id, function(data, next){\n\t\t\tif (!channel) {\n\t\t\t\treturn next(false);\n\t\t\t}\n\n\t\t\tchannel\n\t\t\t\t.sendToQueue(config.queuename, Buffer.from(data))\n\t\t\t\t.then(function () {\n\t\t\t\t\tnext(true);\n\t\t\t\t\tif (stats.ack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.ack = 0;\n\t\t\t\t\tstats.ack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tnext(false);\n\t\t\t\t\tif (stats.nack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.nack = 0;\n\t\t\t\t\tstats.nack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t});\n\t\t});\n\n\t\tinstance.message = function($) {\n\t\t\tvar d = $.data;\n\t\t\tvar type = typeof(d);\n\t\t\tif (type !== 'buffer' && type !== 'string')\n\t\t\t\td = JSON.stringify(d);\n\n\t\t\tstack.push(d);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tfunction setStatus(str, timeout) {\n\t\t\tinstance.status({\n\t\t\t\tstate: str || ManagerState.title,\n\t\t\t\tstats\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tsetStatus('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\tsetStatus('Disconnected', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tsetStatus('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetStatus(ManagerState.title, 1000);\n\n\t\t\tchannel && channel.close && channel.close();\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\t// Ask the connection manager for a ChannelWrapper.  Specify a setup function to\n\t\t\t// run every time we reconnect to the broker.\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel wrapper instance.\n\t\t\t\t\tsetTimeout(_ => { stack && stack.next(); }, 1000);\n\t\t\t\t\treturn chan.assertQueue(config.queuename, { durable: true });\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tstack.destroy();\n\t\t\tstack = null;\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction Stack(id, callback) {\n\t\t\tvar self = this;\n\t\t\tself.dbname = 'amqp_stack_' + id;\n\t\t\tself.index = 0;\n\t\t\tself.callback = callback;\n\t\t\tself.busy = false;\n\t\t\tself.db = NOSQL(self.dbname);\n\t\t\t//NOSQLMEMORY(self.dbname);\n\t\t};\n\n\t\tStack.prototype.destroy = function() {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.busy = true;\n\t\t\tthis.callback = () => {};\n\t\t\tthis.data = null;\n\t\t};\n\n\t\tStack.prototype.next = function() {\n\t\t\tvar self = this;\n\t\t\tif (self.busy)\n\t\t\t\treturn;\n\t\t\tself.busy = true;\n\t\t\tif (self.timeout) {\n\t\t\t\tclearTimeout(self.timeout);\n\t\t\t\tself.timeout = null;\n\t\t\t}\n\n\t\t\tself.db.find().first().callback(function(err, data){\n\t\t\t\tif (data) {\n\t\t\t\t\tvar id = data.id;\n\t\t\t\t\tvar data = data.data;\n\t\t\t\t\tself.callback(data, function(ok){\n\t\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t\tself.db.remove().where('id', id).callback(function(){\n\t\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\tself.timeout = setTimeout(function(){\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\tself.busy = false;\n\t\t\t});\n\t\t};\n\n\t\tStack.prototype.push = function(data) {\n\t\t\tthis.db.insert({ id: this.index++, data: data }).callback((err, result, meta) => {\n\t\t\t\tthis.next();\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; }\n</style>\n\n<script>\n\tON('configure_rabbitmqpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.state__text\"></div>\n\t\t<div>Ack: <span data-bind=\"STATUS.stats.ack__text\"></span></div>\n\t\t<div>Nack: <span data-bind=\"STATUS.stats.nack__text\"></span></div>\n\t</footer>\n</body>",
			"cjue1ca74d": "<script total>\n\n\texports.name = 'Split';\n\texports.icon = 'fa fa-random';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? U.get(config.path, $.data) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"meno\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"meno\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"meno\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"meno\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"meno\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"meno\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
			"ck5id8291c": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8ij9c0cd": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8zl7724b": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '3';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck9jk93551": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"c28uo6c48a": "<script total>\r\n\texports.name = 'RPIgpio';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['rpi-gpio'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar RPI = require('rpi-gpio');\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bit = $.data;\r\n\r\n\t\t\tif (config.read_write && config.gpiokey) {\r\n\r\n\t\t\t\tswitch (config.read_write) {\r\n\t\t\t\t\tcase 'write':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tcase 'read':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$.destroy();\r\n\r\n\t\t};\r\n\t};\r\n</script>\r\n\r\n<readme>\r\n# GPIO\r\n\r\n__Write mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the component to set the GPIO to HIGH\r\n- Send false to the component to set the GPIO to LOW\r\n\r\n__Read mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the node so read the state of the gpio\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\r\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\r\n\t</header>\r\n</body>",
			"c2pro15472": "<script total>\r\n\texports.name = 'RPIi2cWrite';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar stringtonumber = c => parseInt(c);\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet address, register, bytes;\r\n\r\n\t\t\ttry {\r\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\r\n\t\t\t} catch (err) {\r\n\t\t\t\t$.send('output', err + '');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Send msg\r\n\t\t\tlet i2c1 = I2C.openSync(1);\r\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\r\n\t\t\t$.send('output', { data: bytes });\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Write\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `bytes`: The bytes which will be written\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.address\">Address</div>\r\n\t\t<div data---=\"input__?.register\">Register</div>\r\n\t\t<div data---=\"input__?.bytes\">Data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\r\n\t</header>\r\n</body>",
			"c2qxlf79f2": "<script total>\r\n\texports.name = 'RPIuartDevices';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tvar SerialPort = new require('serialport');\r\n\t\tinstance.trigger = async function() {\r\n\t\t\tawait SerialPort.list().then(function(ports) {\r\n\t\t\t\tinstance.send('output', ports);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# UART\r\n\r\nGet all devices which are possible to send\r\n</readme>\r\n\r\n<script>\r\n\tFUNC.frpiuartdevices_exec = function(el) {\r\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\r\n\t</div>\r\n</body>",
			"c2qgscea9": "<script total>\r\n\texports.name = 'RPIi2cRead';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar BCD2D = function(Wert) {\r\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\r\n\t\t};\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar i2c1 = I2C.openSync(1);\r\n\r\n\t\t\tif (config.presensor) {\r\n\t\t\t\tswitch (config.sensor) {\r\n\t\t\t\t\tcase 'DS1307':\r\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\r\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\r\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t$.destroy();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\r\n\r\n\t\t\t\t//send msg\r\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\r\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\r\n\t\t\t\t$.send('output', rbuf.toString());\r\n\t\t\t}\r\n\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Read\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `readLength`: The length of how many bits will be read\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\r\n\t\t</div>\r\n\t\t<hr />\r\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\r\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\r\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\r\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\r\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\r\n\t</header>\r\n</body>",
			"c2rhca784d": "<script total>\r\n\texports.name = 'RPIuart';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = { port:'/dev/ttyUSB0' };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar SerialPort = require('serialport')\r\n\t\tvar sp;\r\n\r\n\t\tinstance.openConnectionUart = function(){\r\n\r\n\t\t\tsp = new SerialPort(config.port, {\r\n\t\t\t\tbaudRate: parseInt(config.baudrate),\r\n\t\t\t\tdataBits: parseInt(config.databits),\r\n\t\t\t\tparity: config.parity,\r\n\t\t\t\tstopBits: parseInt(config.stopbits),\r\n\t\t\t\tflowControl: false,\r\n\t\t\t\tautoOpen: false\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('open', function() {\r\n\t\t\t\tinstance.status({ open: true });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('close', function() {\r\n\t\t\t\tinstance.status({ open: false });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\r\n\t\t\t\tinstance.send('output', data);\r\n\t\t\t});\r\n\r\n\t\t\tsp.open(function (err) {\r\n\t\t\t\tif (err)\r\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bytes = $.data;\r\n\r\n\t\t\t//check if sp is open\r\n\t\t\tif (!sp)\r\n\t\t\t\tinstance.openConnectionUart();\r\n\r\n\t\t\t//send msg\r\n\t\t\tsp.write(bytes);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.close = function(){\r\n\t\t\tsp && sp.close(NOOP);\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\r\n</style>\r\n\r\n<readme>\r\n# UART\r\n\r\n- send a string directly to a port\r\n- when device from a port sends data to the host, it will be send to the output of the component\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\r\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200|115200,128000|128000;required:1\">Baudrate</div>\r\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\r\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\r\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\r\n\t\t\t{{ if value.open }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\r\n\t\t\t{{ else }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\r\n\t\t\t{{ fi }}\r\n\t\t</div>\r\n\t</footer>\r\n</body>",
			"c2ugtc105d": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Total.js';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cf8ga6bf53": "<script total>\n\n\texports.name = 'Throttle';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { limit: 1, delay: 0 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Outputs' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar pending = [];\n\t\tvar running = 0;\n\n\t\tvar check = function() {\n\t\t\tif (running < config.limit) {\n\n\t\t\t\tvar diff = config.limit - running;\n\t\t\t\tvar items = pending.splice(0, diff);\n\n\t\t\t\trunning += items.length;\n\n\t\t\t\tif (config.delay) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\t\titem.send('output');\n\t\t\t\t\t}, config.delay);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\titem.send('output');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinstance.status(pending.length, 500);\n\t\t};\n\n\t\tvar end = function() {\n\t\t\trunning--;\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.on('end', end);\n\t\t\tpending.push($);\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tvar item = pending.shift();\n\t\t\tif (item) {\n\t\t\t\trunning++;\n\t\t\t\titem.send('output');\n\t\t\t}\n\t\t\tcheck();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component sends only limited count of messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number\">Limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.delay__required:0;align:1;type:number;ricon:!ms\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"button exec\" data-exec=\"FUNC.trigger\">Send</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"coob8a3971": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'ACGDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cu343d9d6": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'ACGDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"il304cv4v": {
				"id": "il304cv4v",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"interval": 12000
				},
				"x": 4.005706787109375,
				"y": 627.98291015625,
				"component": "ciqgwb764e",
				"connections": {
					"output": [
						{
							"id": "il306l7ln",
							"index": "input"
						},
						{
							"id": "il345gixv",
							"index": "input"
						},
						{
							"id": "il34hy3gy",
							"index": "input"
						},
						{
							"id": "il38l8kac",
							"index": "input"
						},
						{
							"id": "il38nhuh9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Triggers",
					"name": "Timer",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il304z6bk": {
				"id": "il304z6bk",
				"config": {
					"repo": false,
					"data": true,
					"name": "Debug"
				},
				"x": 1777,
				"y": 302,
				"component": "ci6662d511",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Debug",
					"inputs": [
						{
							"id": "input",
							"name": "Log window"
						}
					]
				}
			},
			"il305osq5": {
				"id": "il305osq5",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_thematique_decouverte').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 475,
				"y": 343,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31auzem",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il306l7ln": {
				"id": "il306l7ln",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 240,
				"y": 296,
				"note": "thematique_decouverte",
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il305osq5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31auzem": {
				"id": "il31auzem",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_thematique_decouverte').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 700,
				"y": 366,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31cefls",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31cefls": {
				"id": "il31cefls",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 1006,
				"y": 401,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31e9qdk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31doouu": {
				"id": "il31doouu",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2786,
				"y": 284,
				"component": "ci2ol4a50c",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il31e9qdk": {
				"id": "il31e9qdk",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1238,
				"y": 398,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h3pxt",
							"index": "input"
						},
						{
							"id": "il3vr9lmg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h3pxt": {
				"id": "il31h3pxt",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','translate').callback(function(err,response) {\n\tdata.translateconfigs = response;\n\t$.send('output',data);\n})"
				},
				"x": 1506,
				"y": 234,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h85ev",
							"index": "input"
						},
						{
							"id": "il304z6bk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h85ev": {
				"id": "il31h85ev",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nvar configs = data.translateconfigs;\nopt.method = 'POST';\nopt.url = configs.baseurl+\"?\"+configs.value;\nopt.headers = configs.headers;\n\nopt.body = '[{\"Text\":\"'+data.title+\"||\"+data.description+'\"}]';\nopt.callback = function(err,response) {\n\n\tdata.translated = response.body.parseJSON(true)[0]['translations'][0]['text'];\n\t$.send('output', data);\n}\n\nREQUEST(opt);"
				},
				"x": 1756,
				"y": 178,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31j3ew8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31j3ew8": {
				"id": "il31j3ew8",
				"config": {
					"outputs": 1,
					"code": "var doc = { id : 'actualite_thematique_decouverte'};\ndoc.original = data;\ndoc.date = F.datetime.format('HH:mm');\n$.send('output',doc);"
				},
				"x": 2062,
				"y": 269,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31ku6kw",
							"index": "input"
						},
						{
							"id": "il31doouu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31ku6kw": {
				"id": "il31ku6kw",
				"config": {
					"template": "<h3>Hello World!</h3>"
				},
				"x": 2416,
				"y": 274,
				"component": "cu343d9d6",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il32xz6p1": {
				"id": "il32xz6p1",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2065,
				"y": 468,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il345fxjo": {
				"id": "il345fxjo",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_thematique_economie').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 471,
				"y": 505,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345jzxv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345gixv": {
				"id": "il345gixv",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 240,
				"y": 449,
				"note": "thematique_economie",
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345fxjo",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345jzxv": {
				"id": "il345jzxv",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_thematique_economie').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 699,
				"y": 534,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345ltgb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345ltgb": {
				"id": "il345ltgb",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 968.8635864257812,
				"y": 543.8636169433594,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345n14s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345n14s": {
				"id": "il345n14s",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1216,
				"y": 545,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3wr4sb5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345rlqq": {
				"id": "il345rlqq",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2691,
				"y": 576,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il34hy3gy": {
				"id": "il34hy3gy",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 243,
				"y": 606,
				"note": "thematique_sport",
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i3g9e",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i3g9e": {
				"id": "il34i3g9e",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_thematique_sport').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 475,
				"y": 677,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i43j5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i43j5": {
				"id": "il34i43j5",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_thematique_sport').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 701,
				"y": 680,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i4n1l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i4n1l": {
				"id": "il34i4n1l",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\nREQUEST(opt);"
				},
				"x": 944,
				"y": 698,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i5ak9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i5ak9": {
				"id": "il34i5ak9",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1193,
				"y": 706,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3wrn6zp",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i770i": {
				"id": "il34i770i",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2089.96533203125,
				"y": 720.9723205566406,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il38hy8s4": {
				"id": "il38hy8s4",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2079.9307861328125,
				"y": 601.9444580078125,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il38l8kac": {
				"id": "il38l8kac",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 246,
				"y": 750,
				"note": "thematique_culture",
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lmcrg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lmcrg": {
				"id": "il38lmcrg",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_thematique_culture').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 488,
				"y": 825,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lnt4b",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lnt4b": {
				"id": "il38lnt4b",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_thematique_culture').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 715,
				"y": 845,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lobu4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lobu4": {
				"id": "il38lobu4",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 951,
				"y": 853,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lorsj",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lorsj": {
				"id": "il38lorsj",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1208,
				"y": 842,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3wroo06",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lpnms": {
				"id": "il38lpnms",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2097.70849609375,
				"y": 860.4514770507812,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il38nhuh9": {
				"id": "il38nhuh9",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 251,
				"y": 902,
				"note": "thematique_planete",
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38o3p25",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38o3p25": {
				"id": "il38o3p25",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_thematique_planete').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 508,
				"y": 987,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38ob1r9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38ob1r9": {
				"id": "il38ob1r9",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_thematique_planete').callback(function(err,response) {\n\t$.send('output',response);\n});"
				},
				"x": 746,
				"y": 996,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38obor9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38obor9": {
				"id": "il38obor9",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 983.84375,
				"y": 1024.90625,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38od5fh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38od02l": {
				"id": "il38od02l",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2108.1597900390625,
				"y": 1005.2083740234375,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il38od5fh": {
				"id": "il38od5fh",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1238.875,
				"y": 1021.875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3wrpzu2",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3a2a2fa": {
				"id": "il3a2a2fa",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1169.8863525390625,
				"y": 1291.9032592773438,
				"component": "ci2ol4a50c",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3a2e27o": {
				"id": "il3a2e27o",
				"config": {
					"random": true,
					"type": "number",
					"data": "",
					"interval": 5000
				},
				"x": 499.9431457519531,
				"y": 1200.8805541992188,
				"component": "ciqgwb764e",
				"connections": {
					"output": [
						{
							"id": "il3a2ieh1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Triggers",
					"name": "Timer",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3a2ieh1": {
				"id": "il3a2ieh1",
				"config": {
					"outputs": 1,
					"code": "var cp = require('child_process');\n\ncp.exec('pm2 logs', function (err, stdout, stderr) {\n\t$.send('output', stderr)\n\n  if (err) {\n\t$.send('output', stderr)\n\n    console.error(`exec error: ${err}`);\n    return;\n  }\n$.send('output', stdout);\n  //console.log(`Number of files ${stdout}`);\n});"
				},
				"x": 818,
				"y": 1217,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3a2a2fa",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vr9lmg": {
				"id": "il3vr9lmg",
				"config": {
					"template": "***ACTUALITE THEMATIQUE DECOUVERTE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1537,
				"y": 424,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3vr9sre",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vr9sre": {
				"id": "il3vr9sre",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1803,
				"y": 449,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il32xz6p1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3wr4sb5": {
				"id": "il3wr4sb5",
				"config": {
					"template": "***ACTUALITE THEMATIQUE ECONOMIE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1534.9654541015625,
				"y": 567.9861450195312,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3wr51w9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3wr51w9": {
				"id": "il3wr51w9",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1793.95849609375,
				"y": 589.96533203125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38hy8s4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3wrn6zp": {
				"id": "il3wrn6zp",
				"config": {
					"template": "***ACTUALITE THEMATIQUE SPORT @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1511.9097290039062,
				"y": 719.9653625488281,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3wrne3n",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3wrne3n": {
				"id": "il3wrne3n",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1779.8958740234375,
				"y": 727.916748046875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i770i",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3wroo06": {
				"id": "il3wroo06",
				"config": {
					"template": "***ACTUALITE THEMATIQUE CULTURE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1511.8057861328125,
				"y": 846.9097900390625,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3wroul5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3wroul5": {
				"id": "il3wroul5",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1781.7711181640625,
				"y": 847.8125610351562,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lpnms",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"paused": {
				"input__il306l7ln__input": 1,
				"input__il345gixv__input": 1,
				"input__il34hy3gy__input": 1,
				"input__il38l8kac__input": 1,
				"input__il38nhuh9__input": 1,
				"output__il304cv4v__output": 1
			},
			"il3wrpzu2": {
				"id": "il3wrpzu2",
				"config": {
					"template": "***ACTUALITE THEMATIQUE PLANETE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1498.6112060546875,
				"y": 1028.8195190429688,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3wrqkmp",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3wrqkmp": {
				"id": "il3wrqkmp",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1804.5140380859375,
				"y": 1029.6181640625,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38od02l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://localhost:8000",
		"dtcreated": "2022-05-16T14:02:57.953Z",
		"size": 305855,
		"variables2": {}
	},
	"fptmi001aj41d": {
		"paused": false,
		"id": "fptmi001aj41d",
		"reference": "",
		"author": "",
		"group": "API",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "API",
		"components": {
			"c106716f24": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"c1rrf9aa9f": "<script total>\n\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true, name: 'Debug' };\n\texports.inputs = [{ id: 'input', name: 'Log window' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status({ name: config.name, date: new Date(), data: output });\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name\" class=\"m\">Name</div>\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"far fa-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<div data---=\"box__common.$debug__if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:fa fa-bug;zindex:5\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"fa fa-trash-alt\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></div>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"fa fa-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(data.data, '\\t'))));\n\t\t};\n\n\t});\n\n</script>",
			"c1vmk46881": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { text: 'Comment' };\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS .content { display: none; min-height: 0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; border-top: 0 !important; }\n</style>\n\n<body>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"c39n457e88": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"c3msmf099e": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"c3n5va35a8": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"c3npm1f62e": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"c3o13b038c": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"c752y3c0f7": "<script total>\n\n\texports.name = 'Split';\n\texports.icon = 'fa fa-random';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? U.get(config.path, $.data) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"meno\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"meno\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"meno\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"meno\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"meno\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"meno\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
			"cbn4v580e5": "<script total>\n\n\texports.name = 'Code';\n\texports.group = 'ACGDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cd65qc0e42": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.make = function(instance, config) {\n\t\tvar prev = null;\n\t\tinstance.configure = function() {\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\t\t\tif (config.url && config.method) {\n\t\t\t\tvar flags = [config.timeout];\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"cdbqk24c6d": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\" class=\"code\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</footer>\n</body>",
			"cifpi82307": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tcompiled = {};\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"ckmpjdbcab": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tif (typeof(data.data) === 'object') {\n\t\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\t\tnosql.insert(data.data).callback(function(err) {\n\t\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\t$.send('output', { success: false, error: 'invalid data' });\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tif (!filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cncosc2b3e": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cw3eh17f29": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"cd0aze16db": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>"
		},
		"design": {
			"il3aa883c": {
				"id": "il3aa883c",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 751.9033203125,
				"y": 307.897705078125,
				"component": "c39n457e88",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3nj1drw": {
				"id": "il3nj1drw",
				"config": {
					"url": "/apiconfigs/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": -16,
				"y": 215.8125,
				"component": "c3o13b038c",
				"connections": {
					"output": [
						{
							"id": "il3nkktgo",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3nkktgo": {
				"id": "il3nkktgo",
				"config": {
					"collection": "apiconfigs",
					"method": "query"
				},
				"x": 434,
				"y": 100,
				"component": "ckmpjdbcab",
				"connections": {
					"output": [
						{
							"id": "il3aa883c",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3o8l4zt": {
				"id": "il3o8l4zt",
				"config": {
					"url": "/apiconfigs/update/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "custom"
				},
				"x": -31.61932373046875,
				"y": 498.4090270996094,
				"component": "c3o13b038c",
				"connections": {
					"output": [
						{
							"id": "il3o8ld7g",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3o8ld7g": {
				"id": "il3o8ld7g",
				"config": {
					"outputs": 1,
					"code": "var body = data.query.body.parseJSON(true);\nNOSQL('apiconfigs').modify(body).where('name',body.name).callback(function(err,response,dt, dt2) {\n\tif(response){\n\t\t$.send('output',body);\n\t}\n})"
				},
				"x": 386.1363525390625,
				"y": 525.3124694824219,
				"component": "cbn4v580e5",
				"connections": {
					"output": [
						{
							"id": "il3o8to0u",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3o8to0u": {
				"id": "il3o8to0u",
				"config": {
					"repo": false,
					"data": true,
					"name": "Debug"
				},
				"x": 789.9998779296875,
				"y": 548.8351745605469,
				"component": "c1rrf9aa9f",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Debug",
					"inputs": [
						{
							"id": "input",
							"name": "Log window"
						}
					]
				}
			},
			"il3o8x8j2": {
				"id": "il3o8x8j2",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 7.613616943359375,
				"y": 792.130615234375,
				"component": "c3n5va35a8",
				"connections": {
					"output": [
						{
							"id": "il3o9ydvk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3o9ydvk": {
				"id": "il3o9ydvk",
				"config": {
					"outputs": 1,
					"code": "var body = {\nid: \"l3i2001vx41d\",\nname: \"actualite_region_asia\",\nmethod: \"GET\",\nvalue: \"countries=cn,jp,in,kr,sg,id&languages=fr&categories=general,business,technology,science&sources=-sports,-entertainment,-ua&date=today\",\ncountries: {\ncn: \"Chine\",\nin: \"Inde\",\njp: \"Japon\",\nsp: \"Singapour\",\nkr: \"Coree\",\nid: \"Indonesie\"\n},\nbaseurl: \"https://api.mediastack.com/v1/news\",\naccess_key: \"9285fec44e62324056ebff7f54203f09\"\n};\nvar opt = {};\nopt.url = 'http://louisbertson:8454/apiconfigs/update';\nopt.type = 'json';\nopt.query ={body : JSON.stringify(body)};\nopt.callback = function(err, res) {\n\t$.send('output',res);\n};\nREQUEST(opt);"
				},
				"x": 334.005615234375,
				"y": 794.0339965820312,
				"component": "cbn4v580e5",
				"connections": {
					"output": [
						{
							"id": "il3oad2rr",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3oad2rr": {
				"id": "il3oad2rr",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 663.210205078125,
				"y": 804.5737915039062,
				"component": "cd0aze16db",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3ob7z86": {
				"id": "il3ob7z86",
				"config": {
					"url": "/apitimes/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": -7.13067626953125,
				"y": 374.8294982910156,
				"component": "c3o13b038c",
				"connections": {
					"output": [
						{
							"id": "il3ob858c",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3ob858c": {
				"id": "il3ob858c",
				"config": {
					"method": "query",
					"collection": "times"
				},
				"x": 451.875,
				"y": 391.6875,
				"component": "ckmpjdbcab",
				"connections": {
					"output": [
						{
							"id": "il3aa883c",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-database",
					"group": "Databases",
					"name": "NoSQL",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3ob9882": {
				"id": "il3ob9882",
				"config": {
					"url": "/apitimes/update/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "custom"
				},
				"x": -14.4886474609375,
				"y": 628.7499694824219,
				"component": "c3o13b038c",
				"connections": {
					"output": [
						{
							"id": "il3ob9wk3",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3ob9wk3": {
				"id": "il3ob9wk3",
				"config": {
					"outputs": 1,
					"code": "var body = data.query.body.parseJSON(true);\nNOSQL('times').modify(body).where('name',body.name).callback(function(err,response,dt, dt2) {\n\tif(response){\n\t\t$.send('output',body);\n\t}\n})"
				},
				"x": 409.53125,
				"y": 652.21875,
				"component": "cbn4v580e5",
				"connections": {
					"output": [
						{
							"id": "il3o8to0u",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ct157o": {
				"id": "il4ct157o",
				"config": {
					"outputs": 1,
					"code": "var opt =  {text:`Guardiola’s Champions League Blues\nLast Updated on 6 May 2022 9:38 pm (UK Time) There was barely a scattering of lukewarm applause from the Santiago Bernabeu faithful behind the goal as Ferlaine Mendy miraculously cleared Grealish’s effort off the line, his desperate last-ditch defending &amp;#8230; Guardiola’s Champions League Blues Read More &amp;#187;`};\n$.send('output',opt);"
				},
				"x": 214,
				"y": 1010,
				"component": "cbn4v580e5",
				"connections": {
					"output": [
						{
							"id": "il4ctiqup",
							"index": "payload"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ct18jn": {
				"id": "il4ct18jn",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": -56,
				"y": 1035,
				"component": "c3n5va35a8",
				"connections": {
					"output": [
						{
							"id": "il4ct157o",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il4ctiqup": {
				"id": "il4ctiqup",
				"config": {
					"url": "http://192.168.0.117:8080/",
					"method": "POST",
					"dnscache": true,
					"insecure": false,
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 60000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": "json",
					"send": "all"
				},
				"x": 528,
				"y": 965,
				"component": "cw3eh17f29",
				"connections": {
					"response": [
						{
							"id": "il4ctna88",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fas fa-cloud-download",
					"group": "Common",
					"name": "Request",
					"inputs": [
						{
							"id": "payload",
							"name": "Payload"
						}
					],
					"outputs": [
						{
							"id": "response",
							"name": "Response"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			},
			"il4ctna88": {
				"id": "il4ctna88",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 905,
				"y": 898,
				"component": "c39n457e88",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://louisbertson:8454",
		"dtcreated": "2022-05-17T14:53:58.485Z",
		"size": 66501,
		"variables2": {}
	},
	"fqnh4001gt41d": {
		"paused": true,
		"id": "fqnh4001gt41d",
		"reference": "",
		"author": "",
		"group": "Actualite",
		"icon": "fa fa-volleyball-ball",
		"color": "#61C83B",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Actu SPORT National",
		"components": {
			"cgq0f971dd": "<script total>\n\n\texports.name = 'Macro';\n\texports.icon = 'fa fa-scroll';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { code: 'RETURN DATA' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\t\tvar temp = {};\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\tvar val = fn({ data: $.data, temp: temp });\n\t\t\t\t$.send('output', val === undefined ? $.data : val);\n\t\t\t} else\n\t\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tfn = config.code ? NEWMACRO(config.code) : null;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe macro component uses Total.js Macro language that allows you to write much simple code like in JavaScript. Macros are targeted for small data transformation.\n\n- you don't need to solve Upper/Lower case\n- `return EXPRESSION` will return data and send them next\n- `data` keyword contains a message data\n- `temp` keyword can contain a persistent temporary data\n\n__Example__:\n\n```text\nIF DATA>20 AND DATA<35\n\tRETURN DATA * 5\nFI\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear temporary data</div>\n\t\t<div data---=\"codemirror__?.code__type:text;minheight:300;parent:auto;margin:90;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><a href=\"https://docs.totaljs.com/total4/pahk001pr41d/\" target=\"_blank\"><i class=\"fa fa-book mr5\"></i>Documentation</a></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgmxl1055e": "<script total>\n\n\texports.id = 'qrgenerator';\n\texports.name = 'QR generator';\n\texports.icon = 'fa fa-qrcode';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['awesome-qr'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tconst { AwesomeQR } = require(\"awesome-qr\");\n\t\tconst { writeFile, readFile } = require('fs').promises;\n\t\tconst filename = PATH.tmp(instance.id + 'qrcode.png');\n\t\tvar bgready = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tgenerate(data.text, function(err, buf){\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.end();\n\t\t\t\tif ($.data.filename)\n\t\t\t\t\tF.Fs.writeFile($.data.filename, buf, function(err){\n\t\t\t\t\t\tif (err) instance.throw(err);\n\t\t\t\t\t});\n\t\t\t\t$.data._qrcode = buf.toString('base64');\n\t\t\t\t$.send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t/*// \"config\" is changed\n\t\t\tif (config.background) {\n\t\t\t\twriteFile(filename, Buffer.from(config.background.split(';base64,')[1], 'base64'))\n\t\t\t\t\t.then(_ => { console.log('OK'); bgready = true; })\n\t\t\t\t\t.catch(err => { console.log('FAILED', err); bgready = false; });\n\t\t\t} else\n\t\t\t\tbgready = false;*/\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function generate(text, cb) {\n\t\t\tvar bg;\n\n\t\t\tif (bgready) {\n\t\t\t\ttry {\n\t\t\t\t\tbg = await readFile(filename);\n\t\t\t\t} catch(e) {\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar obj = {\n\t\t\t\ttext,\n\t\t\t\tsize: 600\n\t\t\t}\n\n\t\t\tif (bg)\n\t\t\t\tobj.backgroundImage = bg;\n\t\t\tvar buffer;\n\n\t\t\tnew AwesomeQR(obj).draw().then(buf => {\n\t\t\t\tcb(null, buf);\n\t\t\t}).catch(err => {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\ttext: 'text to write to qr code',\n\tfilename: '/public/img/', // optionaly writes the file to filesystem\n\t...\n}\n```\n## Output\n```js\n{\n\ttext: 'text to write to qr code',\n\t...\n\t_qrcode: 'base64 encoded buffer'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<!--Please use <a href=\"https://www.base64-image.de/\" target=\"_blank\">base64-image.de</a> to turn the background image to Base64 and place the text \"data:image/png;ba....\" bellow.\n\t\t<div data---=\"input__?.background\">Background Image data (optional)</div>-->\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ch5c79dcc2": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"ch9ub95918": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"chdmwfcabd": "<script total>\n\n\texports.name = 'Workflow';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Name', code: 'success();', clear: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1400 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar repo = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn($, repo);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tvar code = config.code;\n\t\t\t\tif (code) {\n\n\t\t\t\t\tvar builder = ['var controller=$.refs.controller||EMPTYOBJECT'];\n\n\t\t\t\t\tif (code.indexOf('headers') !== -1)\n\t\t\t\t\t\tbuilder.push('headers=controller.headers||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('params') !== -1)\n\t\t\t\t\t\tbuilder.push('params=controller.params||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('query') !== -1)\n\t\t\t\t\t\tbuilder.push('query=controller.query||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('respond') !== -1)\n\t\t\t\t\t\tbuilder.push('respond=(data)=>$.send(\\'output\\',data)');\n\n\t\t\t\t\tif (code.indexOf('success') !== -1)\n\t\t\t\t\t\tbuilder.push('success=(data)=>$.send(\\'output\\',{success:true,value:data})');\n\n\t\t\t\t\tif (code.indexOf('invalid') !== -1)\n\t\t\t\t\t\tbuilder.push('invalid=(err)=>$.send(\\'error\\',[{error:err.toString()}])');\n\n\t\t\t\t\tif (code.indexOf('user') !== -1)\n\t\t\t\t\t\tbuilder.push('user=controller.user');\n\n\t\t\t\t\tif (code.indexOf('ip') !== -1)\n\t\t\t\t\t\tbuilder.push('ip=controller.ip||\\'\\'');\n\n\t\t\t\t\tif (code.indexOf('model') !== -1)\n\t\t\t\t\t\tbuilder.push('model=$.data');\n\n\t\t\t\t\tvar AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t\t\t\t\tvar body = builder.join(',') + ';try{' + code + '}catch(e){$.instance.status({error:e.message});$.destroy();}';\n\n\t\t\t\t\tfn = code.indexOf('await ') === -1 ? new Function('$', 'repo', body) : new AsyncFunction('$', 'repo', body);\n\n\t\t\t\t\tif (config.clear)\n\t\t\t\t\t\trepo = {};\n\n\t\t\t\t} else\n\t\t\t\t\tfn = null;\n\n\t\t\t\tinstance.status(EMPTYOBJECT);\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.status({ error: e.message });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t\trepo = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component simulates Total.js Schema Workflow operation. It can process data and store/read them into the database.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Workflow name</div>\n\t\t<div data---=\"input__?.clear__type:checkbox\" class=\"m b\">Clear repository object</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:185;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\"><i class=\"fa fa-book\"></i><span class=\"link exec\" data-exec=\"comworkflowsettingshelp\">Documentation</span></div>\n\t</div>\n</settings>\n\n<script>\nTOUCH(function(instance) {\n\n\tW.comworkflowsettingshelp = function() {\n\tvar md = `\n__Properties__:\n- \\`$ {Message}\\`\n- \\`controller {Object}\\` A controller instance\n- \\`user {Object}\\` A user instance if exists\n- \\`headers {Object}\\` Request headers\n- \\`query {Object}\\` URL query arguments\n- \\`params {Object}\\` A dynamic URL params\n- \\`ip {String}\\` IP address\n\n__Functions__:\n- \\`respond(data {Object})\\` Responds with data\n- \\`success(data {Object}\\` optional) Response with success object\n- \\`invalid(error {String})\\` Error handling`;\n\t\tFUNC.readme('Documentation: Workflow', md);\n\t};\n\n\tinstance.settings = function() {\n\t\tif (!W.comworkflowsettingsskip) {\n\t\t\tW.comworkflowsettingsskip = true;\n\t\t\tW.comworkflowsettingshelp();\n\t\t}\n\t};\n});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text\"></b>\n\t</header>\n\t<footer data-bind=\"STATUS.error__text span__show\" style=\"padding:10px\" class=\"fs12 red\"><i class=\"fa fa-bug mr5\"></i><b>ERROR:</b> <span></span></footer>\n</body>",
			"chim37758d": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { payload: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + value.substring(1)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"chkct9f685": "<script total>\n\n\texports.name = 'Token Auth';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:1\">Token</div>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.header__required:1;type:lower\">Header</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.error__required:1\">Error message</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div data---=\"input__?.ddos__required:1;type:number\">DDOS protection</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span data-bind=\"CONFIG.code__text\" class=\"code\"></span> <span data-bind=\"CONFIG.header__text\"></span></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
			"chm2b0c2fc": "<script total>\n\n\texports.name = 'Remember';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-save';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'remember', name: 'Remember' }, { id: 'request', name: 'Request' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache;\n\n\t\tinstance.message = function($) {\n\n\t\t\tif ($.input === 'remember') {\n\t\t\t\tcache = $.data;\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar val = cache;\n\n\t\t\tif (val == null)\n\t\t\t\tval = null;\n\n\t\t\tif (config.path)\n\t\t\t\tU.set($.data, config.path, val);\n\t\t\telse\n\t\t\t\t$.data = val;\n\n\t\t\t$.send('response');\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe primary goal of this component is to remember data. The component contains two inputs:\n\n- Remember input for remembering data\n- Request input as a trigger for obtaining data, then remembered data would extend the request message (its data), and the component will send it to the Response output\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property\">Set remembered data to the specific property/field</div>\n\t\t<div class=\"help\">If you don't enter the property, the remembered data will replace data on the Request input.</div>\n\t</div>\n</settings>",
			"chnzlb085c": "<script total>\n\n\texports.name = 'API PostgreSQL';\n\texports.icon = 'fa fa-cubes';\n\texports.author = 'Total.js';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.config = { name: 'default', url: '', pooling: 2 };\n\texports.outputs = [{ id: 'error', name: 'Error' }];\n\texports.npm = ['querybuilderpg'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar QB = require('querybuilderpg');\n\t\tvar init = false;\n\t\tvar conf;\n\n\t\tinstance.configure = function() {\n\n\t\t\tinit && QB.init(conf.name);\n\t\t\tconf = instance.replace(config);\n\n\t\t\tif (conf.url) {\n\t\t\t\tQB.init(conf.name, conf.url, config.pooling, function(err, data) {\n\t\t\t\t\tvar msg = instance.newmessage([{ error: err + ' --> ' + data.query }]);\n\t\t\t\t\tmsg.send('error');\n\t\t\t\t});\n\t\t\t\tinit = true;\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tconf && require('querybuilderpg').init(conf.name);\n\t\t\tconf = null;\n\t\t\tinit = false;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component initializes QueryBuilder for PostgreSQL database. So you will able to use `API Database` component. Every connection must be separated by the alias.\n\n__Usage in API Database__:\n\n- `tbl_user` is targeted to the `default/tbl_user` alias connection\n- `anotherserver/tbl_user` will use `anotherserver` alias connection\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Alias</div>\n\t\t\t\t<div class=\"help\">The alias separates various DB connections</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.url__required:1;camouflage:1\">Connection string</div>\n\t\t\t\t<div class=\"help\">Example: postgresql://user:pass@localhost:5432/database_name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.pooling__required:1;type:number\">Pooling</div>\n\t\t\t\t<div class=\"help\">How many connections can it keep?</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\tAlias: <b class=\"monospace\" data-bind=\"CONFIG.name__text\"></b>\n\t</footer>\n</body>",
			"chpq6c0445": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tcompiled = {};\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{dynamic_arg_1}/{dynamic_arg_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n__Output data:__ will be same data extendend by adding new properties:\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '-- Not found --' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"chsvy615c5": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .code { color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\" class=\"code\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</footer>\n</body>",
			"chuxx5941c": "<script total>\n\n\texports.name = 'API Database';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-database';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', tab: 'list', listtable: '', listfilter: [], listwhere: [], listlimit: 100, listsort: '', listpath: '', createtable: '', createerror: '', readtable: '', readfields: '*', readwhere: [], readpath: '', readsort: '', readerror: '', createtable: '', createpath: '', updatetable: '', updateerror: '', updatepath: '', updatewhere: [], removetable: '', removepath: '', removeerror: '', removewhere: [] };\n\texports.inputs = [{ id: 'list', name: 'List' }, { id: 'create', name: 'Create' }, { id: 'read', name: 'Read' }, { id: 'update', name: 'Update' }, { id: 'remove', name: 'Delete' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar builder = null;\n\t\t\tvar is = false;\n\t\t\tvar data = $.data;\n\t\t\tvar params = data.params || EMPTYOBJECT;\n\t\t\tvar query = data.query || EMPTYOBJECT;\n\t\t\tvar user = data.user || EMPTYOBJECT;\n\n\t\t\tdata = data.data || data.body;\n\n\t\t\tswitch ($.input) {\n\t\t\t\tcase 'create':\n\t\t\t\t\tif (config.createtable)\n\t\t\t\t\t\tbuilder = DB().insert(config.createtable, data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\n\t\t\t\t\tif (config.updatetable) {\n\t\t\t\t\t\tbuilder = DB().update(config.updatetable, data);\n\t\t\t\t\t\tcache.update && cache.update(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.updateerror && builder.error(config.updateerror);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remove':\n\t\t\t\t\tif (config.removetable) {\n\t\t\t\t\t\tbuilder = DB().remove(config.removetable);\n\t\t\t\t\t\tcache.remove && cache.remove(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.removeerror && builder.error(config.removeerror);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'read':\n\t\t\t\t\tif (config.readtable) {\n\t\t\t\t\t\tbuilder = DB().read(config.readtable);\n\t\t\t\t\t\tcache.read && cache.read(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t\tconfig.readerror && builder.error(config.readerror);\n\t\t\t\t\t\tif (cache.readsort) {\n\t\t\t\t\t\t\tfor (var m of cache.readsort)\n\t\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'list':\n\t\t\t\t\tif (config.listtable) {\n\t\t\t\t\t\tbuilder = DB().list(config.listtable);\n\t\t\t\t\t\tbuilder.autoquery(query, cache.listfields, cache.listsort ? (cache.listsort[0] + '_' + cache.listsort[1]) : null, config.listlimit || 100);\n\t\t\t\t\t\tcache.list && cache.list(data.params, data.data, data.query, data.user, $.refs, $, builder);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (builder) {\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t$.send('error', [{ error: err + '' }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar path = config[$.input + 'path'];\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\tU.set($.data, path, response);\n\t\t\t\t\t\t\t$.send('output');\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\t$.send('error', [{ error: 'Not configured' }]);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tconfig.tab = 'list';\n\n\t\t\tvar types = ['list', 'update', 'read', 'remove'];\n\t\t\tvar builder;\n\t\t\tvar tmp;\n\n\t\t\tfor (var key of types) {\n\n\t\t\t\tbuilder = [];\n\n\t\t\t\tfor (var item of config[key + 'where']) {\n\t\t\t\t\tvar val = 'null';\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase '1':\n\t\t\t\t\t\t\tval = item.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '2':\n\t\t\t\t\t\t\tval = '\\'' + item.value.replace(/'/g, '\\\\\\'') + '\\'';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\tval = item.value.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === '1' || item.value === 'true' || val === 'on';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\tval = item.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === 'now' ? 'new Date()' : item.value.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '6':\n\t\t\t\t\t\t\tval = 'null';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbuilder.push('where(\\'{0}\\', \\'{1}\\', {2})'.format(item.name, item.comparer, val));\n\t\t\t\t}\n\n\t\t\t\tcache[key] = builder.length ? new Function('params', 'data', 'query', 'user', 'refs', '$', 'builder', 'builder.' + builder.join('.')) : null;\n\t\t\t}\n\n\t\t\ttypes = ['list', 'read'];\n\n\t\t\tfor (var key of types) {\n\t\t\t\tvar k = key + 'sort';\n\t\t\t\tif (config[k]) {\n\t\t\t\t\tcache[k] = [];\n\t\t\t\t\ttmp = config[k].split(/,|;/);\n\t\t\t\t\tfor (var m of tmp) {\n\t\t\t\t\t\tm = m.trim().split(' ');\n\t\t\t\t\t\tm[1] = (m[1] || '').toLowerCase() === 'asc';\n\t\t\t\t\t\tcache[k].push(m);\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tcache[k] = null;\n\t\t\t}\n\n\t\t\tcache.listfields = '';\n\n\t\t\tfor (var item of config.listfilter) {\n\t\t\t\ttmp = 'string';\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase '3':\n\t\t\t\t\t\ttmp = 'number';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '4':\n\t\t\t\t\t\ttmp = 'boolean';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '5':\n\t\t\t\t\t\ttmp = 'date';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcache.listfields += (cache.listfields ? ',' : '') + item.name + ':' + tmp;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component can perform some operations on a database with the help of Total.js QueryBuilder. First, you must initialize the connection string for the database via QueryBuilder initialization.\n\n__Input data__:\n\n- `data {Object}` or `body {Object}` optional - payload\n- `query {Object}` optional - query data, key/value must be string\n- `params {Object}` optional - dynamic values, key/value must be string\n- `user {Object}` optional - a user instance\n\n__Output__:\n\n- `insert` returns Number\n- `update` returns Number\n- `remove` returns Number\n- `query` returns Array of Objects\n- `read` returns Object\n- `list` returns:\n\n```json\n{\n\titems: Array,\n\tpage: Number,\n\tpages: Number,\n\tcount: Number\n}\n```\n\nQuery parameters for the `List` operation can contain the below fields which can affect filtering according to the values defined in the dynamic filter.\n\n- `sort {String}` can contain field name with `_asc` or `_desc` value\n- `fields {String}` can return only specified fields separated by comma\n- `page {Number}` page number\n- `limit {Number}` max. items per page (default: max. limit)\n- `column_name=VALUE` enables dynamic filtering\n\n---\n\n__Good to know__: If the `data` (payload) can contain special key names in the form:\n\n- `+key` increments a value\n- `-key` decrements a value\n- `!key` performs toggle for boolean values\n- `>key` stores only greater value\n- `<key` stores only lower value\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings .item { padding: 7px 10px; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\n\t<script type=\"text/html\" class=\"apidatabasestaticfilter\">\n\t\t<div data---=\"listform__?.TYPEwhere__autofocus:1;empty:You do not have defined any rules\">\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} {{ comparer }} <b>{{ if type == '6' }}null{{ else }}{{ value }}{{ fi }}</b></div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'id'\">Name</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.comparer__required:1;align:1;dirsource:tmpcruddb.comparers__'='\">Comparer</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types__'1'\">Type</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t<div data---=\"input__?.value__monospace:1;align:1__''\" data-bind=\"?.type__enable:value!=='6'\">Value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"help\"><b>Expression</b> supports these commands <code>params {Object}</code>, <code>query {Object}</code>, <code>data {Object}</code>, <code>user {Object}</code>. A value for date field can contain <code>now</code> with the current date/time.</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</SCR>\n\t\t\t<SCR type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t</SCR>\n\t\t</div>\n\t</script>\n\n\t<div class=\"CLASS-settings\">\n\n\t\t<div class=\"padding bg-smoke\">\n\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\n\t\t\t<ul class=\"tabmenu\" data---=\"tabmenu__?.tab__null__'list'\">\n\t\t\t\t<li data-value=\"list\">List</li>\n\t\t\t\t<li data-value=\"read\">Read</li>\n\t\t\t\t<li data-value=\"create\">Create</li>\n\t\t\t\t<li data-value=\"update\">Update</li>\n\t\t\t\t<li data-value=\"remove\">Delete</li>\n\t\t\t</ul>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding npt\">\n\n\t\t\t<div data-bind=\"?.tab__show:value==='list'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-list\"></i>List input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listlimit__type:number;required:1;monospace:1\">Max. limit</div>\n\t\t\t\t\t\t<div class=\"help\">Max. records to output</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.listpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=list\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel\">\n\t\t\t\t\t<label class=\"bg-smoke\">Dynamic filter</label>\n\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t<div data---=\"listform__?.listfilter__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} <b>{{ type | tmpapidatabasetype }}</b></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'dtcreated'\">Name</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpcruddb.types2__'5'\">Type</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='read'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-glasses\"></i>Read input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readsort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<hr />\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readfields__monospace:1\"><b>Read fields</b></div>\n\t\t\t\t\t\t<div class=\"help\">Seperate them by the comma. Empty value or <code>*</code> returns all fields (columns).</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.readerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=read\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='create'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-plus-circle\"></i>Create input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createtable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.createpath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='update'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-pencil\"></i>Update input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updatepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.updateerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=update\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.tab__show:value==='remove'\" class=\"hidden\">\n\n\t\t\t\t<div class=\"caption m\">\n\t\t\t\t\t<label><i class=\"fa fa-trash-alt\"></i>Delete input</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removetable__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removepath__monospace:1\">Save to path</div>\n\t\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t\t<div data---=\"input__?.removeerror__monospace:1\">Error message</div>\n\t\t\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"panel m\">\n\t\t\t\t\t<label class=\"bg-smoke\">Static filter</label>\n\t\t\t\t\t<div class=\"padding\" data---=\"loadcontent__null__selector:.apidatabasestaticfilter;replace:TYPE=remove\"></div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmpapidatabase;\n\n\t\t\tif (!tmp) {\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.commands = [];\n\t\t\t\ttmp.commands.push({ id: 'list', name: 'List' });\n\t\t\t\ttmp.commands.push({ id: 'read', name: 'Read' });\n\t\t\t\ttmp.commands.push({ id: 'insert', name: 'Insert' });\n\t\t\t\ttmp.commands.push({ id: 'update', name: 'Update' });\n\t\t\t\ttmp.commands.push({ id: 'delete', name: 'Delete' });\n\t\t\t\ttmp.comparers = [];\n\t\t\t\ttmp.comparers.push({ id: '=', name: '=' });\n\t\t\t\ttmp.comparers.push({ id: '>', name: '>' });\n\t\t\t\ttmp.comparers.push({ id: '>=', name: '>=' });\n\t\t\t\ttmp.comparers.push({ id: '<', name: '<' });\n\t\t\t\ttmp.comparers.push({ id: '<=', name: '<=' });\n\t\t\t\ttmp.comparers.push({ id: '<>', name: '<>' });\n\n\t\t\t\ttmp.types = [];\n\t\t\t\ttmp.types.push({ id: '1', name: 'Expression' });\n\t\t\t\ttmp.types.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types.push({ id: '5', name: 'Date' });\n\t\t\t\ttmp.types.push({ id: '6', name: 'NULL' });\n\n\t\t\t\ttmp.types2 = [];\n\t\t\t\ttmp.types2.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types2.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types2.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types2.push({ id: '5', name: 'Date' });\n\n\t\t\t\tThelpers.tmpapidatabasetype = function(val) {\n\t\t\t\t\treturn tmp.types2.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapidatabase = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"chvhr9eb24": "<script total>\n\n\texports.name = 'CORS';\n\texports.group = 'REST API';\n\texports.icon = 'fab fa-html5';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\t\tvar route = CORS();\n\t\tinstance.close = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\troute = null;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component enables Cross-Origin Resource Sharing `CORS`, so the web browser will be able to communicate directly with the REST API. The functionality will work only with a defined Proxy endpoint for this Flow.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"fa-3x fab fa-html5\" style=\"color:#BD6B27\"></i>\n\t\t<div class=\"mt10 fs12\">CORS enabled</div>\n\t</div>\n</body>",
			"chxs92d30e": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"chyqe6dd66": "<script total>\n\n\texports.id = 'date';\n\texports.name = 'Date';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-calendar';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\t$.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t\tinstance.configure = function configure() {\n\t\t\tinstance.status(config.format || 'yyyy-MM-dd HH:mm:ss');\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.trigger = function trigger() {\n\t\t\tinstance.send('output', new Date().format(config.format || 'yyyy-MM-dd HH:mm:ss'));\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.format__placeholder:yyyy-MM-dd HH\\:mm\\:ss\">Date format</div>\n\t\t<p>\n\t\t\td - day e.g. 1<br>\n\t\t\tdd - day e.g. 01<br>\n\t\t\tddd - day (named). MO<br>\n\t\t\tdddd - day (named). Monday<br>\n\t\t\tM - month e.g. 1<br>\n\t\t\tMM - month e.g. 01<br>\n\t\t\tMMM - month (named). Jan<br>\n\t\t\tMMMM - month (named). January<br>\n\t\t\tyy - year e.g. 16<br>\n\t\t\tyyyy - year e.g. 2016<br>\n\t\t\tw - week number e.g. 1<br>\n\t\t\tww - week number e.g. 01<br>\n\t\t\tH - hour e.g. 1<br>\n\t\t\tHH - hour e.g. 01<br>\n\t\t\tm - minute e.g. 1<br>\n\t\t\tmm - minute e.g. 01<br>\n\t\t\ts - second e.g. 1<br>\n\t\t\tss - second e.g. 01<br>\n\t\t\ta - AM/PM\n\t\t</p>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci0a550362": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"ci0v4e844c": "<script total>\n\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data;' + builder.join('') + '$.destroy();');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sort data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > div { padding: 10px; font-size: 12px; }\n\t.CLASS footer .newbie { display: none; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASSsettings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASSsettings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASSsettings\">\n\t\t<div data---=\"listform__?.conditions__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"fa fa-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1__''\" class=\"m\">Name</div>\n\t\t\t\t\t<div data---=\"input__?.if__required:1__'value != null'\">Condition</div>\n\t\t\t\t\t<div class=\"help m\"><i class=\"fa fa-exclamation-triangle\"></i><code>value</code> represents a message data. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<div data---=\"validate__?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__text__show\" class=\"red\"></div>\n\t\t<div class=\"newbie\"><i class=\"fa fa-clock-o mr5\"></i>Waits for applying</div>\n\t</footer>\n</body>",
			"ci1cf7fe31": "<script total>\n\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ pending: items.length });\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tif (timeout)\n\t\t\t\tinstance.checkstatus();\n\t\t\telse\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status span { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status span { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <span data-bind=\"CONFIG.delay__text:(value?value:'0')+'ms'\"></span></div>\n\t\t\t<div>Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci21rf35b4": "<script total>\n\texports.id = 'middleware_exec';\n\texports.name = 'Middleware Exec';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { id: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function message($) {\n\t\t\tif (!config.id) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar com = instance.main.instances().findItem('id', config.id);\n\n\t\t\tif (!com || !com.execute) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcom.execute($, function(err, data){\n\t\t\t\tif (err)\n\t\t\t\t\t$.send('error', err);\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function call(data, callback) {\n\t\tvar coms = this.instances().filter(ins => ins.component === 'middleware_function' && ins.config.name).map(ins => ({ id: ins.id, name: ins.config.name }));\n\t\tcallback(coms);\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\t\texports.settings = function(meta) {\n\t\t\tmeta.call(function(response) {\n\t\t\t\tSET('%functions', response);\n\t\t\t}, true);\n\t\t};\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%functions;dirraw:1;placeholder:Select middleware function;dirempty:No functions;required:1\" class=\"m\">Name</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci2ol4a50c": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci39e1e50f": "<script total>\n\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? Buffer.from(value, item.convert.substring(4)) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.path && config.rewrite)\n\t\t\t\tU.set($.data, config.path, obj);\n\n\t\t\t$.send('output', obj);\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"ci40w50cc5": "<script total>\n\n\texports.name = 'Server extension';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-flag-checkered';\n\texports.author = 'Total.js';\n\texports.config = { name: 'My extension', install: '', uninstall: '', icon: exports.icon };\n\n\texports.make = function(instance, config) {\n\n\t\tvar install = null;\n\t\tvar uninstall = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (uninstall) {\n\t\t\t\tuninstall.call(instance, instance, require);\n\t\t\t\tuninstall = null;\n\t\t\t\tsetTimeout(instance.configure, 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tinstall = config.install ? new Function('instance', 'require', config.install) : null;\n\t\t\t\tuninstall = config.uninstall ? new Function('instance', 'require', config.uninstall) : null;\n\t\t\t} catch (e) {\n\t\t\t\tinstall = null;\n\t\t\t\tuninstall = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\n\t\t\tinstall && install.call(instance, instance, require);\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tuninstall && uninstall.call(instance, instance, require);\n\t\t\tuninstall = null;\n\t\t\tinstall = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component installs Total.js server-side extension. In other words: it can evaluate JavaScript code when the component is initialized or the component settings is changed.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:e.g. Database\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Installation code:</div>\n\t\t<div data---=\"codemirror__?.install__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help m\">The code will be executed when the configuration is changed or the component instance is initialized.</div>\n\t\t<div class=\"ui-input-label\">Uninstallation code:</div>\n\t\t<div data---=\"codemirror__?.uninstall__type:javascript;height:300;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">The code above will be executed when the configuration is changed or the component instance is removed.</div>\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\" data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<i class=\"fa-2x {{ value.icon }}\"></i>\n\t\t\t<div class=\"mt10 fs12\">{{ value.name }}</div>\n\t\t\t<div class=\"help npt nmt\">Server extension</div>\n\t\t</script>\n\t</div>\n</body>",
			"ci4i028e45": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fas fa-list';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (queue.length)\n\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\telse\n\t\t\t\t\tqueue = arr;\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b data-bind=\"STATUS.pending__text:value?value.format(0):'0'\"></b></div>\n\t</footer>\n</body>",
			"ci4yb31396": "<script total>\n\n\texports.name = 'Modified';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-drafting-compass';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'modified', name: 'Modified' }, { id: 'notmodified', name: 'Not modified' }];\n\n\texports.make = function(instance) {\n\n\t\tvar ok = 0;\n\t\tvar no = 0;\n\t\tvar prev;\n\n\t\tinstance.checkstatus = function() {\n\t\t\tinstance.status({ modified: ok, notmodified: no });\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (prev) {\n\n\t\t\t\tif ($.data == null) {\n\t\t\t\t\t$.end();\n\t\t\t\t\tno++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar tmp;\n\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\tif (!Buffer.compare(prev, data)) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = Buffer.from(data);\n\t\t\t\t} else if (typeof(data) === 'Object') {\n\t\t\t\t\ttmp = JSON.stringify(data);\n\t\t\t\t\tif (tmp === prev) {\n\t\t\t\t\t\tno++;\n\t\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tprev = tmp;\n\t\t\t\t} else if (data == prev) {\n\t\t\t\t\tno++;\n\t\t\t\t\t$.send('notmodified');\n\t\t\t\t\treturn;\n\t\t\t\t} else\n\t\t\t\t\tprev = data;\n\t\t\t} else\n\t\t\t\tprev = data;\n\n\t\t\tok++;\n\t\t\t$.send('modified');\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tok = 0;\n\t\t\tno = 0;\n\t\t\tprev = null;\n\t\t\tinstance.checkstatus();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; padding: 10px; }\n\t.CLASS .status i { margin-right: 5px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fmodified_reset = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nThe component compares incoming data with previous data.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fmodified_reset\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"status\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><i class=\"fa fa-check-circle green\"></i>Modified: {{ value.modified | empty }}</div>\n\t\t\t\t<div><i class=\"fa fa-times-circle red\"></i>Not modified: {{ value.notmodified | empty }}</div>\n\t\t\t\t<div class=\"help\">Refresh interval: <b>1 minute</b></div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ci5lsa7a49": "<script total>\n\n\texports.name = 'Flashback';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'fa fa-history';\n\texports.author = 'Peter Širka & Jakub Urban';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar empty = true;\n\t\tvar status = { empty: true };\n\t\tvar timeout = null;\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.empty = false;\n\t\t\tstatus.data = CLONE($.data);\n\t\t\tstatus.repo = CLONE($.repo);\n\n\t\t\t$.send('output');\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = null;\n\t\t\t\tinstance.status(status);\n\t\t\t}, 500);\n\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'clear') {\n\t\t\t\tstatus.data = null;\n\t\t\t\tstatus.repo = null;\n\t\t\t\tstatus.empty = true;\n\t\t\t\tinstance.status(status);\n\t\t\t} else {\n\t\t\t\tvar message = instance.newmessage(status.data);\n\t\t\t\tmessage.repo = status.repo;\n\t\t\t\tmessage.send('output');\n\t\t\t}\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<readme>\nThe component remembers the data for repeating the action.\n</readme>\n\n<style>\n\t.CLASS { max-width: 250px; min-width: 150px; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<script>\n\tFUNC.fflashback_clear = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id'), type: 'clear' });\n\t};\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<button class=\"exec button hidden\" data-exec=\"FUNC.fflashback_clear\" data-bind=\"STATUS.empty__hide\">Clear</button>\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\" data-bind=\"STATUS.empty__disabled\" disabled>Repeat</button>\n\t</div>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value.data, null, '\\t'))__hide:value.empty\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"ci6662d511": "<script total>\n\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true, name: 'Debug' };\n\texports.inputs = [{ id: 'input', name: 'Log window' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status({ name: config.name, date: new Date(), data: output });\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name\" class=\"m\">Name</div>\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"far fa-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<div data---=\"box__common.$debug__if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:fa fa-bug;zindex:5\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"fa fa-trash-alt\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></div>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"fa fa-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(data.data, '\\t'))));\n\t\t};\n\n\t});\n\n</script>",
			"ci6sh4b21d": "<script total>\n\texports.id = 'middleware_function';\n\texports.name = 'Middleware Function';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Martin Smola';\n\texports.config = { code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// callback(...);' };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tfn = new Function('instance', '$', 'data', 'repo', 'require', 'vars', 'callback', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tinstance.status(config.name);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.execute = function execute($, callback) {\n\t\t\tif (!fn)\n\t\t\t\tcallback();\n\t\t\telse\n\t\t\t\tfn(instance, $, $.data, $.repo, require, instance.variables, callback);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThe code defined in this component can be executed by multiple `Middleware Exec`.\n**Example:**\n```js\n// available arguments\n// instance {FlowStreamComponent}\n// $        {FlowStreamMessage}\n// data     reference to $.data\n// repo     reference to $.repo\n// vars     reference to instance.main.variables\n\nif (data.headers['x-token'] === instance.main.variables.token)\n\t// data will be send to `Output` output of `Middleware Exec` component\n\tcallback(null, data);\nelse\n\t// data will be send to `Error` output of `Middleware Exec` component\n\tcallback('an error occured');\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t<div class=\"ui-input-label\">Code</div>\n\t\t<div data---=\"codemirror__?.code__required:1;type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"ci79kc8f4a": "<script total>\n\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fas fa-skull-crossbones';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"ci82ffd82e": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ciai4ea3c7": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cib2305565": "<script total>\n\n\texports.name = 'Map array';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar arr, newarr = [];\n\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tarr = get(config.path);\n\t\t\t\t} catch(e) {}\n\t\t\t} else {\n\t\t\t\tarr = $.data;\n\t\t\t}\n\n\t\t\tif (!config.map)\n\t\t\t\treturn instance.throw('No configuration');\n\t\t\tif (!Array.isArray(arr))\n\t\t\t\treturn instance.throw('Input data is not an array');\n\n\t\t\tvar len = arr.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvar item = arr[i];\n\t\t\t\t\tif (typeof(item) !== 'object' || Array.isArray(item))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar val = getNewObj(arr[i], config.map);\n\t\t\t\t\tnewarr[i] = val;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data = newarr;\n\t\t\t$.send('output', );\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\n\t\t};\n\n\t\tinstance.configure();\n\t\t// from obj to result -> obj.name to result.name\n\t\tconst getNewObj = (obj, map) => {\n\t\t\tvar result = config.array ? [] : {};\n\t\t\tvar len = map.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvar paths = map[i]; // { source: 'path.to.value', target: 'new.path.to.value' }\n\t\t\t\tvar val = get(obj, paths.source);\n\n\t\t\t\tif (val) {\n\t\t\t\t\tif (config.array) {\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!paths.target)// no path, ignore it\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (paths.target === '...') // keep the same path\n\t\t\t\t\t\tpaths.target = paths.source;\n\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\telse\n\t\t\t\t\t\tset(result, paths.target, val);\n\t\t\t\t} else {\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n## The input must be an array of objects !!\n\nThis component can iterate over an array and only take properties listed in the configuration.\n### Example data:\n```js\n\t[\n\t\t{ sensor: { temperature: 25, humidity: 50, ... some more properties }},\n\t\t{ sensor: { temperature: 24, humidity: 55, ... some more properties }},\n\t\t{ sensor: { temperature: 23, humidity: 60, ... some more properties }}\n\t]\n```\n### Example configuration:\n`sensor.temperature` -> `temp`\n`sensor.humidity` -> `hum`\n\n### Example output:\n```js\n\t[\n\t\t{ temp: 25, hum: 50 },\n\t\t{ temp: 24, hum: 55 },\n\t\t{ temp: 23, hum: 60 }\n\t]\n```\n\nIf `Return an Array of Arrays` is checked then\neach of the Map properties will be pushed to a new array, see example bellow\n\n### Example given the data above and this configuration:\n`Return an Array of Arrays` -> **checked**\n**Map**\n`sensor.temperature`\n`sensor.humidity`\n\n### Example output:\n```js\n\t[\n\t\t[25, 50],\n\t\t[24, 55],\n\t\t[23, 60],\n\t]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.array__type:checkbox\" class=\"m\">Return an Array of Arrays (Default: Array of Objects)</div>\n\t\t<section class=\"maparray-section m\">\n\t\t\t<label>Map</label>\n\t\t\t<!--<div data---=\"keyvalue___?.map__placeholderkey:Type a path to property;placeholdervalue:Type a new path to a property\" class=\"maparray-keyvalue\"></div>-->\n\n\t\t\t<div data-bind=\"?.map__template:.maparray-item -> data-index\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach item in value }}\n\t\t\t\t\t<div class=\"maparray-item\" data-index=\"{{ $index }}\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"\" data-bind=\"?.array__.col-md-11:value__.col-md-5:!value\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].source\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div class=\"m\" style=\"line-height: 35px;\">--&gt;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-5\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.map[{{ $index }}].target\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.maparray_remove_item\" data-index=\"{{ $index }}\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\" data-bind=\"?.array__hide\">You can use 3 dots(...) in the right field to keep the same path.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.maparray_add_item\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.maparray_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.maparray_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.maparray_add_item = function(el) {\n\t\tconsole.log('ADDING', el);\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.map', { source: '', target: '' });\n\t};\n\n\tFUNC.maparray_remove_item = function(el) {\n\t\tconsole.log('REMOVING', el);\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.attrd('index');\n\t\tconfig.map.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.CLASS .button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.CLASS .button-add:hover { background-color: #F8F8F8; }\n\t.CLASS .button-add:active { background-color: #E0E0E0; }\n\n\t.CLASS .ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.CLASS .ui-dark .button-add:hover { background-color: #303030; }\n\t.CLASS .ui-dark .button-add:active { background-color: #404040; }\n\n\t.maparray-section > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n\t.maparray-section { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.maparray-keyvalue .ui-keyvalue-item-key { width: 50% !important; }\n\t.maparray-keyvalue .ui-keyvalue-item-value { margin: 0 32px 0 50% !important; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cicbpc77a1": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"cie527e4": "<script total>\n\n\texports.name = 'Downloader';\n\texports.icon = 'fa fa-download';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tconst { unlink } = require('fs').promises;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tconst urlpath = config.urlpath || 'url';\n\n\t\t\tconst url = get(data, urlpath);\n\t\t\tif (!url)\n\t\t\t\treturn;\n\n\t\t\tconst filename = 'tmp/{0}.{1}'.format(UID(), U.getExtension(url));\n\n\t\t\tDOWNLOAD(data.url, filename, function(err, response){\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst { filename, body, origin, status, headers } = response;\n\t\t\t\t$.send('output', { filename, body, origin, status, headers });\n\t\t\t\t$.on('terminate', () => {\n\t\t\t\t\tunlink(PATH.root(filename)).catch(e => console.log('[Downloader] Failed to unlink file: ' + filename  + ' | ' + e.message));\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\turl: 'https://example.com/file.jpg', // file url\n}\n```\n\n## Output\nA response object as returned by [DOWNLOAD()](https://docs.totaljs.com/total4/407ff001jy51c/#88aab001hd51c) function.\n```js\n{\n\tfilename: '/tmp/xyz.ext',\n\t...\n}\n```\nThe file will be automaticaly deleted once the message is destroyed.\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.urlpath\">Path to URL in the incomming object (default 'url')</div>\n\t\t<div class=\"help m\">Supports dot notation like so: \"path.to.url\" or \"arr.0.url\" if the \"arr\" is an array. \"arr[0].url\" is not supported</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cif9193b72": "<script total>\n\n\texports.id = 'cron';\n\texports.name = 'Cron';\n\texports.icon = 'fa fa-clock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { jobs: [] };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['node-schedule'];\n\n\texports.make = function(instance, config) {\n\t\tvar schedule = require('node-schedule');\n\n\t\tvar startup = true;\n\t\tvar jobs = [];\n\n\t\tinstance.configure = function() {\n\t\t\tstartJobs(config.jobs);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tjobs.length && jobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t\tif (!job)\n\t\t\t\t\tconsole.log('no job', jobs);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction startJobs(newjobs) {\n\n\t\t\tjobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t});\n\n\t\t\tjobs = [];\n\n\t\t\tnewjobs.forEach(function(job){\n\t\t\t\tjob = job.split('|').trim();\n\n\t\t\t\tif (job[0] === '@startup' && startup) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tinstance.send('output', job[1]);\n\t\t\t\t\t}, 5000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar j = schedule.scheduleJob(job[0], function(){\n\n\t\t\t\t\tvar value = job[1];\n\n\t\t\t\t\tif (job[1] === '@ts')\n\t\t\t\t\t\tvalue = Date.now();\n\n\t\t\t\t\tinstance.send('output', value);\n\t\t\t\t});\n\n\t\t\t\tjobs.push(j);\n\t\t\t});\n\n\t\t\tinstance.status(newjobs.length || '0');\n\n\t\t\tstartup = false;\n\t\t}\n\n\t};\n\n</script>\n\n<readme>\n[node-schedule](https://www.npmjs.com/package/node-schedule) on npmjs.com\n\nSyntax:\n`cron string | data (only string supported) | comment`\n\n## Cron string:\n`* * * * * *`\nMeaning of each `*` explained bellow, in order from left to right\nsecond (0 - 59, OPTIONAL)\nminute (0 - 59)\nhour (0 - 23)\nday of month (1 - 31)\nmonth (1 - 12)\nday of week (0 - 7) (0 or 7 is Sun)\n\nor\n`@startup` to run once at the start or restart of an app (after 5 seconds)\n\n### Examples of cron string:\n```\n0 16 * * *      -> trigger every day at 16:00\n* 0 16 * * *    -> trigger at 16:00 every day and it will keep triggering every second until 16:01\n20,40 19 * * *  -> every day at 19:20 and 19:40\n*/5 * * * *     -> trigger every 5 seconds\n0 20 * * 1      -> every monday at 20:00\n@startup        -> runs once at startup\n```\n\n### Full example:\n```\n* 0 16 * * * | hello data | this is hello comment\n@startup | start\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textboxlist__?.jobs__maxlength:50;placeholder:enter value like '* 1 * * * * | day' and hit enter\" class=\"m\">Cron jobs</div>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.cron_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.cron_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; font-weight: bold; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><span data-bind=\"!STATUS__text\"></span>Number of jobs:</footer>\n</body>",
			"cifpxfc971": "<script total>\n\n\texports.id = 'kill';\n\texports.name = 'Kill';\n\texports.color = '#E73323';\n\texports.icon = 'fa fa-skull';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.main.kill();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nBe careful because this component will kill the current Flow instance. It's targeted only for exceptional cases.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cig7rda52b": "<script total>\n\texports.id = 'modify';\n\texports.name = 'Modify';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tfor (let i = 0; i < Rules.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { getValue, setValue } = Rules[i];\n\n\t\t\t\t\tvar data = getValue($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\t\t\t\t\tsetValue(data, $, instance, set);\n\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.rules || !config.rules.length)\n\t\t\t\treturn;\n\n\t\t\tconst rules = config.rules;\n\t\t\tRules = [];\n\n\t\t\trules.forEach(function eachCondition(cond, index){\n\n\t\t\t\tconst { rule, source, sourcepath, target, targetpath } = cond;\n\t\t\t\tvar getValue, setValue;\n\n\t\t\t\tif (rule === 'remove') {\n\n\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t\tif (!targetpath) {\n\t\t\t\t\t\tif (is$) // set $.data or $.repo to null\n\t\t\t\t\t\t\tsetValue = (d, $) => { $[target] = null; };\n\t\t\t\t\t\telse // ignore variables or variables2\n\t\t\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', 'set({0}, {1}, null);'.format(base, sourcepath));\n\t\t\t\t\t}\n\n\t\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rule === 'set' || rule === 'move') {\n\n\t\t\t\t\tif (source === 'expression')\n\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', sourcepath.indexOf('return') > -1 ? sourcepath : 'return ' + sourcepath + ';');\n\t\t\t\t\telse if (source === 'string')\n\t\t\t\t\t\tgetValue = () => sourcepath; // sourcepath is the actual string value\n\t\t\t\t\telse if (source === 'number') {\n\t\t\t\t\t\tgetValue = () => Number(sourcepath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar str = 'if ({0}) return {1}; if (typeof {1} !== \\'object\\' || {1} == null) return; return {2};'.format(sourcepath ? 'false' : 'true', source, sourcepath ? 'get({0}, \\'{1}\\')'.format(source, sourcepath) : sourcepath);\n\t\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\t\t\tconsole.error(str);\n\t\t\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar str;\n\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t// targetpath => data | repo | variables | variables2\n\t\t\t\tif (!targetpath)\n\t\t\t\t\tstr = base + ' = data;';\n\t\t\t\telse\n\t\t\t\t\tstr = 'if (typeof {0} !== \\'object\\' || {0} == null) {0} = {1}; set({0}, \\'{2}\\', data);'.format(base, isNaN(targetpath[0]) ? '{}' : '[]', targetpath);\n\n\t\t\t\tif (rule === 'move' && sourcepath) {\n\t\t\t\t\tvar is$2 = source === 'data' || source === 'repo';\n\t\t\t\t\tvar base2 = (is$2 ? '$.' : 'instance.main.') + source;\n\t\t\t\t\t// don't delete source if the target is within the same path: source $.data.device --> target $.data.device.data\n\t\t\t\t\tif (base !== base2 || !targetpath.startsWith(sourcepath))\n\t\t\t\t\t\tstr += ' set({0}, \\'{1}\\', null);'.format(base2, sourcepath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t};\n\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t});\n\t\t};\n\n\t\ttry {\n\t\t\tinstance.configure();\n\t\t} catch (e) { console.error(e);}\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tThis component allows you to set/modify/move/remove properties of the incomming data.\n\tFor eaxample, to set the message data to a string `Hello world` select *Message data* in the rule dropdown and leave the text field empty.\n\tThen in the bellow dropdown select `string` and enter the desired string in the text field.\n\tResult:\n\t- before: $.data -> 'Hello world'\n\t- after:  $.data -> 'New string'\n\n\t## Expression\n\tAvailable params are: `data`, `repo`, `variables` ,`variables2`\n\tWhere data is message.data, repo is message.repo --> [Documentation](https://docs.totaljs.com/total4/40844001ni51c)\n\tAnd variables are local variables which can be set in the Variables dialog accessible on the main toolbar(the button between Plus icon and Bug icon)\n\tFor example, we want message data to be the value of (data.value + variables.offset)\n\tResult:\n\t- before: $.data --> `{ value: 100 }` / variables --> `{ offset: 20, ... many other properties }`\n\t- after:  $.data -> `{ value: 120 }`\n\tThe expression: `data.value + variables.offset`\n\n\t### Important\n\t- `Remove` -> `Message data / Message repo` -> `<empty path>` will set `Message data / Message repo` to `null`;\n\t- `Remove` -> `Local variables / Global variables` -> `<empty path>` will be ignored but `Remove` -> `Local variables / Global variables` -> `myVar` will work.\n\t- `Set` -> `Message data` -> `some.path` to: `Message data` -> `some.other.path` will add another property to the incoming data and rest of the data will remain untouched\n\t- `Set` -> `Message data` -> `<empty path>` to: `Message data` -> `some.path` will essentialy overwrite the incomming data, after this there's no longer access to original data(same goes for repo)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<section class=\"modify-rules m\">\n\t\t\t<label>Rules</label>\n\t\t\t<div data-bind=\"?.rules__template:.modify-rule -> data-index\" data---=\"movable__?.rules__selector:.dragme;exec:FUNC.modify_rule_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach rule in value }}\n\t\t\t\t\t<div class=\"modify-rule dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].rule__dirsource:REPO.modify_rules\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<div class=\"m\">--&gt;</div>\n\t\t\t\t\t\t\t\t<div data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">to:</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-7\">\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].target__dirsource:REPO.modify_targets\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].targetpath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group\" data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].source__dirsource:REPO.modify_sources\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].sourcepath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.modify_remove_rule\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each rule will be applied in the order from top to bottom.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.modify_add_rule\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.modify_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.modify_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.modify_add_rule = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.rules', { rule: 'set', source: '', sourcetype: '', target: '', targettype: '' });\n\t};\n\n\tFUNC.modify_remove_rule = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.modify_rule').attrd('index');\n\t\tconfig.rules.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_rule_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.rules.splice(dragged_index, 1)[0];\n\t\tconfig.rules.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.modify_sources = 'string|String,number|Number,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_targets = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_rules = 'set|Set,remove|Remove,move|Move'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.modify-input-group { clear: both; height: 36px; }\n\t.modify-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.modify-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.modify-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.modify-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.modify-rules { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.modify-rule { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.modify-rule > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.modify-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.modify-thead { padding: 8px; margin-bottom:4px; }\n\t.modify-rules > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cigr3c2577": "<script total>\n\n\texports.name = 'Switch';\n\texports.icon = 'fa fa-sitemap fa-rotate-270';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<div data---=\"input__?.source__dirsource:REPO.switch_datasources__'data'\"></div>\n\t\t\t<div data---=\"input__?.path\"></div>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.conditions__template:.switch-condition -> data-index\" data---=\"movable__?.conditions__selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].operator__dirsource:REPO.switch_operators\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t<div data-bind=\"?.conditions[{{ $index }}].operator__hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty'__.switch-input-group:value!=='expression'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].type__dirsource:REPO.switch_valuetypes\" data-bind=\"?.conditions[{{ $index }}].operator__hide:value==='expression'\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].value__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.conditions[{{ $index }}].name\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cihawfaa1c": "<script total>\n\n\texports.name = 'Test';\n\texports.icon = 'fa fa-info';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', 'Hello world output');\n\t\t\t$.send('dynamic', 'Hello world dynamic');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = config.outputs;\n\t\t\tinstance.save();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\tTest\n</readme>\n\n<settings>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cihxm4ad07": "<script total>\n\n\texports.id = 'range';\n\texports.name = 'Range';\n\texports.icon = 'fa fa-arrows-h';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tvar inmin, inmax, outmin, outmax;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar val = parseFloat(typeof(data) === 'object' ? U.get(data, config.property) : data);\n\n\t\t\tif (!val || typeof val !== 'number') {\n\t\t\t\tinstance.throw('Value \"{0}\" is not a number'.format(val.toString().substring(0, 20)));\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (val < inmin) {\n\t\t\t\t$.data = inmin;\n\t\t\t} else if (val > inmax)\n\t\t\t\t$.data = inmax;\n\t\t\telse {\n\t\t\t\tdata = outmin + (outmax - outmin) * (val - inmin) / (inmax - inmin);\n\t\t\t\t$.data = config.round ? Math.round(data) : data;\n\t\t\t}\n\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinmin = parseFloat(config.input_min || 0);\n\t\t\tinmax = parseFloat(config.input_max || 1023);\n\t\t\toutmin = parseFloat(config.output_min || 0);\n\t\t\toutmax = parseFloat(config.output_max || 100);\n\t\t\tinstance.status(`${inmin} - ${inmax} --> ${outmin} - ${outmax}`);\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.property__placeholder:e.g. path.to.property\" class=\"m\">Property (unless the data is the value itself)</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_min__type:number\" class=\"m\">Input min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_max__type:number\" class=\"m\">Input max (defaults to 1023)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_min__type:number\" class=\"m\">Output min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_max__type:number\" class=\"m\">Output max (defaults to 100)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.round__type:checkbox\">Round output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cikxlfe14d": "<script total>\n\n\texports.name = 'Stopwatch';\n\texports.group = 'Stats';\n\texports.version = '3';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Stopwatch', delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Counter' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar max = 9;\n\t\tvar results = [];\n\t\tvar timeout;\n\t\tvar count = 0;\n\t\tvar ts;\n\n\t\tvar flush = function() {\n\t\t\tvar diff = Date.now() - ts;\n\t\t\ttimeout = null;\n\t\t\tif (results.unshift({ date: new Date(), duration: (diff / 1000).floor(3), count: count }) > max)\n\t\t\t\tresults.pop();\n\t\t\tcount = 0;\n\t\t\tinstance.status(results, 1000);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\t$.destroy();\n\n\t\t\tif (timeout)\n\t\t\t\tclearTimeout(timeout);\n\t\t\telse\n\t\t\t\tts = Date.now();\n\n\t\t\tcount++;\n\t\t\ttimeout = setTimeout(flush, config.delay);\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\t\t\tresults = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tresults = [];\n\t\t\tinstance.status(results);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\tif (results.length)\n\t\t\t\tresults = [];\n\n\t\t\tcount = 0;\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; width: 220px; }\n\t.CLASS .result { height: 22px; font-size: 11px; border-top: 1px solid #E0E0E0; line-height: 22px; }\n\t.CLASS .result .ts { margin-right: 100px; }\n\t.CLASS .result .duration { float: right; width: 100px; text-align: right; }\n\t.ui-dark .CLASS .result { border-top-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-8 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.delay__type:number;required:1;align:1;ricon:!ms\">Idle time delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component runs a simple stopwatch for incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button></div>\n\t\t<div data-bind=\"STATUS__template__show:value && value.length\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ foreach m in value }}\n\t\t\t\t<div class=\"result\">\n\t\t\t\t\t<span class=\"duration\">{{ m.duration | format(3) }} sec</span>\n\t\t\t\t\t<div class=\"ts\" title=\"{{ m.date | format('[ts]') }}\">{{ m.date | format('[time]') }} ({{ m.count }})</div>\n\t\t\t\t</div>\n\t\t\t\t{{ end }}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cilkhc268b": "<script total>\n\n\texports.name = 'Duration';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-stopwatch';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = {};\n\n\t\tstats.min = null;\n\t\tstats.max = null;\n\t\tstats.avg = 0;\n\t\tstats.last = 0;\n\t\tstats.count = 0;\n\n\t\tinstance.trigger = function() {\n\t\t\tstats.min = null;\n\t\t\tstats.avg = 0;\n\t\t\tstats.max = null;\n\t\t\tstats.last = null;\n\t\t\tstats.count = 0;\n\t\t\tinstance.status(stats);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar duration = ((Date.now() - $.duration) / 1000).floor(3);\n\n\t\t\tif (stats.min === null || stats.min > duration)\n\t\t\t\tstats.min = duration;\n\n\t\t\tif (stats.max === null || stats.max < duration)\n\t\t\t\tstats.max = duration;\n\n\t\t\tstats.avg = ((stats.max + stats.min) / 2).floor(3);\n\t\t\tstats.last = duration;\n\t\t\tstats.count++;\n\n\t\t\tinstance.status(stats, 500);\n\t\t\t$.send('output', stats);\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component counts message duration. All values except `count` are defined in seconds.\n\n__Output__:\n\n```js\n{\n\tmin: Number,\n\tmax: Number,\n\tavg: Number,\n\tlast: Number,\n\tcount: Number\n}\n```\n</readme>\n\n<style>\n\t.CLASS .keyvalue > span { width: 60px; }\n\t.CLASS .keyvalue > div { margin-left: 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer style=\"padding:10px;width:180px\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<div data-bind=\"STATUS__template__.keyvalue\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Min</span>\n\t\t\t\t\t<div class=\"right\">{{ value.min | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Max</span>\n\t\t\t\t\t<div class=\"right\">{{ value.max | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Avg</span>\n\t\t\t\t\t<div class=\"right\">{{ value.avg | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Last</span>\n\t\t\t\t\t<div class=\"right\">{{ value.last | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Count</span>\n\t\t\t\t\t<div class=\"right b\">{{ value.count | format(0) | empty }}</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cim4f4e8f2": "<script total>\n\n\texports.id = 'dataset';\n\texports.name = 'CSV Dataset';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.config = { name: '', unit: '', icon: '', color: '', decimals: 2, type: 'daily', sum: 0 };\n\texports.inputs = [{ id: 'input', name: 'Value' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar uid = (instance.main.id + '_' + instance.id).makeid();\n\t\tvar filename_meta = PATH.private('dataset_' + uid + '.meta');\n\t\tvar filename_data = PATH.private('dataset_' + uid + '.csv');\n\t\tvar meta = {};\n\n\t\tvar updatestatus = function() {\n\t\t\tinstance.status({ id: uid, keys: meta.keys });\n\t\t};\n\n\t\tF.Fs.readFile(filename_meta, function(err, response) {\n\t\t\tmeta = response ? response.toString('utf8').parseJSON(true) : CLONE(config);\n\t\t\tif (!meta.keys)\n\t\t\t\tmeta.keys = {};\n\t\t\tmeta.id = uid;\n\t\t\tupdatestatus();\n\t\t\tF.Fs.lstat(filename_data, function(err) {\n\t\t\t\tif (err)\n\t\t\t\t\tF.Fs.appendFile(filename_data, 'key,value,min,max,sum,count,tshour,tsday,tsweek,tsmonth,tsyear\\n', NOOP);\n\t\t\t});\n\t\t});\n\n\t\tinstance.close = function(removed) {\n\t\t\tif (removed) {\n\t\t\t\tF.Fs.unlink(filename_meta, NOOP);\n\t\t\t\tF.Fs.unlink(filename_data, NOOP);\n\t\t\t\tdb = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.insert = function(data) {\n\n\t\t\tvar writer = null;\n\t\t\tvar write = false;\n\t\t\tvar key = data.key || data.id || 'Value';\n\n\t\t\tif (!meta.keys[key])\n\t\t\t\tmeta.keys[key] = {};\n\n\t\t\tvar tmp = meta.keys[key];\n\n\t\t\tif (tmp.count && config.type !== 'lastvalue' && config.type !== 'logger') {\n\t\t\t\tvar date = tmp.date;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'hourly':\n\t\t\t\t\t\twrite = date.getHours() !== NOW.getHours();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'daily':\n\t\t\t\t\t\twrite = date.getDate() !== NOW.getDate();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'monthly':\n\t\t\t\t\t\twrite = date.getMonth() !== NOW.getMonth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'weekly':\n\t\t\t\t\t\twrite = date.format('w') !== NOW.format('w');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'yearly':\n\t\t\t\t\t\twrite = date.getFullYear() !== NOW.getFullYear();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (write) {\n\t\t\t\twriter = {};\n\t\t\t\twriter.key = key;\n\t\t\t\twriter.value = tmp.value;\n\t\t\t\twriter.min = tmp.min;\n\t\t\t\twriter.max = tmp.max;\n\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\twriter.count = tmp.count;\n\t\t\t\twriter.date = tmp.date;\n\t\t\t}\n\n\t\t\ttmp.date = NOW;\n\t\t\ttmp.value = data.value;\n\n\t\t\tif (writer) {\n\n\t\t\t\ttmp.min = tmp.value;\n\t\t\t\ttmp.max = tmp.value;\n\t\t\t\ttmp.count = 0;\n\n\t\t\t\tif (config.sum) {\n\t\t\t\t\tif (config.sum === 1)\n\t\t\t\t\t\ttmp.sum = tmp.value;\n\t\t\t\t\telse\n\t\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif (tmp.min == null || tmp.value < tmp.min)\n\t\t\t\t\ttmp.min = tmp.value;\n\n\t\t\t\tif (tmp.max == null || tmp.value > tmp.max)\n\t\t\t\t\ttmp.max = tmp.value;\n\n\t\t\t\tif (config.sum)\n\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\n\t\t\t\tif (config.type === 'logger') {\n\t\t\t\t\twriter = {};\n\t\t\t\t\twriter.key = key;\n\t\t\t\t\twriter.value = tmp.value;\n\t\t\t\t\twriter.min = tmp.min;\n\t\t\t\t\twriter.max = tmp.max;\n\t\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\t\twriter.count = (tmp.count || 0) + 1;\n\t\t\t\t\twriter.date = tmp.date;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp.count = (tmp.count || 0) + 1;\n\n\t\t\tupdatestatus();\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\n\t\t\tif (!writer)\n\t\t\t\treturn;\n\n\t\t\tvar values = [];\n\n\t\t\t// 0 key\n\t\t\t// 1 value\n\t\t\t// 2 min\n\t\t\t// 3 max\n\t\t\t// 4 sum\n\t\t\t// 5 count\n\t\t\t// 6 tsh\n\t\t\t// 7 tsd\n\t\t\t// 8 tsw\n\t\t\t// 9 tsm\n\t\t\t// 10 tsy\n\n\t\t\tvar ts = writer.date.format('yyyyMMddHH');\n\n\t\t\tvalues.push(writer.key);\n\t\t\tvalues.push(writer.value + '');\n\t\t\tvalues.push((writer.min != null ? writer.min : '') + '');\n\t\t\tvalues.push((writer.max != null ? writer.max : '') + '');\n\t\t\tvalues.push((writer.sum != null ? writer.sum : '') + '');\n\t\t\tvalues.push((writer.count != null ? writer.count : '') + '');\n\t\t\tvalues.push(ts);\n\t\t\tvalues.push(ts.substring(0, 8));\n\t\t\tvalues.push(writer.date.format('yyyyww'));\n\t\t\tvalues.push(ts.substring(0, 6));\n\t\t\tvalues.push(ts.substring(0, 4));\n\n\t\t\tF.Fs.appendFile(filename_data, values.join(',') + '\\n', NOOP);\n\t\t};\n\n\t\tvar updatefile = function(fn) {\n\t\t\tF.Fs.readFile(filename_data, function(err, data) {\n\t\t\t\tvar lines = data.toString('utf8').split('\\n');\n\t\t\t\tfn(lines);\n\t\t\t\tF.Fs.writeFile(filename_data, lines.join('\\n'), NOOP);\n\t\t\t});\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'remove') {\n\t\t\t\t// msg.key\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines.splice(counter, 1);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (msg.type === 'rename') {\n\t\t\t\t// msg.key\n\t\t\t\t// msg.name\n\t\t\t\tmeta.keys[msg.name] = meta.keys[msg.key];\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines[counter] = msg.name + ',' + line.substring(key.length);\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar type = typeof(data);\n\n\t\t\tif (type === 'number')\n\t\t\t\tdata = { value: data };\n\n\t\t\tinstance.insert(CLONE(data));\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tCOPY(config, meta);\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS hr { margin: 10px 0; }\n\t.CLASS [contenteditable] { outline: 0 }\n\t.CLASS .padding { padding: 10px; font-size: 12px; }\n\t.CLASS .padding .meta { height: 16px; font-size: 11px; }\n\t.CLASS .padding .meta span { color: #888; margin-right: 5px; width: 30px; float: left; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:Dataset name\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:lastvalue|Last value only,logger|Logger,hourly|Hourly,daily|Daily,weekly|Weeekly,monthly|Monthly,yearly|Yearly;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.sum__dirsource:0|Disabled,1|Periodical sum,2|Total sum;type:number\">Calculate the sum</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.unit__align:1\">Unit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.decimals__align:1;type:number__2\">Decimals</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t</div>\n</settings>\n\n<readme>\nThe component stores data as CSV Dataset for e.g. Dashboard application. Dataset is stored in `/private/` path that is available with the help of the Flow access token.\n\nCSV file contains only processed values, which aren't closed and stored in the `.meta` file.\n\n```js\n{\n\tkey: String,    // optional, e.g. device_id | device_name\n\tvalue: Number   // measured value\n}\n```\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar laststatus;\n\n\t\texports.configure = function(config, isinit) {\n\t\t\tif (!isinit) {\n\t\t\t\texports.status(laststatus);\n\t\t\t\texports.rebind('status');\n\t\t\t}\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t\tif (status) {\n\t\t\t\tstatus.type = exports.config.type;\n\t\t\t\tfor (var key in status.keys)\n\t\t\t\t\tstatus.keys[key].unit = exports.config.unit;\n\t\t\t}\n\t\t};\n\n\t\texports.rename = function(meta, next) {\n\n\t\t\tvar id = ATTRD(meta.element);\n\t\t\tvar value = meta.value.replace(/\\\"|\\,/g, '');\n\n\t\t\tif (id !== value) {\n\t\t\t\tnext(false);\n\t\t\t\t// Due to \"enter\" key\n\t\t\t\tsetTimeout(ASETTER('approve/show', 'Are you sure you want to rename \"{0}\" to <b>\"{1}\"</b>?'.format(id, value), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\t\texports.trigger({ type: 'rename', key: id, name: value });\n\t\t\t\t\tnext(value);\n\t\t\t\t}), 200);\n\t\t\t} else\n\t\t\t\tnext(false);\n\n\t\t};\n\n\t\texports.click = function(el) {\n\t\t\tvar id = ATTRD(el);\n\t\t\tSETTER('approve/show', 'Are you sure you want to remove selected key <b>\"{0}\"</b>?'.format(id.encode()), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\texports.trigger({ type: 'remove', key: id });\n\t\t\t});\n\t\t};\n\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"padding\">\n\t\t\t<div data-bind=\"CONFIG__template\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<span class=\"badge badge-medium badge-color mr5\">{{ value.type }}</span> {{ if value.icon }}<i class=\"{{ value.icon }} mr5\"></i>{{ fi }}<b>{{ value.name }}</b>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div data-bind=\"STATUS__template__show\" class=\"keys hidden\">\n\t\t\t\t<script type=\"text/html\">\n\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t\t<div class=\"meta mt5\">\n\t\t\t\t\t\t\t<span>Meta:</span><div>dataset_{{ value.id }}.meta</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ if value.type !== 'lastvalue' }}\n\t\t\t\t\t\t<div class=\"meta\">\n\t\t\t\t\t\t\t<span>Data:</span><div>dataset_{{ value.id }}.csv</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ fi }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t{{ foreach m in value.keys }}\n\t\t\t\t\t\t<div class=\"keyvalue small\" data-id=\"{{ m.key }}\">\n\t\t\t\t\t\t\t<span><i class=\"fa fa-trash-alt red clickable\"></i><b class=\"edit\" data-edit=\"required:1;offsetWidth:150;exec:TOUCH.rename\" data-id=\"{{ m.key }}\">{{ m.key }}</b></span>\n\t\t\t\t\t\t\t<div class=\"right\">{{ m.value.value }} {{ m.value.unit }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t\t</div>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"cimm26e413": "<script total>\n\n\texports.name = 'Data parser';\n\texports.icon = 'fa fa-compress-arrows-alt';\n\texports.group = 'Transformations';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { type: '1', convert: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar streamer = null;\n\t\tvar reg = /,|;/;\n\n\t\tvar newmessage = function(data) {\n\n\t\t\tif (config.convert) {\n\t\t\t\tif (config.type === '1') {\n\t\t\t\t\tvar m = data.match(reg);\n\t\t\t\t\tdata = data.parseCSV(m ? m[0] : ',');\n\t\t\t\t} else\n\t\t\t\t\tdata = data.parseXML(true);\n\t\t\t}\n\n\t\t\tinstance.newmessage(data).send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (typeof(data) === 'string')\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\n\t\t\t$.destroy();\n\t\t\tdata && streamer && streamer(data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase '1':\n\t\t\t\t\tstreamer = U.streamer('\\n', newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstreamer = U.streamer(config.beg, config.end, newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstreamer = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can parse newline data or begin/end phrases in the buffer or string. In addition, it can help with parsing XML or CSV files.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"choose__?.type__selector:div\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\">\n\t\t\t\t<i class=\"fa fa-level-down-alt fa-rotate-90\"></i>\n\t\t\t\t<span>CSV</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\">\n\t\t\t\t<i class=\"fa fa-code\"></i>\n\t\t\t\t<span>XML</span>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.convert__type:checkbox\">Convert parsed value to the object</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div data-bind=\"?.type__show:value==='2'\" class=\"padding hidden\">\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"fa fa-cog\"></i>Advanced settings</label>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.beg__required:1;placeholder:&lt;PRODUCT&gt;\">Begin phrase</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.end__required:1;placeholder:&lt;/PRODUCT&gt;\">End phrase</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; text-align: center; }\n\t.CLASS footer span { font-family: var(--monospace); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div>{{ if value.type === '1' }}New line{{ else }}<span>{{ value.beg }}</span> - <span>{{ value.end }}</span>{{ fi }}</div>\n\t\t</script>\n\t</footer>\n</body>",
			"cin5ifb433": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'fab fa-wpforms';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\treturn val.parseDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Model name</div>\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"far fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"far fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name > div:first-child { font-weight: bold; outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.04); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), name: 'name', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 1) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"cink02be8f": "<script total>\n\n\texports.name = 'RSS reader';\n\texports.group = 'Transformations';\n\texports.version = '1';\n\texports.icon = 'fa fa-rss';\n\texports.author = 'Total.js';\n\texports.config = { url: '', type: 'a' };\n\texports.inputs = [{ id: 'input', name: 'Trigger' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\n\t\tvar cache = [];\n\t\tvar cachelimit = 50;\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tif (!config.url)\n\t\t\t\treturn;\n\n\t\t\tvar opt = {};\n\t\t\topt.method = 'GET';\n\t\t\topt.custom = true;\n\t\t\topt.url = config.url;\n\n\t\t\tvar output = config.type === 'a' || config.type === 'b' ? [] : null;\n\n\t\t\tREQUEST(opt, function(err, response) {\n\t\t\t\tresponse.stream.on('data', U.streamer('<item>', '</item>', function(xml) {\n\t\t\t\t\tvar item = xml.parseXML(true);\n\t\t\t\t\tif (item) {\n\n\t\t\t\t\t\tvar obj = {};\n\t\t\t\t\t\tobj.title = item.item_title;\n\t\t\t\t\t\tobj.id = obj.title.makeid();\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'd') {\n\t\t\t\t\t\t\tif (cache.indexOf(obj.id) !== -1)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tif (cache.unshift(obj.id) > cachelimit)\n\t\t\t\t\t\t\t\tcache.pop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj.description = item.item_description;\n\t\t\t\t\t\tobj.link = item.item_link;\n\n\t\t\t\t\t\tif (item.item_image_url)\n\t\t\t\t\t\t\tobj.image = item.item_image_url;\n\t\t\t\t\t\telse if (item['item_enclosure__'])\n\t\t\t\t\t\t\tobj.image = item['item_enclosure__'].url;\n\n\t\t\t\t\t\tvar date = item.item_pubDate || item.item_pubdate;\n\t\t\t\t\t\tif (date)\n\t\t\t\t\t\t\tobj.date = new Date(date);\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'c')\n\t\t\t\t\t\t\tinstance.newmessage().send('output', obj);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\toutput.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tresponse.stream.on('end', function() {\n\t\t\t\t\toutput && output.length && instance.newmessage().send('output', output);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.trigger();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS footer { padding: 5px 10px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.url__type:url;required:1\">URL address</div>\n\t\t<div class=\"help m\">Example: <code>https://blog.totaljs.com/rss/</code></div>\n\t\t<div data---=\"input__?.type__dirsource:a|Send all items,b|Send only new items,c|Send every item separately,d|Send only new items separately\">Output</div>\n\t</div>\n</settings>\n\n<readme>\nThe component downloads every item from the RSS source. A message on to this `Trigger` input starts downloading RSS data.\n\n__Example__:\n```js\n{\n\ttitle: String,\n\tdescription: String,\n\tlink: String,\n\timage: String, // optional\n\tdate: Date // optional\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Download</button>\n\t</div>\n\t<footer data-bind=\"CONFIG.url__text__show\"></footer>\n</body>",
			"cip1k9ce15": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"cipimebbe7": "<script total>\n\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'fas fa-running';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cipzv710a6": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"ciqgwb764e": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"cirsg24067": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-recycle';\n\texports.author = 'Total.js';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.path___required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval___required:1;type:number;min:100;align:1;ricon:!ms__1000\">Interval</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div data---=\"input__?.parser__dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1__'json'\" class=\"m\">Parser</div>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"ciscz7ac32": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\" class=\"m\"><b>Path</b></div>\n\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"civadc808d": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tif (typeof(data.data) === 'object') {\n\t\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\t\tnosql.insert(data.data).callback(function(err) {\n\t\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\t$.send('output', { success: false, error: 'invalid data' });\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tif (!filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'find', // optional, will override settings value\n\t// for Insert, Update\n\tdata: { ... },\n\t// for Query, Read, Update, Remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"textbox__?.collection\" class=\"m\">DB collection(table) name</div>\n\t\t<div data---=\"input__?.method__dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</div>\n\t\t<div data-bind=\"?.method__show:value === 'insert'\">\n\t\t\t<div data---=\"checkbox__?.addid\">Add unique ID to `id` property of data before insert</div>\n\t\t</div>\n\t\t<div data-bind=\"?.method__show:value === 'update'\">\n\t\t\t<div data---=\"checkbox__?.upsert\">Insert document if it doesn't exist</div>\n\t\t\t<div data---=\"checkbox__?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cj1id7ec88": "<script total>\n\n\texports.name = 'SQLite3';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.npm = ['better-sqlite3'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst Database = require('better-sqlite3');\n\t\tvar db, file;\n\t\tvar fns = ['run', 'get', 'all', 'exec'];\n\n\t\tinstance.message = function($) {\n\t\t\tif (!db) {\n\t\t\t\t$.send('error', { error: 'db not ready' });\n\t\t\t\treturn instance.throw('SQLite3 not ready');\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.prepare || !data.fn) {\n\t\t\t\tinstance.throw('No `prepare` or `op` provided');\n\t\t\t\treturn $.send('error', { error: 'invalid input data' });;\n\t\t\t}\n\n\t\t\tif (fns.indexOf(data.fn) < 0) {\n\t\t\t\tinstance.throw('Unsupported function: ' + data.fn);\n\t\t\t\treturn $.send('error', { error: 'unsupported function' });\n\t\t\t}\n\n\t\t\tif (data.fn === 'exec') {\n\t\t\t\tlet result = db.exec(data.prepare);\n\t\t\t\treturn $.send('output2', result);\n\t\t\t}\n\n\t\t\tlet stmt = db.prepare(data.prepare);\n\t\t\tlet result = data.data ? stmt[data.fn](data.data) : stmt[data.fn]();\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tlet newfile = PATH.databases(config.filename || `${instance.id}.sqlite`);\n\t\t\tif (file === newfile)\n\t\t\t\treturn;\n\n\t\t\tfile = newfile;\n\n\t\t\tlet tmp = exports.DBS[file];\n\t\t\tif (tmp) {\n\t\t\t\tdb = tmp.db;\n\t\t\t\ttmp.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdb = new Database(file, { verbose: console.log });\n\t\t\texports.DBS[file] = {\n\t\t\t\tdb,\n\t\t\t\tcount: 1\n\t\t\t};\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (file && db) {\n\t\t\t\texports.DBS[file].count--;\n\t\t\t\tif (exports.DBS[file].count === 0) {\n\t\t\t\t\tdb && db.close();\n\t\t\t\t\tdb = null;\n\t\t\t\t\tdelete exports.DBS[file];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nSQLite3 [Documentation](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md)\n\n```js\n{\n\t// query\n\tprepare: 'INSERT INTO cats (name, age) VALUES (?, ?)',\n\n\t// function name: run, get, all, exec\n\tfn: 'run',\n\n\t// data, optional\n\tdata: ['Joey', 2] // string/number or array\n\n}\n```\n\nFunctions:\n\t- [run](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#runbindparameters---object)\n\t- [get](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#getbindparameters---row)\n\t- [all](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#allbindparameters---array-of-rows)\n\t- [exec](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#execstring---this)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<div data---=\"input__?.filename__placeholder:mydatabase\">Filename (optional)</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"cjordb9d5c": "<script total>\n\n\texports.id = 'rabbitmqconsume';\n\texports.name = 'RabbitMQ Consume';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar channel, Manager, ManagerState;\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tinstance.status('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tinstance.status('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinstance.status(ManagerState.title, 1000);\n\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel instance.\n\t\t\t\t\tvar qname = instance.replace(config.queuename);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tchan.assertQueue(qname, { consumerTag: 'consumer-' + qname }),\n\t\t\t\t\t\tchan.consume(qname, function(msg) {\n\t\t\t\t\t\t\tif (msg !== null) {\n\t\t\t\t\t\t\t\tvar data = {\n\t\t\t\t\t\t\t\t\tqueuename: qname,\n\t\t\t\t\t\t\t\t\tpayload: msg.content.toString(),\n\t\t\t\t\t\t\t\t\tmsg: { fields: msg.fields }\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tinstance.send('output', data);\n\t\t\t\t\t\t\t\tchan.ack(msg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t]);\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tconsole.log(config.manager, man);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\tON('configure_rabbitmqconsume', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"cjoepce58d": "<script total>\n\n\texports.id = 'rabbitmqconnection';\n\texports.name = 'RabbitMQ Connection';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [];\n\texports.flags = ['rabbitmq'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\t\tvar Manager;\n\t\tvar states = { connected: 'Connected', disconnected: 'Disconnected', connecting: 'Connecting ...', connectionfailed: 'Connection failed' };\n\n\t\tinstance.state = { id: 'disconnected', title: states.disconnected };\n\t\tvar setState = (state) => {\n\t\t\tinstance.state = { id: state, title: states[state] };\n\n\t\t\tinstance.status(states[state], 1000);\n\t\t\tnotifyDeps(state, states[state]);\n\t\t};\n\n\t\tvar notifyDeps = (type) => {\n\t\t\tvar instances = instance.main.instances().filter(i => i.module.flags && i.module.flags.includes('rabbitmq-dep') > -1 && i.config.manager === instance.id);\n\t\t\tfor (let com of instances)\n\t\t\t\tcom.configure(type);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.close(true);\n\n\t\t\tif (!config.hostname) // queue name is optional in some cases, not supported here\n\t\t\t\treturn instance.status('Not configured');\n\n\t\t\tsetState('connecting');\n\t\t\tinstance.status(states.connecting);\n\n\t\t\tconfig.port = config.port || 5672;\n\t\t\tconfig.vhost = config.vhost || '/';\n\t\t\tif (config.vhost[0] !== '/')\n\t\t\t\tconfig.vhost = '/' + config.vhost;\n\n\t\t\tvar credentials = '';\n\t\t\tif (config.username)\n\t\t\t\tcredentials += config.username;\n\t\t\tif (config.password)\n\t\t\t\tcredentials += ':' + config.password;\n\t\t\tif (credentials)\n\t\t\t\tcredentials += '@';\n\n\t\t\tvar conString = `${config.protocol}://${credentials}${config.hostname}:${config.port}${config.vhost}`;\n\n\t\t\t// Create a new connection manager\n\t\t\tManager = amqp.connect([conString]);\n\t\t\tManager.on('connect', function(){\n\t\t\t\tinstance.Manager = Manager;\n\t\t\t\tsetState('connected');\n\t\t\t});\n\n\t\t\tManager.on('connectFailed', function(){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('connectionfailed');\n\t\t\t\t// notifyDeps('connectfailed'); // this does not happen after connect so the deps should be disconnected\n\t\t\t});\n\n\t\t\tManager.on('disconnect', function(e){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('disconnected');\n\t\t\t});\n\n\t\t\tManager.on('error', function(e){\n\t\t\t\tconsole.log('Rabbit Error', e);\n\t\t\t\tif (!Manager.isConnected()) {\n\t\t\t\t\tsetState('disconnected');\n\t\t\t\t\tinstance.Manager = null;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(silent) {\n\t\t\tManager && Manager.close();\n\t\t\tinstance.Manager = null;\n\t\t\t!silent && notifyDeps('removed');\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.hostname__placeholder:localhost;required:1\" class=\"m\">Hostname or IP address</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.port__type:number;placeholder:5672__5672\" class=\"m\">Port (default: 5672)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.protocol__dirsource:amqp|amqp,amqps|amqps__'amqp'\" class=\"m\">Protocol</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.vhost__placeholder:/\" class=\"m\">Virtual host</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.username\" class=\"m\">Username</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.password__type:password\" class=\"m\">Password</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__show__text\"></footer>\n</body>",
			"cjphx755c8": "<script total>\n\n\texports.id = 'rabbitmqpublish';\n\texports.name = 'RabbitMQ Publish';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'fa fa-envelope-o';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\n\t\tvar Manager, channel, ManagerState;\n\t\tvar stats = { ack: 0, nack: 0 };\n\n\t\t// initialy the stack is paused\n\t\tvar stack = new Stack(instance.id, function(data, next){\n\t\t\tif (!channel) {\n\t\t\t\treturn next(false);\n\t\t\t}\n\n\t\t\tchannel\n\t\t\t\t.sendToQueue(config.queuename, Buffer.from(data))\n\t\t\t\t.then(function () {\n\t\t\t\t\tnext(true);\n\t\t\t\t\tif (stats.ack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.ack = 0;\n\t\t\t\t\tstats.ack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tnext(false);\n\t\t\t\t\tif (stats.nack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.nack = 0;\n\t\t\t\t\tstats.nack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t});\n\t\t});\n\n\t\tinstance.message = function($) {\n\t\t\tvar d = $.data;\n\t\t\tvar type = typeof(d);\n\t\t\tif (type !== 'buffer' && type !== 'string')\n\t\t\t\td = JSON.stringify(d);\n\n\t\t\tstack.push(d);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tfunction setStatus(str, timeout) {\n\t\t\tinstance.status({\n\t\t\t\tstate: str || ManagerState.title,\n\t\t\t\tstats\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tsetStatus('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\tsetStatus('Disconnected', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tsetStatus('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetStatus(ManagerState.title, 1000);\n\n\t\t\tchannel && channel.close && channel.close();\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\t// Ask the connection manager for a ChannelWrapper.  Specify a setup function to\n\t\t\t// run every time we reconnect to the broker.\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel wrapper instance.\n\t\t\t\t\tsetTimeout(_ => { stack && stack.next(); }, 1000);\n\t\t\t\t\treturn chan.assertQueue(config.queuename, { durable: true });\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tstack.destroy();\n\t\t\tstack = null;\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction Stack(id, callback) {\n\t\t\tvar self = this;\n\t\t\tself.dbname = 'amqp_stack_' + id;\n\t\t\tself.index = 0;\n\t\t\tself.callback = callback;\n\t\t\tself.busy = false;\n\t\t\tself.db = NOSQL(self.dbname);\n\t\t\t//NOSQLMEMORY(self.dbname);\n\t\t};\n\n\t\tStack.prototype.destroy = function() {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.busy = true;\n\t\t\tthis.callback = () => {};\n\t\t\tthis.data = null;\n\t\t};\n\n\t\tStack.prototype.next = function() {\n\t\t\tvar self = this;\n\t\t\tif (self.busy)\n\t\t\t\treturn;\n\t\t\tself.busy = true;\n\t\t\tif (self.timeout) {\n\t\t\t\tclearTimeout(self.timeout);\n\t\t\t\tself.timeout = null;\n\t\t\t}\n\n\t\t\tself.db.find().first().callback(function(err, data){\n\t\t\t\tif (data) {\n\t\t\t\t\tvar id = data.id;\n\t\t\t\t\tvar data = data.data;\n\t\t\t\t\tself.callback(data, function(ok){\n\t\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t\tself.db.remove().where('id', id).callback(function(){\n\t\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\tself.timeout = setTimeout(function(){\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\tself.busy = false;\n\t\t\t});\n\t\t};\n\n\t\tStack.prototype.push = function(data) {\n\t\t\tthis.db.insert({ id: this.index++, data: data }).callback((err, result, meta) => {\n\t\t\t\tthis.next();\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.manager__dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.queuename__required:1\" class=\"m\">Queue name</div>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer span { float: right; }\n</style>\n\n<script>\n\tON('configure_rabbitmqpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.state__text\"></div>\n\t\t<div>Ack: <span data-bind=\"STATUS.stats.ack__text\"></span></div>\n\t\t<div>Nack: <span data-bind=\"STATUS.stats.nack__text\"></span></div>\n\t</footer>\n</body>",
			"cjue1ca74d": "<script total>\n\n\texports.name = 'Split';\n\texports.icon = 'fa fa-random';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? U.get(config.path, $.data) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"meno\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"meno\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"meno\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"meno\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"meno\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"meno\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.path__show__text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
			"ck5id8291c": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8ij9c0cd": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck8zl7724b": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '3';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ck9jk93551": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"c28uo6c48a": "<script total>\r\n\texports.name = 'RPIgpio';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['rpi-gpio'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar RPI = require('rpi-gpio');\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bit = $.data;\r\n\r\n\t\t\tif (config.read_write && config.gpiokey) {\r\n\r\n\t\t\t\tswitch (config.read_write) {\r\n\t\t\t\t\tcase 'write':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tcase 'read':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$.destroy();\r\n\r\n\t\t};\r\n\t};\r\n</script>\r\n\r\n<readme>\r\n# GPIO\r\n\r\n__Write mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the component to set the GPIO to HIGH\r\n- Send false to the component to set the GPIO to LOW\r\n\r\n__Read mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the node so read the state of the gpio\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\r\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\r\n\t</header>\r\n</body>",
			"c2pro15472": "<script total>\r\n\texports.name = 'RPIi2cWrite';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar stringtonumber = c => parseInt(c);\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet address, register, bytes;\r\n\r\n\t\t\ttry {\r\n\t\t\t\taddress = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tregister = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tbytes = Buffer.from($.data.bytes ? $.data.bytes : (config.bytes.split (',').map(stringtonumber)));\r\n\t\t\t} catch (err) {\r\n\t\t\t\t$.send('output', err + '');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Send msg\r\n\t\t\tlet i2c1 = I2C.openSync(1);\r\n\t\t\tlet length = i2c1.writeI2cBlockSync(address, register, bytes.length, bytes);\r\n\t\t\t$.send('output', { data: bytes });\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Write\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `bytes`: The bytes which will be written\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.address\">Address</div>\r\n\t\t<div data---=\"input__?.register\">Register</div>\r\n\t\t<div data---=\"input__?.bytes\">Data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Write\r\n\t</header>\r\n</body>",
			"c2qxlf79f2": "<script total>\r\n\texports.name = 'RPIuartDevices';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tvar SerialPort = new require('serialport');\r\n\t\tinstance.trigger = async function() {\r\n\t\t\tawait SerialPort.list().then(function(ports) {\r\n\t\t\t\tinstance.send('output', ports);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# UART\r\n\r\nGet all devices which are possible to send\r\n</readme>\r\n\r\n<script>\r\n\tFUNC.frpiuartdevices_exec = function(el) {\r\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART Devices\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.frpiuartdevices_exec\">Run</button>\r\n\t</div>\r\n</body>",
			"c2qgscea9": "<script total>\r\n\texports.name = 'RPIi2cRead';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.npm = ['i2c-bus'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar I2C = require('i2c-bus');\r\n\t\tvar BCD2D = function(Wert) {\r\n\t\t\treturn Wert % 16 + 10 * parseInt(Wert / 16);\r\n\t\t};\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar i2c1 = I2C.openSync(1);\r\n\r\n\t\t\tif (config.presensor) {\r\n\t\t\t\tswitch (config.sensor) {\r\n\t\t\t\t\tcase 'DS1307':\r\n\t\t\t\t\t\tlet rbuf = Buffer.alloc(7);\r\n\t\t\t\t\t\ti2c1.readI2cBlockSync(0x68, 0x00, rbuf.length, rbuf); // address, register, length, buffer\r\n\t\t\t\t\t\t$.send('output', { year: BCD2D(rbuf[6]), month: BCD2D(rbuf[5]), date: BCD2D(rbuf[4]), day: BCD2D(rbuf[3]), hour: BCD2D(rbuf[2]), minute: BCD2D(rbuf[1]), second: BCD2D(rbuf[0]) });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t$.destroy();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet address = parseInt($.data.address ? $.data.address : config.address);\r\n\t\t\t\tlet register = parseInt($.data.register ? $.data.register : config.register);\r\n\t\t\t\tlet readLength = parseInt($.data.readLength ? $.data.readLength : config.readLength);\r\n\r\n\t\t\t\t//send msg\r\n\t\t\t\tlet rbuf = Buffer.alloc(readLength);\r\n\t\t\t\tlet length = i2c1.readI2cBlockSync(address, register, readLength, rbuf);\r\n\t\t\t\t$.send('output', rbuf.toString());\r\n\t\t\t}\r\n\r\n\t\t\ti2c1.closeSync();\r\n\t\t};\r\n\t};\r\n\r\n</script>\r\n\r\n<readme>\r\n# I2C Read\r\n\r\nParameters, can be transmitted to the component, or directly set as setting.\r\n\r\n- `address`: The I2C address of the device\r\n- `register`: The (starting) register\r\n- `readLength`: The length of how many bits will be read\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.presensor__type:checkbox\">Predefined Sensor</div>\r\n\t\t</div>\r\n\t\t<hr />\r\n\t\t<div data-bind=\"?.presensor__show\" class=\"show\">\r\n\t\t\t<div data---=\"input__?.sensor__dirsource:DS1307|DS1307,none|none;required:1\">Sensor</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.presensor__hide\" class=\"hidden\">\r\n\t\t\t<div data---=\"input__?.address__required:0\">Address</div>\r\n\t\t\t<div data---=\"input__?.register__required:0\">Register</div>\r\n\t\t\t<div data---=\"input__?.readLength__required:0\">readLength</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry I2C Read\r\n\t</header>\r\n</body>",
			"c2rhca784d": "<script total>\r\n\texports.name = 'RPIuart';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = { port:'/dev/ttyUSB0' };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['serialport'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar SerialPort = require('serialport')\r\n\t\tvar sp;\r\n\r\n\t\tinstance.openConnectionUart = function(){\r\n\r\n\t\t\tsp = new SerialPort(config.port, {\r\n\t\t\t\tbaudRate: parseInt(config.baudrate),\r\n\t\t\t\tdataBits: parseInt(config.databits),\r\n\t\t\t\tparity: config.parity,\r\n\t\t\t\tstopBits: parseInt(config.stopbits),\r\n\t\t\t\tflowControl: false,\r\n\t\t\t\tautoOpen: false\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('open', function() {\r\n\t\t\t\tinstance.status({ open: true });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('close', function() {\r\n\t\t\t\tinstance.status({ open: false });\r\n\t\t\t});\r\n\r\n\t\t\tsp.on('data', function (data) {\t// Switches the port into 'flowing mode'\r\n\t\t\t\tinstance.send('output', data);\r\n\t\t\t});\r\n\r\n\t\t\tsp.open(function (err) {\r\n\t\t\t\tif (err)\r\n\t\t\t\t\tinstance.send('error', 'Error opening port: ' + err.message);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bytes = $.data;\r\n\r\n\t\t\t//check if sp is open\r\n\t\t\tif (!sp)\r\n\t\t\t\tinstance.openConnectionUart();\r\n\r\n\t\t\t//send msg\r\n\t\t\tsp.write(bytes);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.close = function(){\r\n\t\t\tsp && sp.close(NOOP);\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 0 10px 5px; font-weight: bold; }\r\n</style>\r\n\r\n<readme>\r\n# UART\r\n\r\n- send a string directly to a port\r\n- when device from a port sends data to the host, it will be send to the output of the component\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.port__required:1\">PORT</div>\r\n\t\t<div data---=\"input__?.baudrate__dirsource:110|110,300|300,600|600,1200|1200,2400|2400,4800|4800,9600|9600,14400|14400,19200|19200,38400|38400,57600|57600,115200|115200,128000|128000;required:1\">Baudrate</div>\r\n\t\t<div data---=\"input__?.databits__dirsource:5|5,6|6,7|7,8|8;required:1\">Databits</div>\r\n\t\t<div data---=\"input__?.parity__dirsource:none|none,even|even,mark|mark,odd|odd,space|space;required:1\">Parity</div>\r\n\t\t<div data---=\"input__?.stopbits__dirsource:1|1,2|2;required:1\">Stop Bits</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry UART\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data-bind=\"!STATUS__template__show\" class=\"status hidden\">\r\n\t\t\t{{ if value.open }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 green\"></i>Open\r\n\t\t\t{{ else }}\r\n\t\t\t\t<i class=\"fa fa-circle mr5 red\"></i>Closed\r\n\t\t\t{{ fi }}\r\n\t\t</div>\r\n\t</footer>\r\n</body>",
			"c2ugtc105d": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'fas fa-tablet';\n\texports.author = 'Total.js';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div data---=\"input__?.token__required:1;camouflage:*\">Total API token</div>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.from\">From</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<div data---=\"input__?.to\">To</div>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.isdata__type:checkbox\" class=\"b mt5\">Send incoming message data only</div>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<div data---=\"input__?.body__maxlength:500;required:1\">Message</div>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS.response__text__show\" class=\"error hidden\"></div>\n\t</footer>\n</body>",
			"cf8ga6bf53": "<script total>\n\n\texports.name = 'Throttle';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-filter';\n\texports.author = 'Total.js';\n\texports.config = { limit: 1, delay: 0 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Outputs' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar pending = [];\n\t\tvar running = 0;\n\n\t\tvar check = function() {\n\t\t\tif (running < config.limit) {\n\n\t\t\t\tvar diff = config.limit - running;\n\t\t\t\tvar items = pending.splice(0, diff);\n\n\t\t\t\trunning += items.length;\n\n\t\t\t\tif (config.delay) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\t\titem.send('output');\n\t\t\t\t\t}, config.delay);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\titem.send('output');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinstance.status(pending.length, 500);\n\t\t};\n\n\t\tvar end = function() {\n\t\t\trunning--;\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.on('end', end);\n\t\t\tpending.push($);\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tvar item = pending.shift();\n\t\t\tif (item) {\n\t\t\t\trunning++;\n\t\t\t\titem.send('output');\n\t\t\t}\n\t\t\tcheck();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component sends only limited count of messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number\">Limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.delay__required:0;align:1;type:number;ricon:!ms\">Delay</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"button exec\" data-exec=\"FUNC.trigger\">Send</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"coob8a3971": "<script total>\n\n\texports.name = 'code';\n\texports.group = 'ACGDevs';\n\texports.version = '2';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alain Guigma';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send([output], data);\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cu343d9d6": "<script total>\n\n\texports.name = 'Template';\n\texports.icon = 'fa fa-code';\n\texports.group = 'ACGDevs';\n\texports.author = 'Louis Bertson';\n\texports.version = '1';\n\texports.config = { template : '<h3>Hello World!</h3>'};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\t\tvar can = false;\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\tif(can){\n\t\t\t\ttry {\n\t\t\t\t\t\tvar data = $.data;\n\t\t\t\t\t\tvar res  = VIEWCOMPILE('@{nocompress all}\\n'+instance.config.template,data,'','');\n\t\t\t\t\t     data.template = res;\n\t\t\t\t\t\t$.send('output', data);\n\t\t\t} catch (e){\n\t\t\t\tconsole.log(e);\n\n\t\t\t}\n\n\t\t\t}\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tcan = instance.config.template ? true : false;\n\t\t\tinstance.status(can ? '' : 'Not defined',can ? undefined : 'red');\n\t\t};\n\n\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div style=\"width:1OO%\">\n\t\t<div data---=\"codemirror__?.template__required:true;height:300;\"></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.header2{ color : #fff;background-color : #61C83B};\n\t.header2 .fa { color : #fff!important;};\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header class=\"header2\">\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"il304cv4v": {
				"id": "il304cv4v",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"interval": 12000
				},
				"x": -11.125,
				"y": 556.625,
				"component": "ciqgwb764e",
				"connections": {
					"output": [
						{
							"id": "il34hy3gy",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Triggers",
					"name": "Timer",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il305osq5": {
				"id": "il305osq5",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_national_bf').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 465,
				"y": 359,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31auzem",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31auzem": {
				"id": "il31auzem",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_national_bf').callback(function(err,response) {\n\tif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 703,
				"y": 343,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31cefls",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31cefls": {
				"id": "il31cefls",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 974.8959350585938,
				"y": 352.91668701171875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31e9qdk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31doouu": {
				"id": "il31doouu",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2779.965576171875,
				"y": 147.98611450195312,
				"component": "ci2ol4a50c",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il31e9qdk": {
				"id": "il31e9qdk",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1242.8126831054688,
				"y": 362.91668701171875,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h3pxt",
							"index": "input"
						},
						{
							"id": "il3vovew3",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h3pxt": {
				"id": "il31h3pxt",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','translate').callback(function(err,response) {\n\tdata.translateconfigs = response;\n\t$.send('output',data);\n})"
				},
				"x": 1527.9515380859375,
				"y": 124.96528625488281,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31h85ev",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31h85ev": {
				"id": "il31h85ev",
				"config": {
					"outputs": 1,
					"code": "var opt = {};\nvar configs = data.translateconfigs;\nopt.method = 'POST';\nopt.url = configs.baseurl+\"?\"+configs.value;\nopt.headers = configs.headers;\n\nopt.body = '[{\"Text\":\"'+data.title+\"||\"+data.description+'\"}]';\nopt.callback = function(err,response) {\n    response = response.body.parseJSON(true);\n\tif(response){\n\t\tdata.translated = response[0]['translations'][0]['text'];\n\t\t$.send('output', data);\n\t}\n\n}\n\nREQUEST(opt);"
				},
				"x": 1754.9654541015625,
				"y": 125.97222900390625,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31j3ew8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31j3ew8": {
				"id": "il31j3ew8",
				"config": {
					"outputs": 1,
					"code": "var doc = { id : 'actualite_sports_national_bf'};\ndoc.original = data;\ndoc.date = F.datetime.format('HH:mm');\n$.send('output',doc);"
				},
				"x": 2051.9793701171875,
				"y": 152.95140075683594,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il31ku6kw",
							"index": "input"
						},
						{
							"id": "il31doouu",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il31ku6kw": {
				"id": "il31ku6kw",
				"config": {
					"template": "<h3>Hello World!</h3>"
				},
				"x": 2391.9793701171875,
				"y": 80.97222900390625,
				"component": "cu343d9d6",
				"connections": {},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345fxjo": {
				"id": "il345fxjo",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_national_bj').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 470,
				"y": 489,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345jzxv",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345jzxv": {
				"id": "il345jzxv",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_national_bj').callback(function(err,response) {\nif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 703,
				"y": 534,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345ltgb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345ltgb": {
				"id": "il345ltgb",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\nREQUEST(opt);"
				},
				"x": 968.8635864257812,
				"y": 543.8636169433594,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il345n14s",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il345n14s": {
				"id": "il345n14s",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1216,
				"y": 545,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vosqn8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34hy3gy": {
				"id": "il34hy3gy",
				"config": {
					"outputs": 1,
					"code": "NOSQL('config').one().where('name','power').callback(function(err,config) {\n\tif(config.value == 'on'){\n\t\t$.send('output', config);\n\t}\n});"
				},
				"x": 204.875,
				"y": 566.78125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i3g9e",
							"index": "input"
						},
						{
							"id": "il305osq5",
							"index": "input"
						},
						{
							"id": "il345fxjo",
							"index": "input"
						},
						{
							"id": "il38lmcrg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i3g9e": {
				"id": "il34i3g9e",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_national_ml').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 477.9375,
				"y": 665.9375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i43j5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i43j5": {
				"id": "il34i43j5",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_national_ml').callback(function(err,response) {\n\tif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 692.9544982910156,
				"y": 666.9601440429688,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i4n1l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i4n1l": {
				"id": "il34i4n1l",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 938.9203987121582,
				"y": 674.9431457519531,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il34i5ak9",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il34i5ak9": {
				"id": "il34i5ak9",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1193,
				"y": 708,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3voq2o0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lmcrg": {
				"id": "il38lmcrg",
				"config": {
					"outputs": 1,
					"code": "NOSQL('times').one().where('name','actualite_sports_national_ne').callback(function(err,response) {\n\tif(F.datetime.format('HH:mm') == response.time){\n\t\t$.send('output', data);\n\t}\n\n\n})\n\n$.send('output',data);"
				},
				"x": 472.9375,
				"y": 855.9375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lnt4b",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lnt4b": {
				"id": "il38lnt4b",
				"config": {
					"outputs": 1,
					"code": "NOSQL('apiconfigs').one().where('name','actualite_sports_national_ne').callback(function(err,response) {\nif (response.power == \"on\"){\n\t\t$.send('output',response);\n\t}\n});"
				},
				"x": 710.9943084716797,
				"y": 910.9942932128906,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lobu4",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lobu4": {
				"id": "il38lobu4",
				"config": {
					"outputs": 1,
					"code": "var config = data;\nvar opt = {};\nopt.url = config.baseurl+\"?access_key=\"+config.access_key+\"&\"+config.value;\nopt.callback = function(err,response) {\n\tresponse = response.body.parseJSON(true);\n\tif(response.pagination && response.pagination.count){\n\t\t$.send('output',{config : config, result : response.data});\n\t}\n};\n\nREQUEST(opt);"
				},
				"x": 963.9772338867188,
				"y": 910.9942932128906,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il38lorsj",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lorsj": {
				"id": "il38lorsj",
				"config": {
					"outputs": 1,
					"code": "var results = data.result;\nresults.forEach(function(item) {\n\titem.config = data.config;\n\t$.send('output',item);\n});"
				},
				"x": 1206.9885864257812,
				"y": 905.9658813476562,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3veutme",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il38lpnms": {
				"id": "il38lpnms",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1762.0625,
				"y": 1031.9375,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3veutme": {
				"id": "il3veutme",
				"config": {
					"template": "***ACTUALITE CHAMPIONS LEAGUE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1471.4202880859375,
				"y": 918.3521728515625,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il38lpnms",
							"index": "input"
						},
						{
							"id": "il3vg4bxm",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vg4bxm": {
				"id": "il3vg4bxm",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1731.875,
				"y": 872.34375,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vh3l7f",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vh3l7f": {
				"id": "il3vh3l7f",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2013.4942626953125,
				"y": 880.6533203125,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3voq2o0": {
				"id": "il3voq2o0",
				"config": {
					"template": "***ACTUALITE COUPE D'EUROPE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1449.5625,
				"y": 754.34375,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3voqjyo",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3voqjyo": {
				"id": "il3voqjyo",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : new Date(), contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : new Date().format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1724.8612060546875,
				"y": 726.3194580078125,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3voqw8d",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3voqw8d": {
				"id": "il3voqw8d",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2087.8125,
				"y": 760,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3vosqn8": {
				"id": "il3vosqn8",
				"config": {
					"template": "***ACTUALITE COUPE D'AFRIQUE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1458.5765380859375,
				"y": 555.3472595214844,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3voszkl",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3voszkl": {
				"id": "il3voszkl",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n})"
				},
				"x": 1729.75,
				"y": 594.5,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vot9ev",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vot9ev": {
				"id": "il3vot9ev",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2051.625,
				"y": 591,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il3vovew3": {
				"id": "il3vovew3",
				"config": {
					"template": "***ACTUALITE COUPE DU MONDE @{F.datetime.format('dddd dd MMM yyyy', 'date')} ***\n@{model.title}\n@{model.description}"
				},
				"x": 1516.125,
				"y": 372.875,
				"component": "cu343d9d6",
				"connections": {
					"output": [
						{
							"id": "il3vovtgz",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "Template",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vovtgz": {
				"id": "il3vovtgz",
				"config": {
					"outputs": 1,
					"code": "var obj = {id : UID(),apiconfig_name :data.config.name, language : data.language, dtcreated : F.datetime, contenu : data.template, isconfirmed : false, issent : false,isbad : false ,date : F.datetime.format('yyyy-MM-dd'), payload : data };\nNOSQL('contenustoday').insert(obj,true).where('contenu', obj.contenu).callback(function(err, res) {\n\t$.send('output', res);\n});"
				},
				"x": 1766,
				"y": 279,
				"component": "coob8a3971",
				"connections": {
					"output": [
						{
							"id": "il3vow7wk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "ACGDevs",
					"name": "code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il3vow7wk": {
				"id": "il3vow7wk",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2020.625,
				"y": 374.9375,
				"component": "ch5c79dcc2",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"paused": {
				"input__il31h3pxt__input": 1,
				"input__il305osq5__input": 1,
				"input__il345fxjo__input": 1,
				"input__il34i3g9e__input": 1,
				"input__il38lmcrg__input": 1,
				"output__il34hy3gy__output": 1
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://192.168.0.171:8454",
		"dtcreated": "2022-06-13T11:40:08.939Z",
		"size": 299267,
		"variables2": {}
	}
}